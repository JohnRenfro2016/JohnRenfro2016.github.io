<!DOCTYPE html>
<html lang="en-US">
<head>
<meta content="text/html" charset="utf-8" http-equiv="content-type">
<meta content="utf-8" http-equiv="encoding">
<meta name="description" content="2022 Advanced Dungeons & Dragons 1st Edition Tabletop Roleplaying Game Encounter Manager">
<meta name="keywords" content="DnD, Dungeons and Dragons, D&D, Dungeons & Dragons, Fantasy RPG, tabletop roleplaying game, TTRPG, RPG">
<title>The 2022 Advanced Dungeons & Dragons 1st Edition Tabletop Roleplaying Game Encounter Manager(Asmor, Zorn, Ren)</title>
//<script src="Scripts/WZDragdrop.js"></script>
//<script src="Scripts/jquery-3.6.0.js"></script>
<script src="Scripts/jquery-ui-1.13.1.js"></script>
<script src="Scripts/draggable-div-with-touch.js"></script>
<script>

$('.DraggableDiv').draggableTouch()

</script>
</head>

<style>

@font-face
{font-family: MyKidsHandwritten;
src: url("Decorations/MyKidsHandwritten.ttf");
}

body
{background-color:#013220;
z-index:0;
}

table,tr,td,button,input,option,radio,select,textarea
{background-color:inherit;
border:1px;
border-color:#333b2f;
border-style:solid;
border-radius:4px;
font-family: 'MyKidsHandwritten';
font-size:25px;
margin:1px;
outline:1px solid transparent;
overflow-wrap:anywhere;
padding:1px;
text-decoration:#22271f;
text-decoration-thickness:2px;
vertical-align:top;
word-break:break-word;
}

table
{background-image:url("Decorations/Panel.png");
}

.tablesTogether{display:inline-block;}

td,tr
{
min-width: 25px;
word-wrap: normal;
}

tr:nth-child(even){background:rgba(0,0,0, 0.1)}tr:nth-child(odd){background:rgba(0,0,0, 0.2)}
td:nth-child(even){background:rgba(0,0,0, 0.1)}td:nth-child(odd){background:rgba(0,0,0, 0.2)}
a:active{color:#f13a37
}a:link{color:#8e060f
}a:hover{color:#c4141b
}a:selected{color:#b92429
}a:visited{color:#fb8684
}h1{color:#871604
}h2{color:#5c0904
}h3{color:#6c0b04
}

.MapSelection
{ height:auto;
 width:3000px;
}

.die20
{ height: 100px;
 width: 100px;
 object-fit: none;
 object-position: 98% 100%;
}

.die12
{ height: 100px;
 width: 100px;
 object-fit: none;
 object-position: 72% 100%;
}

.die10
{ height: 100px;
 width: 100px;
 object-fit: none;
 object-position: 98% 100%;
}
.die8
{ height: 100px;
 width: 100px;
 object-fit: none;
 object-position: 48% 100%;
}
.die6
{ height: 100px;
 width: 100px;
 object-fit: none;
 object-position: 25% 100%;
}
.die4
{ height: 100px;
 width: 100px;
 object-fit: none;
 object-position: 0% 100%;
}

mark
{background-color:#f8ecdd;
}

</style>

<body>

<table><tr><td>
<table><tr><td>
<input type='button' value='Roll all initiatives?' onClick='rollInitiatives()'>
</td></tr><tr><td>
<input type='button' value='Save all characters?' onClick='saveAll()'>
</td></tr><tr><td>
<input type='button' value='Target then Clone a character?' onClick='cloneIt(type)'>
</td></tr><tr><td>
<input type='button' value='Create a new character?' onClick='newCharacter(PC)'>
</td></tr><tr><td><a href='https://archive.org/details/tsr02100addplayershandbook/page/n36/mode/1up' target='_blank'>The AD&D 1st Edition Player's Handbook of Armor and Weapons</a>
</td></tr><tr><td>
<a href='https://archive.org/details/tsr02011advanceddungeonsdragonsadd1steddungeonmastersguide/page/n74/mode/1up' target='_blank'>Attack Matrixes</a> Note the attacker's class and level and the target's armor class. Go to the right table to find the minimum that must be rolled to hit.
</td></tr><tr><td>

<a href='https://archive.org/details/tsr09039a1slavepitsoftheundercity' target='_blank'>Dungeon Module A1</a> Slave Pits of the Undercity
</td></tr><tr><td>
Target then paste stats?
<textArea cols='30' rows='5' onChange='stats=this.value;setStats()'></textarea><b id='statsDisplay'></b>
</td></tr><tr><td>
To save your characters, play off-line. <a href="dnd.zip">dnd.zip</a>
</td></tr><tr><td>
Encounter Notes,XP totals(not saved after shift reload of webpage):
<textArea cols='30' rows='4'></textarea>
</td></tr><tr><td>
Condition Durations:
<input type='field' size='30'><br>10/<input id='1stDuration' type='field' size='2' value='10'>turns.
<script>
function reduceByOne(){document.getElementById('1stDuration').value=(document.getElementById('1stDuration').value-1)}
</script>
<input type='button' onclick='reduceByOne()' value='end turn?'>
</td></tr><tr><td>
Condition Durations:
<input type='field' size='30'><br>10/<input id='2ndDuration' type='field' size='2' value='10'>turns.
<script>
function reduceByOne2(){document.getElementById('2ndDuration').value=(document.getElementById('2ndDuration').value-1)}
</script>
<input type='button' onclick='reduceByOne2()' value='end turn?'>
</td></tr><tr><td>
Condition Durations:
<input type='field' size='30'><br>10/<input id='3rdDuration' type='field' size='2' value='10'>turns.
<script>
function reduceByOne3(){document.getElementById('3rdDuration').value=(document.getElementById('3rdDuration').value-1)}
</script>
<input type='button' onclick='reduceByOne3()' value='end turn?'>
</td></tr><tr><td>
Condition Durations:
<input type='field' size='30'><br>10/<input id='4thDuration' type='field' size='2' value='10'>turns.
<script>
function reduceByOne4(){document.getElementById('4thDuration').value=(document.getElementById('4thDuration').value-1)}
</script>
<input type='button' onclick='reduceByOne4()' value='end turn?'>
</td></tr><tr><td>
<input onMouseOut="rollOne=parseInt(rollDForm(this.value));document.getElementById('rollOneDisplay').innerHTML='('+naturalRoll+roll+')='+rollOne" maxLength='8' size='8' placeHolder='XdY+Z' type='text'><b id='rollOneDisplay'></b>
</td></tr><tr><td>
<input onMouseOut="rollTwo=parseInt(rollDForm(this.value));document.getElementById('rollTwoDisplay').innerHTML='('+naturalRoll+roll+')='+rollTwo" maxLength='8' size='8' placeHolder='XdY+Z' type='text'><b id='rollTwoDisplay'></b>
</td></tr><tr><td>
<input onMouseOut="rollThree=parseInt(rollDForm(this.value));document.getElementById('rollThreeDisplay').innerHTML='('+naturalRoll+roll+')='+rollThree" maxLength='8' size='8' placeHolder='XdY+Z' type='text'><b id='rollThreeDisplay'></b>
</td></tr><tr><td>
<input onMouseOut="rollFour=parseInt(rollDForm(this.value));document.getElementById('rollFourDisplay').innerHTML='('+naturalRoll+roll+')='+rollFour" maxLength='8' size='8' placeHolder='XdY+Z' type='text'><b id='rollFourDisplay'></b>
</td></tr><tr><td>
<input onMouseOut="rollFive=parseInt(rollDForm(this.value));document.getElementById('rollFiveDisplay').innerHTML='('+naturalRoll+roll+')='+rollFive" maxLength='8' size='8' placeHolder='XdY+Z' type='text'><b id='rollFiveDisplay'></b>
</td></tr><tr><td>
<input onMouseOut="rollSix=parseInt(rollDForm(this.value));document.getElementById('rollSixDisplay').innerHTML='('+naturalRoll+roll+')='+rollSix" maxLength='8' size='8' placeHolder='XdY+Z' type='text'><b id='rollSixDisplay'></b>
</td></tr><tr><td>
<img class='die20' src='Decorations/DiceSprite.jpeg'><br>
<input onClick="d20roll=d(20);document.getElementById('d20result').innerHTML=d20roll" type='button' value='Roll a 1d20?'><b id='d20result'></b>
</td></tr><tr><td>
<img class='die12' src='Decorations/DiceSprite.jpeg'><br>
<input onClick="d12roll=d(12);document.getElementById('d12result').innerHTML=d12roll" type='button' value='Roll a 1d12?'><b id='d12result'></b>
</td></tr><tr><td>
<img class='die10' src='Decorations/DiceSprite.jpeg'><br>
<input onClick="d10roll=d(10);document.getElementById('d10result').innerHTML=d10roll" type='button' value='Roll a 1d10?'><b id='d10result'></b>
</td></tr><tr><td>
<img class='die8' src='Decorations/DiceSprite.jpeg'><br>
<input onClick="d8roll=d(8);document.getElementById('d8result').innerHTML=d8roll" type='button' value='Roll a 1d8?'><b id='d8result'></b>
</td></tr><tr><td>
<img class='die6' src='Decorations/DiceSprite.jpeg'><br>
<input onClick="d6roll=d(6);document.getElementById('d6result').innerHTML=d6roll" type='button' value='Roll a 1d6?'><b id='d6result'></b>
</td></tr><tr><td>
<img class='die4' src='Decorations/DiceSprite.jpeg'><br>
<input onClick="d4roll=d(4);document.getElementById('d4result').innerHTML=d4roll" type='button' value='Roll a 1d4?'><b id='d4result'></b>
</td></tr><tr><td>
Random Skills:<br><span id='displayRandomSkills'></span>
</td></tr>
<tr><td>
<h3>Encounter Description</h3>
EGG CHAMBER:
The passageway rises quickly above the level of the
sewage and the chamber floor seems dry. The
space is large and the dirt ceiling is supported by
many beams. Ten feet away, spaced in a ring
around the only entrance to the chamber, are 3
large insect creatures. Each carries 2 battle axes,
one in each upper forelimb. Beyond them near the
far wall are many glistening white ovoids, about 6”
to I’ in length.
</td></tr></table>
</td><td>
<table width='500px'><tr><td rowSpan='30'><img class='MapSelection' src='Maps/Map.png'>
</td></tr></table>

<script>

const shuffleSkillsArray = (array) => { for (let i = array.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1));
 [array[i], array[j]] = [array[j], array[i]];
 }
}
skillsArray=["Acrobatics(Dex)","AnimalHandling(Wis)","Arcana(Int)","Athletics(Str)","Deception(Cha)","History(Int)","Insight(Wis)","Intimidation(Cha)","Investigation(Int)","Medicine(Wis)","Nature(Int)","Perception(Wis)","Performance(Cha)","Persuasion(Cha)","Religion(Int)","SleightOfHand(Dex)","Stealth(Dex)","Survival(Wis)"];
shuffleSkillsArray(skillsArray);
document.getElementById("displayRandomSkills").innerHTML=(skillsArray);

function AGEBox(color, code, textColorCode)
{this.borderX=10;
this.borderY=10;
this.code=code;
this.textColorCode=textColorCode;
}
function AGEElement(){this.elementId="AGE"+currentElementId;
currentElementId++;
this.x=0;
this.y=0;
this.contents="";
this.hide=_hide;
this.putAt=_putAt;
this.refresh=_refresh;
this.setContents=_setContents;
this.setStyle=_setStyle;
this.setX=_setX;
this.setY=_setY;
this.show=_show;
var newDiv=document.createElement('div');
newDiv.setAttribute('id', this.elementId);
//newDiv.className="ui-widget-content";
newDiv.className="DraggableDiv";
newDiv.style.position="absolute";
newDiv.style.top=this.y;
newDiv.style.left=this.x;
document.body.appendChild(newDiv);
newDiv.innerHTML="<div>";
this.hide();
$('.DraggableDiv').draggableTouch()}
function rollDForm(dForm){dForm=dForm.toLowerCase();
dIndex=dForm.indexOf("d");
signIndex=dForm.indexOf("+");
sign=true;
positive=true;
if(signIndex===-1){positive=false;
signIndex=dForm.indexOf("-")}
if(signIndex===-1){signIndex=dForm.length;
sign=false
}dice=0;
sides=0;
addOn=0;
if(dIndex===0){dice=1
}
else
{dice=dForm.substring(0, dIndex)}sides=dForm.substring(dIndex+1, signIndex);
if(sign){addOn=dForm.substring(signIndex+1);
if(!positive){addOn*=-1
}
}naturalRoll=XdY(dice, sides);
roll=(addOn / 1);
result=naturalRoll+roll;
if(roll> -1){roll="+"+roll
}return naturalRoll, roll, result
}
function d(sides){return Math.ceil(Math.random()*sides)}
function deleteRollPrompt(x, i){characters[x].deleteRoll(i)}
function dFormParse(toCheck){match=toCheck.match(diceRegex);
if(match !=null){return match[0]
}
else
{return null
}
}

function listStats(Name, Class)
{return Name, Class}

function cloneIt(PC)
{x=characters.length;
newChar=new Character();
newChar.setIndex(x);
newChar.refresh();
newChar.show();
characters[x]=newChar;
ADD_DHTML(newChar.box.elementId);
characters[x].setAC(characters[targeted].ac);
characters[x].setFortitude(characters[targeted].fortitude);
characters[x].setReflex(characters[targeted].reflex);
characters[x].setWill(characters[targeted].will);
characters[x].setAbility(characters[targeted].ability);
characters[x].setPetrify(characters[targeted].petrify);
characters[x].setActionNotes(characters[targeted].actionNotes);
characters[x].setAlignment(characters[targeted].alignment);
characters[x].setAnimal(characters[targeted].animal);
characters[x].setArcana(characters[targeted].arcana);
characters[x].setArmor(characters[targeted].armor);
characters[x].setParalysis(characters[targeted].paralysis);
characters[x].setBackF(characters[targeted].backF);
characters[x].setBackL(characters[targeted].backL);
characters[x].setBackS(characters[targeted].backS);
characters[x].setBackT(characters[targeted].backT);
characters[x].setBackground(characters[targeted].background);
characters[x].setBonds(characters[targeted].bonds);
characters[x].setCha(characters[targeted].cha);
characters[x].setChaPro(characters[targeted].chaPro);
characters[x].setClass(characters[targeted].class);
characters[x].setCon(characters[targeted].con);
characters[x].setConPro(characters[targeted].conPro);
characters[x].setCurHp(characters[targeted].curHP);
characters[x].setCurHp(characters[targeted].curHp);
characters[x].setDamageConditions(characters[targeted]. dmgConditions);
characters[x].setOpenDoors(characters[targeted].openDoors);
characters[x].setDex(characters[targeted].dex);
characters[x].setDexPro(characters[targeted].dexPro);
characters[x].setEquipment(characters[targeted].equipment);
characters[x].setExperience(characters[targeted].experience);
characters[x].setFeats(characters[targeted].feats);
characters[x].setFeatureNotes(characters[targeted].featureNotes);
characters[x].setFeatures(characters[targeted].features);
characters[x].setFigure(characters[targeted].figure);
characters[x].setFlaws(characters[targeted].flaws);
characters[x].setRods(characters[targeted].rods);
characters[x].setHitDice(characters[targeted].hitDice);
characters[x].setIdeals(characters[targeted].ideals);
characters[x].setImmunity(characters[targeted].immunity);
characters[x].setInit(characters[targeted].init);
characters[x].setInitBonus(characters[targeted].initBonus);
characters[x].setInsight(characters[targeted].insight);
characters[x].setInt(characters[targeted].inte);
characters[x].setIntPro(characters[targeted].intPro);
characters[x].setIntimidation(characters[targeted].intimidation);
characters[x].setInvestigation(characters[targeted].investigation);
characters[x].setLanguages(characters[targeted].language);
characters[x].setLvl(characters[targeted].lvl);
characters[x].setMaxHp(characters[targeted].maxHp);
characters[x].setBendBars(characters[targeted].bendBars);
characters[x].setName(characters[targeted].name+" "+[x]);
characters[x].setNature(characters[targeted].nature);
characters[x].setPerception(characters[targeted].perception);
characters[x].setBreath(characters[targeted].breath);
characters[x].setAttackAdjustment(characters[targeted].attackAdjustment);
characters[x].setPro(characters[targeted].pro);
characters[x].setProficiencies(characters[targeted].proficiencies);
characters[x].setProficienciesRace(characters[targeted].proficienciesRace);
characters[x].setRace(characters[targeted].race);
characters[x].setSpells(characters[targeted].spells);
characters[x].setResistance(characters[targeted].resistance);
characters[x].setSaving(characters[targeted].saving);
characters[x].setSenses(characters[targeted].senses);
characters[x].setShield(characters[targeted].shield);
characters[x].setSize(characters[targeted].size);
characters[x].setSkills(characters[targeted].skills);
characters[x].setDamageAdjustment(characters[targeted].damageAdjustment);
characters[x].setSpeed(characters[targeted].speed);
characters[x].setSpellAbility(characters[targeted].spellAbility);
characters[x].setSpellAbilityNumber(characters[targeted].spellAbilityNumber);
characters[x].setStealth(characters[targeted].stealth);
characters[x].setStr(characters[targeted].str);
characters[x].setStrPro(characters[targeted].strPro);
characters[x].setMissileAdjustment(characters[targeted].missileAdjustment);
characters[x].setTrait(characters[targeted].trait);
characters[x].setVulnerability(characters[targeted].vulnerability);
characters[x].setWis(characters[targeted].wis);
characters[x].setWisPro(characters[targeted].wisPro);
for(var i=x; i< characters.length; i++){for(var j=0; j< characters[targeted].rolls.length; j++){characters[i].addRoll(characters[targeted].rollNames[j], characters[targeted].rolls[j], characters[targeted].rollNames2[j], characters[targeted].rolls2[j])}
}
}

t1="a, b, c, dmgDice"

function AbiDalzimsHorridWilting(){a="Abi-Dalzim s Horrid Wilting,lvl8,1act,instant,150ft cube 30ftDC8+"+characters[targeted].spellAbility+"+pro vsCon You draw the moisture from every creature in a 30ft-cube centered on a point you choose within range. Each creature in that area vsCon . Constructs and undead aren t affected, and plants and water elementals make this saving throw with @disadv.,1tgt takes 12d8 necrotic dmg if fail, or half as much dmg on a successful one. Nonmagical plants in the area that aren t creatures, such as trees and shrubs, wither and die instantly.",b="1d20+0",c="Necrotic",dmgDice="12d8+0",getAction(t1)}

function Club(){a="Club 1 sp 2 lb. Light",b="1d20+0",dmgDice="1d4+0",c="bludg ",getAction(t1)};

function getAction(){characters[targeted].setRollName1(a),characters[targeted].setRoll1(b),characters[targeted].setRollName2(c),characters[targeted].setRoll2(dmgDice),addRollPrompt(targeted)}

s1="<input onClick=",s2="() type=button value='",s3="'></td></tr><tr><td>"
s4=document.write.bind(document)

s4("<table><tr><td>Target the piece first to receive these wpns.</td></tr><tr><td>")
s4(s1+'Club'+s2+'Club'+s3)
s4('</td></tr></table>')

function toggleTab1(x){if(characters[x].toggled1.match(/none/)){characters[x].setToggled1("block");
document.getElementById('toggled1'+x).style.display=characters[x].toggled1
}
else
{characters[x].setToggled1("none");
document.getElementById('toggled1'+x).style.display=characters[x].toggled1
}
}
function toggleTab2(x){if(characters[x].toggled2.match(/none/)){characters[x].setToggled2("block");
document.getElementById('toggled2'+x).style.display=characters[x].toggled2
}
else
{characters[x].setToggled2("none");
document.getElementById('toggled2'+x).style.display=characters[x].toggled2
}
}
function toggleTab3(x){if(characters[x].toggled3.match(/none/)){characters[x].setToggled3("block");
document.getElementById('toggled3'+x).style.display=characters[x].toggled3
}
else
{characters[x].setToggled3("none");
document.getElementById('toggled3'+x).style.display=characters[x].toggled3
}
}
function toggleTab4(x){if(characters[x].toggled4.match(/none/)){characters[x].setToggled4("block");
document.getElementById('toggled4'+x).style.display=characters[x].toggled4
}
else
{characters[x].setToggled4("none");
document.getElementById('toggled4'+x).style.display=characters[x].toggled4
}
}
function toggleTab5(x){if(characters[x].toggled5.match(/none/)){characters[x].setToggled5("block");
document.getElementById('toggled5'+x).style.display=characters[x].toggled5
}
else
{characters[x].setToggled5("none");
document.getElementById('toggled5'+x).style.display=characters[x].toggled5
}
}
function toggleTab6(x){if(characters[x].toggled6.match(/none/)){characters[x].setToggled6("block");
document.getElementById('toggled6'+x).style.display=characters[x].toggled6
}
else
{characters[x].setToggled6("none");
document.getElementById('toggled6'+x).style.display=characters[x].toggled6
}
}
characterBoxWidth=500;
characterBoxHeight="*";
characters=new Array();
currentElementId=0;
PC="PC";
menuWidth=500;
pcBox=new AGEBox();
pcMenu=new AGEBox();
savePaneBox=new AGEBox();
savePane=new AGEElement();
savePane.setStyle("zIndex", "200");
savePane.putAt(100, 100);
function setStats(){

if(rip=stats.match(/(Multiattack\.[\s\S]+?)Melee|rngd/)){characters[targeted].setActionNotes(rip[1])}

characters[targeted].setStrPro('');
if(str=stats.match(/Strength\sSaves\s\*/)){characters[targeted].setStrPro("pro")}
if(str=stats.match(/Strength\sSaves\s\*\*/)){characters[targeted].setStrPro('exp')}

characters[targeted].setDexPro('');
if(str=stats.match(/Dexterity\sSaves\s\*/)){characters[targeted].setDexPro("pro")}
if(str=stats.match(/Dexterity\sSaves\s\*\*/)){characters[targeted].setDexPro('exp')}
characters[targeted].setConPro('');
if(str=stats.match(/Constitution\sSaves\s\*/)){characters[targeted].setConPro("pro")}
if(str=stats.match(/Constituion\sSaves\s\*\*/)){characters[targeted].setConPro('exp')}
characters[targeted].setIntPro('');
if(str=stats.match(/Intelligence\sSaves\s\*/)){characters[targeted].setIntPro("pro")}
if(str=stats.match(/Intelligence\sSaves\s\*\*/)){characters[targeted].setIntPro('exp')}
characters[targeted].setWisPro('');
if(str=stats.match(/Wisdom\sSaves\s\*/)){characters[targeted].setWisPro("pro")}
if(str=stats.match(/Wisdom\sSaves\s\*\*/)){characters[targeted].setWisPro('exp')}
characters[targeted].setChaPro('');
if(str=stats.match(/Charisma\sSaves\s\*/)){characters[targeted].setChaPro("pro")}
if(str=stats.match(/Charisma\sSaves\s\*\*/)){characters[targeted].setChaPro('exp')}

characters[targeted].setPetrify('');
if(str=stats.match(/Acrobatics\s\(Dex\)\s\*/)){characters[targeted].setPetrify("pro")}
if(str=stats.match(/Acrobatics\s\(Dex\)\s\*\*/)){characters[targeted].setPetrify('exp')}

characters[targeted].setAnimal('');
if(str=stats.match(/Animal\sHandling\s\(Wis\)\s\*/)){characters[targeted].setAnimal("pro")}
if(str=stats.match(/Animal\sHandling\s\(Wis\)\s\*\*/)){characters[targeted].setAnimal('exp')}
characters[targeted].setArcana('');
if(str=stats.match(/Arcana\s\(Int\)\s\*/)){characters[targeted].setArcana("pro")}
if(str=stats.match(/Arcana\s\(Int\)\s\*\*/)){characters[targeted].setArcana('exp')}
characters[targeted].setParalysis('');
if(str=stats.match(/Athletics\s\(Str\)\s\*/)){characters[targeted].setParalysis("pro")}
if(str=stats.match(/Athletics\s\(Str\)\s\*\*/)){characters[targeted].setParalysis('exp')}
characters[targeted].setOpenDoors('');
if(str=stats.match(/Deception\s\(Cha\)\s\*/)){characters[targeted].setOpenDoors("pro")}
if(str=stats.match(/Deception\s\(Str\)\s\*\*/)){characters[targeted].setOpenDoors('exp')}
characters[targeted].setRods('');
if(str=stats.match(/History\s\(Int\)\s\*/)){characters[targeted].setRods("pro")}
if(str=stats.match(/History\s\(Int\)\s\*\*/)){characters[targeted].setRods('exp')}
characters[targeted].setInsight('');
if(str=stats.match(/Insight\s\(Wis\)\s\*/)){characters[targeted].setInsight("pro")}
if(str=stats.match(/Insight\s\(Wis\)\s\*\*/)){characters[targeted].setInsight('exp')}
characters[targeted].setIntimidation('');
if(str=stats.match(/Intimidation\s\(Cha\)\s\*/)){characters[targeted].setIntimidation("pro")}
if(str=stats.match(/Intimidation\s\(Cha\)\s\*\*/)){characters[targeted].setIntimidation('exp')}
characters[targeted].setInvestigation('');
if(str=stats.match(/Investigation\s\(Int\)\s\*/)){characters[targeted].setInvestigation("pro")}
if(str=stats.match(/Investigation\s\(Int\)\s\*\*/)){characters[targeted].setInvestigation('exp')}
characters[targeted].setBendBars('');
if(str=stats.match(/Medicine\s\(Wis\)\s\*/)){characters[targeted].setBendBars("pro")}
if(str=stats.match(/Medicine\s\(Wis\)\s\*\*/)){characters[targeted].setBendBars('exp')}
characters[targeted].setNature('');
if(str=stats.match(/Nature\s\(Int\)\s\*/)){characters[targeted].setNature("pro")}
if(str=stats.match(/Nature\s\(Int\)\s\*\*/)){characters[targeted].setNature('exp')}
characters[targeted].setPerception('');
if(str=stats.match(/Perception\s\(Wis\)\s\*/)){characters[targeted].setPerception("pro")}
if(str=stats.match(/Perception\s\(Wis\)\s\*\*/)){characters[targeted].setPerception('exp')}
characters[targeted].setBreath('');
if(str=stats.match(/Performance\s\(Cha\)\s\*/)){characters[targeted].setBreath("pro")}
if(str=stats.match(/Performance\s\(Cha\)\s\*\*/)){characters[targeted].setBreath('exp')}
characters[targeted].setAttackAdjustment('');
if(str=stats.match(/Persuasion\s\(Cha\)\s\*/)){characters[targeted].setAttackAdjustment("pro")}
if(str=stats.match(/Persuasion\s\(Cha\)\s\*\*/)){characters[targeted].setAttackAdjustment('exp')}
characters[targeted].setSpells('');
if(str=stats.match(/Religion\s\(Int\)\s\*/)){characters[targeted].setSpells("pro")}
if(str=stats.match(/Religion\s\(Int\)\s\*\*/)){characters[targeted].setSpells('exp')}
characters[targeted].setDamageAdjustment('');
if(str=stats.match(/Sleight\sof\sHand\s\(Dex\)\s\*/)){characters[targeted].setDamageAdjustment("pro")}
if(str=stats.match(/Slight\sof\sHand\s\(Dex\)\s\*\*/)){characters[targeted].setDamageAdjustment('exp')}
characters[targeted].setStealth('');
if(str=stats.match(/Stealth\s\(Dex\)\s\*/)){characters[targeted].setStealth("pro")}
if(str=stats.match(/Stealth\s\(Dex\)\s\*\*/)){characters[targeted].setStealth('exp')}
characters[targeted].setMissileAdjustment('');
if(str=stats.match(/Survival\s\(Wis\)\s\*/)){characters[targeted].setMissileAdjustment("pro")}
if(str=stats.match(/Survival\s\(Wis\)\s\*\*/)){characters[targeted].setMissileAdjustment('exp')}

stats=stats.replace(/\s\+\s/g,'+')

if(rip=stats.match(/(.+?Melee[\s\S]+?.)(\+\d{1,2})([\s\S]+?)\(([\s\S]+?)\)([\s\S]+?\.)/))
{
characters[targeted].setRollName1(rip[1]+rip[3]);
characters[targeted].setRoll1('1d20'+rip[2]);
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4]);
addRollPrompt(targeted);
}

if(rip=stats.match(/.+?Melee[\s\S]+?(.+?Melee[\s\S]+?.)(\+\d{1,2})([\s\S]+?)\(([\s\S]+?)\)([\s\S]+?\.)/))
{
characters[targeted].setRollName1(rip[1]+rip[3]);
characters[targeted].setRoll1('1d20'+rip[2]);
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4]);
addRollPrompt(targeted);
}

if(rip=stats.match(/.+?Melee[\s\S]+?.+?Melee[\s\S]+?(.+?Melee[\s\S]+?.)(\+\d{1,2})([\s\S]+?)\(([\s\S]+?)\)([\s\S]+?\.)/))
{
characters[targeted].setRollName1(rip[1]+rip[3]);
characters[targeted].setRoll1('1d20'+rip[2]);
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4]);
addRollPrompt(targeted);
}

if(rip=stats.match(/(.+?rngd[\s\S]+?.)(\+\d{1,2})([\s\S]+?)\(([\s\S]+?)\)([\s\S]+?\.)/))
{
characters[targeted].setRollName1(rip[1]+rip[3]);
characters[targeted].setRoll1('1d20'+rip[2]);
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4]);
addRollPrompt(targeted);
}

if(rip=stats.match(/(DC[\s\S]+?)(Strength|Dexterity|Constitution|Wisdom)([\s\S]+)/))
{
characters[targeted].setRollName1(rip[1]+' vs'+rip[2]);
characters[targeted].setRoll1('0d0+0');
characters[targeted].setRollName2(rip[3]);
characters[targeted].setRoll2('0d0+0');
addRollPrompt(targeted);
}

if(rip=stats.match(/DC[\s\S]+(DC[\s\S]+?)(Strength|Dexterity|Constitution|Wisdom)(\ssaving\sthrow[\s\S]+)\(([\s\S]+)\)([\s\S]+\.)/))
{
characters[targeted].setRollName1(rip[1]+' vs'+rip[2]+rip[3]);
characters[targeted].setRoll1('0d0+0');
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4]);
addRollPrompt(targeted);
}

if(rip=stats.match(/DC[\s\S]+DC[\s\S]+(DC[\s\S]+?)(Strength|Dexterity|Constitution|Wisdom)(\ssaving\sthrow[\s\S]+)\(([\s\S]+)\)([\s\S]+\.)/))
{
characters[targeted].setRollName1(rip[1]+' vs'+rip[2]+rip[3]);
characters[targeted].setRoll1('0d0+0');
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4]);
addRollPrompt(targeted);
}

if(rip=stats.match(/^([\s\S]*?)CLASS[\s\S]*?LEVEL([\s\S]*?)(\d{1,2})\s([\s\S]*?)EXPERIENCE\sPOINTS([\s\S]*?)PLAYER NAME[\s\S]*?HERITAGE([\s\S]*?)BACKGROUND([\s\S]*?)CAMPAIGN[\s\S]*?STR[\s\S]*?\d{1}\s(\d{1,2})\sDEX[\s\S]*?\d{1}\s(\d{1,2})\sCON[\s\S]*?\d{1}\s(\d{1,2})\sINT[\s\S]*?\d{1}\s(\d{1,2})\sWIS[\s\S]*?\d{1}\s(\d{1,2})\sCHA[\s\S]*?\d{1}\s(\d{1,2})/)){characters[targeted].setLvl(rip[3]);
characters[targeted].setClass(rip[2]+""+rip[4]);
characters[targeted].setExperience(rip[5]);
characters[targeted].setRace(rip[6]);
characters[targeted].setBackground(rip[7]);
characters[targeted].setStr(rip[8]);
characters[targeted].setDex(rip[9]);
characters[targeted].setCon(rip[10]);
characters[targeted].setInt(rip[11]);
characters[targeted].setWis(rip[12]);
characters[targeted].setCha(rip[13])}
if(rip=stats.match(/Saving\sThrows:\s([\s\S]*?)Skills:\s([\s\S]*?)Languages:\s([\s\S]*?)ARMOR\sCLASS\s\(AC\)([\s\S]*?)Armor\sWorn([\s\S]*?)INITIATIVE[\s\S]*?SPEED([\s\S]*?)HIT POINTS([\s\S]*?)HIT\sDICE([\s\S]*?)DEATH\sSAVES/)){characters[targeted].setSaving(rip[1]);
characters[targeted].setSkills(rip[2]);
characters[targeted].setLanguages(rip[3]);
characters[targeted].setAC(rip[4]);
characters[targeted].setArmor(rip[5]);
characters[targeted].setSpeed(rip[6]);
characters[targeted].setMaxHp(rip[7]);
characters[targeted].setCurHp(rip[7]);
characters[targeted].setHitDice(rip[8])}
if(rip=stats.match(/^(.*)$/m)){characters[targeted].setName(rip[1])}
if(size=stats.match(/(Tiny|Small|Medium|Large|Huge|Gargantuan)/i)){characters[targeted].setSize(size[1])}
if(race=stats.match(/(aberration|beast|construct|dragon|elemental|fey|fiend|giant|humanoid|monstrosity|plant|undead|human)/i)){characters[targeted].setRace(race[1])}
if(alignment=stats.match(/(neutral)/)){characters[targeted].setAlignment(alignment[1])}
if(alignment=stats.match(/(lawful good|lawful neutral|lawful evil|chaotic good|chaotic neutral|chaotic evil|neutral evil|unaligned)/i)){characters[targeted].setAlignment(alignment[1])}
if(ac=stats.match(/Armor\sClass\s(\d{1,2})([\s\S]*?)(Hit Points )/)){characters[targeted].setAC(ac[1])}
if(armortype=stats.match(/mage\sarmor/)){characters[targeted].setArmor('Mage Armor AC13+dex')};
if(armortype=stats.match(/natural armor/)){characters[targeted].setArmor('Natural Armor')};
if(armortype=stats.match(/leather/)){characters[targeted].setArmor('Leather AC11+dex')};
if(armortype=stats.match(/padded/)){characters[targeted].setArmor('Padded AC11+dex Stealth @DisAdv')};
if(armortype=stats.match(/studded/)){characters[targeted].setArmor('Studded AC12+dex')};
if(armortype=stats.match(/hide/)){characters[targeted].setArmor('Hide AC12+dex max 2')};
if(armortype=stats.match(/chain\sshirt/)){characters[targeted].setArmor('Chain Shirt AC13+dex max 2')};
if(armortype=stats.match(/scale/)){characters[targeted].setArmor('Scale AC14+dex max 2 Stealth @DisAdv')};
if(armortype=stats.match(/breastplate/)){characters[targeted].setArmor('Breastplate AC14+dex max 2')};
if(armortype=stats.match(/plate/)){characters[targeted].setArmor('Plate AC18 Stealth @DisAdv str15')};
if(armortype=stats.match(/half\splate/)){characters[targeted].setArmor('Half Plate AC15+dex max 2 Stealth @DisAdv')};
if(armortype=stats.match(/ring\smail/)){characters[targeted].setArmor('Ring AC14 Stealth @DisAdv')};
if(armortype=stats.match(/chain\smail/)){characters[targeted].setArmor('Chain Mail AC16 Stealth @DisAdv')};
if(armortype=stats.match(/splint/)){characters[targeted].setArmor('Splint AC17 Stealth @DisAdv')};
if(armortype=stats.match(/Unarmored\sDefense/)){characters[targeted].setArmor('Unarmored Defense AC10+dex+wis')};
if(shieldtype=stats.match(/Armor\sClass[\s\S]*shield[\s\S]*STR/i)){characters[targeted].setShield('Shield AC+2')}
else
{characters[targeted].setShield('No Shield AC+0')}
if(rip=stats.match(/Hit Points (\d{1,3})\s\(([\s\S].+)\)/i))
{characters[targeted].setMaxHp(rip[1]);
characters[targeted].setHitDice(rip[2].replace(/\s/,''));
};
if(rip=stats.match(/Speed\s([\s\S]*?)STR/)){characters[targeted].setSpeed(rip[1])}
if(str=stats.match(/(\d{1,2})\s\(\+|(\d{1,2})\s\(\-|(\d{1,2})\s\(\–/g)){characters[targeted].setStr(parseInt(str[0]));
characters[targeted].setDex(parseInt(str[1]));
characters[targeted].setCon(parseInt(str[2]));
characters[targeted].setInt(parseInt(str[3]));
characters[targeted].setWis(parseInt(str[4]));
characters[targeted].setCha(parseInt(str[5]))}
if(resist=stats.match(/(Resistances|Resistance)([\s\S]*?)(Senses|Condition\s|Damage\sImmunities|Damage\sVulnerabilities)/)){characters[targeted].setResistance(resist[2])}
else
{characters[targeted].setResistance('')}
characters[targeted].setImmunity('');
if(immune=stats.match(/(Damage\sImmunities)([\s\S]*?)(Damage\sResistance|Damage\sCondition|Condition\sImmuniti|Senses)/)){characters[targeted].setImmunity(immune[2])}
else
{characters[targeted].setImmunity('')}
if( dmgimmune=stats.match(/Condition\sImmunities\s([\s\S]*?)Senses/)){characters[targeted].setDamageConditions('immune to '+dmgimmune[1])}
else
{characters[targeted].setDamageConditions('')}
if(vulnerable=stats.match(/Vulnerabilities\s([\s\S]*?)(?:Senses|Condition\s|Damage\s)/)){characters[targeted].setVulnerability(vulnerable[1])}
else
{characters[targeted].setVulnerability('')}
if(saves=stats.match(/(Throws )([\s\S]*?)(Skills)/)){characters[targeted].setSaving(saves[2])}
if(senses=stats.match(/Senses\s([\s\S]*?Perception\s\d{1,2})/)){characters[targeted].setSenses(senses[1])}
if(languages=stats.match(/(Languages )([\s\S]*?)(Challenge )/)){characters[targeted].setLanguages(languages[2])}
if(rip=stats.match(/Challenge\s(\d\/\d)/)){characters[targeted].setLvl(rip[1])}
if(lvl=stats.match(/Challenge\s(\d{1,2})(?!\/)/)){characters[targeted].setLvl(lvl[1])}
if(xp=stats.match(/Challenge[\s\S]*\(([\s\S]*)\sXP/)){characters[targeted].setExperience(xp[1])}
if(casting=stats.match(/spellcasting[\s\S]*?(cha|int|wis)/i)){characters[targeted].setSpellAbility(casting[1].toLowerCase())}
if(actnotes=stats.match(/XP\)([\s\S].*)ACTIONS/i)){characters[targeted].setActionNotes(actnotes[1])}
if(savingThrows=stats.match(/Str\s\+(\d{1,2})/)){if(parseInt(savingThrows[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].strMod))){characters[targeted].setStrPro('exp')}
else
{characters[targeted].setStrPro("pro")}};
if(savingThrows=stats.match(/Dex\s\+(\d{1,2})/)){if(parseInt(savingThrows[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].dexMod))){characters[targeted].setDexPro('exp')}
else
{characters[targeted].setDexPro("pro")}};
if(savingThrows=stats.match(/Con\s\+(\d{1,2})/)){if(parseInt(savingThrows[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].conMod))){characters[targeted].setConPro('exp')}
else
{characters[targeted].setConPro("pro")}};
if(savingThrows=stats.match(/Int\s\+(\d{1,2})/)){if(parseInt(savingThrows[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].intMod))){characters[targeted].setIntPro('exp')}
else
{characters[targeted].setIntPro("pro")}};
if(savingThrows=stats.match(/Wis\s\+(\d{1,2})/)){if(parseInt(savingThrows[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].wisMod))){characters[targeted].setWisPro('exp')}
else
{characters[targeted].setWisPro("pro")}};
if(savingThrows=stats.match(/Cha\s\+(\d{1,2})/)){if(parseInt(savingThrows[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].chaMod))){characters[targeted].setChaPro('exp')}
else
{characters[targeted].setChaPro("pro")}};
if(nameit=stats.match(/^Skills\s([\s\S]*?)\n/)){characters[targeted].setName(nameit[1])}
if(skills=stats.match(/Skills\s([\s\S]*?)(Senses|Condition\sI|Damage\sI|Damage\sR|Damage\sV)/)){characters[targeted].setBackS(skills[1])};
if(skills=stats.match(/Athletics\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].dexMod))){characters[targeted].setParalysis('exp')}
else
{characters[targeted].setParalysis("pro")}};
if(skills=stats.match(/Acrobatics\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].dexMod))){characters[targeted].setPetrify('exp')}
else
{characters[targeted].setPetrify("pro")}};
if(skills=stats.match(/Sleight\sof\sHand\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].dexMod))){characters[targeted].setDamageAdjustment('exp')}
else
{characters[targeted].setDamageAdjustment("pro")}};
if(skills=stats.match(/Stealth\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].dexMod))){characters[targeted].setStealth('exp')}
else
{characters[targeted].setStealth("pro")}};
if(skills=stats.match(/Arcana\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].intMod))){characters[targeted].setArcana('exp')}
else
{characters[targeted].setArcana("pro")}};
if(skills=stats.match(/History\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].intMod))){characters[targeted].setRods('exp')}
else
{characters[targeted].setRods("pro")}};
if(skills=stats.match(/Investigation\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].intMod))){characters[targeted].setInvestigation('exp')}
else
{characters[targeted].setInvestigation("pro")}};
if(skills=stats.match(/Nature\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].intMod))){characters[targeted].setNature('exp')}
else
{characters[targeted].setNature("pro")}};
if(skills=stats.match(/Religion\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].intMod))){characters[targeted].setSpells('exp')}
else
{characters[targeted].setSpells("pro")}};
if(skills=stats.match(/Animal\sHandling\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].wisMod))){characters[targeted].setAnimal('exp')}
else
{characters[targeted].setAnimal("pro")}};
if(skills=stats.match(/Insight\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].wisMod))){characters[targeted].setInsight('exp')}
else
{characters[targeted].setInsight("pro")}};
if(skills=stats.match(/Medicine\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].wisMod))){characters[targeted].setBendBars('exp')}
else
{characters[targeted].setBendBars("pro")}};
if(skills=stats.match(/Perception\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].wisMod))){characters[targeted].setPerception('exp')}
else
{characters[targeted].setPerception("pro")}};
if(skills=stats.match(/Survival\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].wisMod))){characters[targeted].setMissileAdjustment('exp')}
else
{characters[targeted].setMissileAdjustment("pro")}};
if(skills=stats.match(/Deception\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].chaMod))){characters[targeted].setOpenDoors('exp')}
else
{characters[targeted].setOpenDoors("pro")}};
if(skills=stats.match(/Intimidation\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].chaMod))){characters[targeted].setIntimidation('exp')}
else
{characters[targeted].setIntimidation("pro")}};
if(skills=stats.match(/Performance\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].chaMod))){characters[targeted].setBreath('exp')}
else
{characters[targeted].setBreath("pro")}};
if(skills=stats.match(/Persuasion\s\+(\d{1,2})/)){if(parseInt(skills[1])>(parseInt(characters[targeted].pro)+parseInt(characters[targeted].chaMod))){characters[targeted].setAttackAdjustment('exp')}
else
{characters[targeted].setAttackAdjustment("pro")}
}
//Bard Class Features
if(rip=stats.match(/song\sof\srest/i)){this.SongOfRest()}
if(rip=stats.match(/taunt/i)){this.Taunt()}
//Monk Class Features
if(wpn=stats.match(/deflect\smissile/i)){this.DeflectMissile()}
if(wpn=stats.match(/unarmed\sstrike/i)){this.UnarmedStrike();
this.Disarmed();
this.KnockedProne();
this.Stunned()}

if(rip=stats.match(/Cantrips/i)){
if(rip=stats.match(/Acid\sSplash/i)){this.AcidSplash()};
if(rip=stats.match(/Blade\sWard/i)){this.BladeWard()};
if(rip=stats.match(/Booming\sBlade/i)){this.BoomingBlade()};
if(rip=stats.match(/Chill\sTouch/i)){this.ChillTouch()};
if(rip=stats.match(/Control\sFlames/i)){this.ControlFlames()};
if(rip=stats.match(/Create\sBonfire/i)){this.CreateBonfire()};
if(rip=stats.match(/Dancing\sLights/i)){this.DancingLights()};
if(rip=stats.match(/Druidcraft/i)){this.Druidcraft()};
if(rip=stats.match(/Eldritch\sBlast/i)){this.EldritchBlast()};
if(rip=stats.match(/Fire\sBolt/i)){this.FireBolt()};
if(rip=stats.match(/Friends/i)){this.Friends()};
if(rip=stats.match(/Frostbite/i)){this.Frostbite()};
if(rip=stats.match(/GreenFlame\sBlade/i)){this.GreenFlameBlade()};
if(rip=stats.match(/Guidance/i)){this.Guidance()};
if(rip=stats.match(/Gust\s/i)){this.Gust()};
if(rip=stats.match(/Infestation/i)){this.Infestation()};
if(rip=stats.match(/Light/i)){this.Light()};
if(rip=stats.match(/Lightning\sLure/i)){this.LightningLure()};
if(rip=stats.match(/Mage\sHand/i)){this.MageHand()};
if(rip=stats.match(/Magic\sStone/i)){this.MagicStone()};
if(rip=stats.match(/Mending/i)){this.Mending()};
if(rip=stats.match(/Message/i)){this.Message()};
if(rip=stats.match(/Minor\sIllusion/i)){this.MinorIllusion()};
if(rip=stats.match(/Mold\sEarth/i)){this.MoldEarth()};
if(rip=stats.match(/Poison\sSpray/i)){this.PoisonSpray()};
if(rip=stats.match(/Prestidigitation/i)){this.Prestidigitation()};
if(rip=stats.match(/Primal\sSavagery/i)){this.PrimalSavagery()};
if(rip=stats.match(/Produce\sFlame/i)){this.ProduceFlame()};
if(rip=stats.match(/Ray\sOf\sFrost/i)){this.RayOfFrost()};
if(rip=stats.match(/Resistance/i)){this.Resistance()};
if(rip=stats.match(/Sacred\sFlame/i)){this.SacredFlame()};
if(rip=stats.match(/Shape\sWater/i)){this.ShapeWater()};
if(rip=stats.match(/Shillelagh/i)){this.Shillelagh()};
if(rip=stats.match(/Shocking\sGrasp/i)){this.ShockingGrasp()};
if(rip=stats.match(/Spare\sThe\sDying/i)){this.SpareTheDying()};
if(rip=stats.match(/Sword\sBurst/i)){this.SwordBurst()};
if(rip=stats.match(/Thaumaturgy/i)){this.Thaumaturgy()};
if(rip=stats.match(/Thorn\sWhip/i)){this.ThornWhip()};
if(rip=stats.match(/Thunderclap/i)){this.Thunderclap()};
if(rip=stats.match(/Toll\sThe\sDead/i)){this.TollTheDead()};
if(rip=stats.match(/True\sStrike/i)){this.TrueStrike()};
if(rip=stats.match(/Vicious\sMockery/i)){this.ViciousMockery()};
if(rip=stats.match(/Word\sOf\sRadiance/i)){this.WordOfRadiance()};
}
if(rip=stats.match(/Spellcasting/i)){
if(rip=stats.match(/Absorb\sElements/i)){this.AbsorbElements()};
if(rip=stats.match(/Alarm/i)){this.Alarm()};
if(rip=stats.match(/Animal\sFriendship/i)){this.AnimalFriendship()};
if(rip=stats.match(/Armor\sOf\sAgathys/i)){this.ArmorOfAgathys()};
if(rip=stats.match(/Arms\sOf\sHadar/i)){this.ArmsOfHadar()};
if(rip=stats.match(/Bane\s/i)){this.Bane()};
if(rip=stats.match(/Beast\sBond/i)){this.BeastBond()};
if(rip=stats.match(/Bless/i)){this.Bless()};
if(rip=stats.match(/Burning\sHands/i)){this.BurningHands()};
if(rip=stats.match(/Catapult/i)){this.Catapult()};
if(rip=stats.match(/Cause\sFear/i)){this.CauseFear()};
if(rip=stats.match(/Ceremony/i)){this.Ceremony()};
if(rip=stats.match(/Chaos\sBolt/i)){this.ChaosBolt()};
if(rip=stats.match(/Charm\sPerson/i)){this.CharmPerson()};
if(rip=stats.match(/Chromatic\sOrb/i)){this.ChromaticOrb()};
if(rip=stats.match(/Color\sSpray/i)){this.ColorSpray()};
if(rip=stats.match(/Command/i)){this.Command()};
if(rip=stats.match(/Compelled\sDuel/i)){this.CompelledDuel()};
if(rip=stats.match(/Comprehend\sLanguages/i)){this.ComprehendLanguages()};
if(rip=stats.match(/Create\sOr\sDestroy\sWater/i)){this.CreateOrDestroyWater()};
if(rip=stats.match(/Cure\sWounds/i)){this.CureWounds()};
if(rip=stats.match(/Detect\sEvil\sAnd\sGood/i)){this.DetectEvilAndGood()};
if(rip=stats.match(/Detect\sMagic/i)){this.DetectMagic()};
if(rip=stats.match(/Detect\sPoison\sAnd\sDisease/i)){this.DetectPoisonAndDisease()};
if(rip=stats.match(/Disguise\sSelf/i)){this.DisguiseSelf()};
if(rip=stats.match(/Dissonant\sWhispers/i)){this.DissonantWhispers()};
if(rip=stats.match(/Divine\sFavor/i)){this.DivineFavor()};
if(rip=stats.match(/Earth\sTremor/i)){this.EarthTremor()};
if(rip=stats.match(/Ensnaring\sStrike/i)){this.EnsnaringStrike()};
if(rip=stats.match(/Entangle/i)){this.Entangle()};
if(rip=stats.match(/Expeditious\sRetreat/i)){this.ExpeditiousRetreat()};
if(rip=stats.match(/Faerie\sFire/i)){this.FaerieFire()};
if(rip=stats.match(/False\sLife/i)){this.FalseLife()};
if(rip=stats.match(/Feather\sFall/i)){this.FeatherFall()};
if(rip=stats.match(/Find\sFamiliar/i)){this.FindFamiliar()};
if(rip=stats.match(/Fog\sCloud/i)){this.FogCloud()};
if(rip=stats.match(/Goodberry/i)){this.Goodberry()};
if(rip=stats.match(/Grease/i)){this.Grease()};
if(rip=stats.match(/Guiding\sBolt/i)){this.GuidingBolt()};
if(rip=stats.match(/Hail\sOf\sThorns/i)){this.HailOfThorns()};
if(rip=stats.match(/Healing\sWord/i)){this.HealingWord()};
if(rip=stats.match(/Hellish\sRebuke/i)){this.HellishRebuke()};
if(rip=stats.match(/Heroism/i)){this.Heroism()};
if(rip=stats.match(/Hex/i)){this.Hex()};
if(rip=stats.match(/Hunter\’s\sMark/i)){this.HuntersMark()};
if(rip=stats.match(/Ice\sKnife/i)){this.IceKnife()};
if(rip=stats.match(/Identify/i)){this.Identify()};
if(rip=stats.match(/Illusory\sScript/i)){this.IllusoryScript()};
if(rip=stats.match(/Inflict\sWounds/i)){this.InflictWounds()};
if(rip=stats.match(/Jump\s/i)){this.Jump()};
if(rip=stats.match(/Longstrider/i)){this.Longstrider()};
if(rip=stats.match(/Mage\sArmor/i)){this.MageArmor()};
if(rip=stats.match(/Magic\sMissile/i)){this.MagicMissile()};
if(rip=stats.match(/Protection\sFrom\sEvil\sAnd\sGood/i)){this.ProtectionFromEvilAndGood()};
if(rip=stats.match(/Purify\sFood\sAnd\sDrink/i)){this.PurifyFoodAndDrink()};
if(rip=stats.match(/Ray\sOf\sSickness/i)){this.RayOfSickness()};
if(rip=stats.match(/Sanctuary/i)){this.Sanctuary()};
if(rip=stats.match(/Searing\sSmite/i)){this.SearingSmite()};
if(rip=stats.match(/Shield/i)){this.Shield()};
if(rip=stats.match(/Shield\sOf\sFaith/i)){this.ShieldOfFaith()};
if(rip=stats.match(/Silent\sImage/i)){this.SilentImage()};
if(rip=stats.match(/Sleep/i)){this.Sleep()};
if(rip=stats.match(/Snare/i)){this.Snare()};
if(rip=stats.match(/Speak\sWith\sAnimals/i)){this.SpeakWithAnimals()};
if(rip=stats.match(/Tasha\’s\sHideous\sLaughter/i)){this.TashasHideousLaughter()};
if(rip=stats.match(/Tenser\’s\sFloating\sDisk/i)){this.TensersFloatingDisk()};
if(rip=stats.match(/Thunderous\sSmite/i)){this.ThunderousSmite()};
if(rip=stats.match(/Thunderwave/i)){this.Thunderwave()};
if(rip=stats.match(/Unseen\sServant/i)){this.UnseenServant()};
if(rip=stats.match(/Witch\sBolt/i)){this.WitchBolt()};
if(rip=stats.match(/Wrathful\sSmite/i)){this.WrathfulSmite()};
if(rip=stats.match(/Zephyr\sStrike/i)){this.ZephyrStrike()};
if(rip=stats.match(/Aganazzar\’s\sScorcher/i)){this.AganazzarsScorcher()};
if(rip=stats.match(/Aid/i)){this.Aid()};
if(rip=stats.match(/Alter\sSelf/i)){this.AlterSelf()};
if(rip=stats.match(/Animal\sMessenger/i)){this.AnimalMessenger()};
if(rip=stats.match(/Arcane\sLock/i)){this.ArcaneLock()};
if(rip=stats.match(/Augury\s/i)){this.Augury()};
if(rip=stats.match(/Barkskin/i)){this.Barkskin()};
if(rip=stats.match(/Beast\sSense/i)){this.BeastSense()};
if(rip=stats.match(/Blindness\sDeafness/i)){this.BlindnessDeafness()};
if(rip=stats.match(/Blur\s/i)){this.Blur()};
if(rip=stats.match(/Branding\sSmite/i)){this.BrandingSmite()};
if(rip=stats.match(/Calm\sEmotions/i)){this.CalmEmotions()};
if(rip=stats.match(/Cloud\sOf\sDaggers/i)){this.CloudOfDaggers()};
if(rip=stats.match(/Continual\sFlame/i)){this.ContinualFlame()};
if(rip=stats.match(/Cordon\sOf\sArrows/i)){this.CordonOfArrows()};
if(rip=stats.match(/Crown\sOf\sMadness/i)){this.CrownOfMadness()};
if(rip=stats.match(/Darkness/i)){this.Darkness()};
if(rip=stats.match(/Darkvision/i)){this.Darkvision()};
if(rip=stats.match(/Detect\sThoughts/i)){this.DetectThoughts()};
if(rip=stats.match(/Dragon\'s\sBreath/i)){this.DragonsBreath()};
if(rip=stats.match(/Dust\sDevil/i)){this.DustDevil()};
if(rip=stats.match(/Earthbind/i)){this.Earthbind()};
if(rip=stats.match(/Enhance\sAbility/i)){this.EnhanceAbility()};
if(rip=stats.match(/Enlarge\sReduce/i)){this.EnlargeReduce()};
if(rip=stats.match(/Enthrall/i)){this.Enthrall()};
if(rip=stats.match(/Find\sSteed/i)){this.FindSteed()};
if(rip=stats.match(/Find\sTraps/i)){this.FindTraps()};
if(rip=stats.match(/Flame\sBlade/i)){this.FlameBlade()};
if(rip=stats.match(/Flaming\sSphere/i)){this.FlamingSphere()};
if(rip=stats.match(/Gentle\sRepose/i)){this.GentleRepose()};
if(rip=stats.match(/Gust\sOf\sWind/i)){this.GustOfWind()};
if(rip=stats.match(/Healing\sSpirit/i)){this.HealingSpirit()};
if(rip=stats.match(/Heat\sMetal/i)){this.HeatMetal()};
if(rip=stats.match(/Hold\sPerson/i)){this.HoldPerson()};
if(rip=stats.match(/Invisibility/i)){this.Invisibility()};
if(rip=stats.match(/Knock/i)){this.Knock()};
if(rip=stats.match(/Lesser\sRestoration/i)){this.LesserRestoration()};
if(rip=stats.match(/Levitate/i)){this.Levitate()};
if(rip=stats.match(/Locate\sAnimals\sOr\sPlants/i)){this.LocateAnimalsOrPlants()};
if(rip=stats.match(/Locate\sObject/i)){this.LocateObject()};
if(rip=stats.match(/Magic\sMouth/i)){this.MagicMouth()};
if(rip=stats.match(/Magic\sWeapon/i)){this.MagicWeapon()};
if(rip=stats.match(/Maximilian\’s\sEarthen\sGrasp/i)){this.MaximiliansEarthenGrasp()};
if(rip=stats.match(/Melf\’s\sAcid\sArrow/i)){this.MelfsAcidArrow()};
if(rip=stats.match(/Mind\sSpike/i)){this.MindSpike()};
if(rip=stats.match(/Mirror\sImage/i)){this.MirrorImage()};
if(rip=stats.match(/Misty\sStep/i)){this.MistyStep()};
if(rip=stats.match(/Moonbeam/i)){this.Moonbeam()};
if(rip=stats.match(/Nystul\’s\sMagic\sAura/i)){this.NystulsMagicAura()};
if(rip=stats.match(/Pass\sWithout\sTrace/i)){this.PassWithoutTrace()};
if(rip=stats.match(/Phantasmal\sForce/i)){this.PhantasmalForce()};
if(rip=stats.match(/Prayer\sOf\sHealing/i)){this.PrayerOfHealing()};
if(rip=stats.match(/Protection\sFrom\sPoison/i)){this.ProtectionFromPoison()};
if(rip=stats.match(/Pyrotechnics/i)){this.Pyrotechnics()};
if(rip=stats.match(/Ray\sOf\sEnfeeblement/i)){this.RayOfEnfeeblement()};
if(rip=stats.match(/Rope\sTrick/i)){this.RopeTrick()};
if(rip=stats.match(/Scorching\sRay/i)){this.ScorchingRay()};
if(rip=stats.match(/See\sInvisibility/i)){this.SeeInvisibility()};
if(rip=stats.match(/Shadow\sBlade/i)){this.ShadowBlade()};
if(rip=stats.match(/Shatter/i)){this.Shatter()};
if(rip=stats.match(/Silence/i)){this.Silence()};
if(rip=stats.match(/Skywrite/i)){this.Skywrite()};
if(rip=stats.match(/Snilloc\’s\sSnowball\sSwarm/i)){this.SnillocsSnowballSwarm()};
if(rip=stats.match(/Spider\sClimb/i)){this.SpiderClimb()};
if(rip=stats.match(/Spike\sGrowth/i)){this.SpikeGrowth()};
if(rip=stats.match(/Spiritual\sWeapon/i)){this.SpiritualWeapon()};
if(rip=stats.match(/Suggestion/i)){this.Suggestion()};
if(rip=stats.match(/Warding\sBond/i)){this.WardingBond()};
if(rip=stats.match(/Warding\sWind/i)){this.WardingWind()};
if(rip=stats.match(/Web/i)){this.Web()};
if(rip=stats.match(/Zone\sOf\sTruth/i)){this.ZoneOfTruth()};
if(rip=stats.match(/Animate\sDead/i)){this.AnimateDead()};
if(rip=stats.match(/Aura\sOf\sVitality/i)){this.AuraOfVitality()};
if(rip=stats.match(/Beacon\sOf\sHope/i)){this.BeaconOfHope()};
if(rip=stats.match(/Bestow\sCurse/i)){this.BestowCurse()};
if(rip=stats.match(/Blinding\sSmite/i)){this.BlindingSmite()};
if(rip=stats.match(/Blink/i)){this.Blink()};
if(rip=stats.match(/Call\sLightning/i)){this.CallLightning()};
if(rip=stats.match(/Catnap/i)){this.Catnap()};
if(rip=stats.match(/Clairvoyance/i)){this.Clairvoyance()};
if(rip=stats.match(/Conjure\sAnimals/i)){this.ConjureAnimals()};
if(rip=stats.match(/Conjure\sBarrage/i)){this.ConjureBarrage()};
if(rip=stats.match(/Counterspell/i)){this.Counterspell()};
if(rip=stats.match(/Create\sFood\sAnd\sWater/i)){this.CreateFoodAndWater()};
if(rip=stats.match(/Crusader\’s\sMantle/i)){this.CrusadersMantle()};
if(rip=stats.match(/Daylight/i)){this.Daylight()};
if(rip=stats.match(/Dispel\sMagic/i)){this.DispelMagic()};
if(rip=stats.match(/Elemental\sWeapon/i)){this.ElementalWeapon()};
if(rip=stats.match(/Enemies\sAbound/i)){this.EnemiesAbound()};
if(rip=stats.match(/Erupting\sEarth/i)){this.EruptingEarth()};
if(rip=stats.match(/Fear\s/i)){this.Fear()};
if(rip=stats.match(/Feign\sDeath/i)){this.FeignDeath()};
if(rip=stats.match(/Fireball/i)){this.Fireball()};
if(rip=stats.match(/Flame\sArrows/i)){this.FlameArrows()};
if(rip=stats.match(/Fly/i)){this.Fly()};
if(rip=stats.match(/Gaseous\sForm/i)){this.GaseousForm()};
if(rip=stats.match(/Glyph\sOf\sWarding/i)){this.GlyphOfWarding()};
if(rip=stats.match(/Haste/i)){this.Haste()};
if(rip=stats.match(/Hunger\sOf\sHadar/i)){this.HungerOfHadar()};
if(rip=stats.match(/Hypnotic\sPattern/i)){this.HypnoticPattern()};
if(rip=stats.match(/Leomund\’s\sTiny\sHut/i)){this.LeomundsTinyHut()};
if(rip=stats.match(/Life\sTransference/i)){this.LifeTransference()};
if(rip=stats.match(/Lightning\sArrow/i)){this.LightningArrow()};
if(rip=stats.match(/Lightning\sBolt/i)){this.LightningBolt()};
if(rip=stats.match(/Magic\sCircle/i)){this.MagicCircle()};
if(rip=stats.match(/Major\sImage/i)){this.MajorImage()};
if(rip=stats.match(/Mass\sHealing\sWord/i)){this.MassHealingWord()};
if(rip=stats.match(/Meld\sInto\sStone/i)){this.MeldIntoStone()};
if(rip=stats.match(/Melf\’s\sMinute\sMeteors/i)){this.MelfsMinuteMeteors()};
if(rip=stats.match(/Nondetection/i)){this.Nondetection()};
if(rip=stats.match(/Phantom\sSteed/i)){this.PhantomSteed()};
if(rip=stats.match(/Plant\sGrowth/i)){this.PlantGrowth()};
if(rip=stats.match(/Protection\sFrom\sEnergy/i)){this.ProtectionFromEnergy()};
if(rip=stats.match(/Remove\sCurse/i)){this.RemoveCurse()};
if(rip=stats.match(/Revivify/i)){this.Revivify()};
if(rip=stats.match(/Sending/i)){this.Sending()};
if(rip=stats.match(/Sleet\sStorm/i)){this.SleetStorm()};
if(rip=stats.match(/Slow\s/i)){this.Slow()};
if(rip=stats.match(/Speak\sWith\sDead/i)){this.SpeakWithDead()};
if(rip=stats.match(/Speak\sWith\sPlants/i)){this.SpeakWithPlants()};
if(rip=stats.match(/Spirit\sGuardians/i)){this.SpiritGuardians()};
if(rip=stats.match(/Stinking\sCloud/i)){this.StinkingCloud()};
if(rip=stats.match(/Summon\sLesser\sDemons/i)){this.SummonLesserDemons()};
if(rip=stats.match(/Thunder\sStep/i)){this.ThunderStep()};
if(rip=stats.match(/Tidal\sWave/i)){this.TidalWave()};
if(rip=stats.match(/Tiny\sServant/i)){this.TinyServant()};
if(rip=stats.match(/Tongues/i)){this.Tongues()};
if(rip=stats.match(/Vampiric\sTouch/i)){this.VampiricTouch()};
if(rip=stats.match(/Wall\sOf\sSand/i)){this.WallOfSand()};
if(rip=stats.match(/Wall\sOf\sWater/i)){this.WallOfWater()};
if(rip=stats.match(/Water\sBreathing/i)){this.WaterBreathing()};
if(rip=stats.match(/Water\sWalk/i)){this.WaterWalk()};
if(rip=stats.match(/Wind\sWall/i)){this.WindWall()};
if(rip=stats.match(/Arcane\sEye/i)){this.ArcaneEye()};
if(rip=stats.match(/Aura\sOf\sLife/i)){this.AuraOfLife()};
if(rip=stats.match(/Aura\sOf\sPurity/i)){this.AuraOfPurity()};
if(rip=stats.match(/Banishment/i)){this.Banishment()};
if(rip=stats.match(/Blight/i)){this.Blight()};
if(rip=stats.match(/Charm\sMonster/i)){this.CharmMonster()};
if(rip=stats.match(/Compulsion/i)){this.Compulsion()};
if(rip=stats.match(/Confusion/i)){this.Confusion()};
if(rip=stats.match(/Conjure\sMinor\sElementals/i)){this.ConjureMinorElementals()};
if(rip=stats.match(/Conjure\sWoodland\sBeings/i)){this.ConjureWoodlandBeings()};
if(rip=stats.match(/Control\sWater/i)){this.ControlWater()};
if(rip=stats.match(/Death\sWard/i)){this.DeathWard()};
if(rip=stats.match(/Dimension\sDoor/i)){this.DimensionDoor()};
if(rip=stats.match(/Divination/i)){this.Divination()};
if(rip=stats.match(/Dominate\sBeast/i)){this.DominateBeast()};
if(rip=stats.match(/Elemental\sBane/i)){this.ElementalBane()};
if(rip=stats.match(/Evard\’s\sBlack\sTentacles/i)){this.EvardsBlackTentacles()};
if(rip=stats.match(/Fabricate/i)){this.Fabricate()};
if(rip=stats.match(/Find\sGreater\sSteed/i)){this.FindGreaterSteed()};
if(rip=stats.match(/Fire\sShield/i)){this.FireShield()};
if(rip=stats.match(/Freedom\sOf\sMovement/i)){this.FreedomOfMovement()};
if(rip=stats.match(/Giant\sInsect/i)){this.GiantInsect()};
if(rip=stats.match(/Grasping\sVine/i)){this.GraspingVine()};
if(rip=stats.match(/Greater\sInvisibility/i)){this.GreaterInvisibility()};
if(rip=stats.match(/Guardian\sOf\sFaith\s/i)){this.GuardianOfFaith()};
if(rip=stats.match(/Guardian\sOf\sNature/i)){this.GuardianOfNature()};
if(rip=stats.match(/Hallucinatory\sTerrain/i)){this.HallucinatoryTerrain()};
if(rip=stats.match(/Ice\sStorm/i)){this.IceStorm()};
if(rip=stats.match(/Leomund\’s\sSecret\sChest/i)){this.LeomundsSecretChest()};
if(rip=stats.match(/Locate\sCreature/i)){this.LocateCreature()};
if(rip=stats.match(/Mordenkainen\’s\sFaithful\sHound/i)){this.MordenkainensFaithfulHound()};
if(rip=stats.match(/Mordenkainen\’s\sPrivate\sSanctum/i)){this.MordenkainensPrivateSanctum()};
if(rip=stats.match(/Otiluke\’s\sResilient\sSphere/i)){this.OtilukesResilientSphere()};
if(rip=stats.match(/Phantasmal\sKiller/i)){this.PhantasmalKiller()};
if(rip=stats.match(/Polymorph/i)){this.Polymorph()};
if(rip=stats.match(/Shadow\sOf\sMoil/i)){this.ShadowOfMoil()};
if(rip=stats.match(/Sickening\sRadiance/i)){this.SickeningRadiance()};
if(rip=stats.match(/Staggering\sSmite/i)){this.StaggeringSmite()};
if(rip=stats.match(/Stone\sShape/i)){this.StoneShape()};
if(rip=stats.match(/Stoneskin/i)){this.Stoneskin()};
if(rip=stats.match(/Storm\sSphere/i)){this.StormSphere()};
if(rip=stats.match(/Summon\sGreater\sDemon/i)){this.SummonGreaterDemon()};
if(rip=stats.match(/Vitriolic\sSphere/i)){this.VitriolicSphere()};
if(rip=stats.match(/Wall\sOf\sFire/i)){this.WallOfFire()};
if(rip=stats.match(/Watery\sSphere/i)){this.WaterySphere()};
if(rip=stats.match(/Animate\sObjects/i)){this.AnimateObjects()};
if(rip=stats.match(/Antilife\sShell/i)){this.AntilifeShell()};
if(rip=stats.match(/Awaken/i)){this.Awaken()};
if(rip=stats.match(/Banishing\sSmite/i)){this.BanishingSmite()};
if(rip=stats.match(/Bigby\’s\sHand/i)){this.BigbysHand()};
if(rip=stats.match(/Circle\sOf\sPower/i)){this.CircleOfPower()};
if(rip=stats.match(/Cloudkill/i)){this.Cloudkill()};
if(rip=stats.match(/Commune/i)){this.Commune()};
if(rip=stats.match(/Commune\sWith\sNature/i)){this.CommuneWithNature()};
if(rip=stats.match(/Cone\sOf\sCold/i)){this.ConeOfCold()};
if(rip=stats.match(/Conjure\sElemental\s/i)){this.ConjureElemental()};
if(rip=stats.match(/Conjure\sVolley/i)){this.ConjureVolley()};
if(rip=stats.match(/Contact\sOther\sPlane/i)){this.ContactOtherPlane()};
if(rip=stats.match(/Contagion/i)){this.Contagion()};
if(rip=stats.match(/Control\sWinds/i)){this.ControlWinds()};
if(rip=stats.match(/Creation/i)){this.Creation()};
if(rip=stats.match(/Danse\sMacabre/i)){this.DanseMacabre()};
if(rip=stats.match(/Dawn\s/i)){this.Dawn()};
if(rip=stats.match(/Destructive\sWave/i)){this.DestructiveWave()};
if(rip=stats.match(/Dispel\sEvil\sAnd\sGood/i)){this.DispelEvilAndGood()};
if(rip=stats.match(/Dominate\sPerson/i)){this.DominatePerson()};
if(rip=stats.match(/Dream/i)){this.Dream()};
if(rip=stats.match(/Enervation/i)){this.Enervation()};
if(rip=stats.match(/Far\sStep/i)){this.FarStep()};
if(rip=stats.match(/Flame\sStrike/i)){this.FlameStrike()};
if(rip=stats.match(/Geas\s/i)){this.Geas()};
if(rip=stats.match(/Greater\sRestoration/i)){this.GreaterRestoration()};
if(rip=stats.match(/Hallow/i)){this.Hallow()};
if(rip=stats.match(/Hold\sMonster/i)){this.HoldMonster()};
if(rip=stats.match(/Holy\sWeapon/i)){this.HolyWeapon()};
if(rip=stats.match(/Immolation/i)){this.Immolation()};
if(rip=stats.match(/Infernal\sCalling/i)){this.InfernalCalling()};
if(rip=stats.match(/Insect\sPlague/i)){this.InsectPlague()};
if(rip=stats.match(/Legend\sLore/i)){this.LegendLore()};
if(rip=stats.match(/Maelstrom/i)){this.Maelstrom()};
if(rip=stats.match(/Mass\sCure\sWounds/i)){this.MassCureWounds()};
if(rip=stats.match(/Mislead/i)){this.Mislead()};
if(rip=stats.match(/Modify\sMemory/i)){this.ModifyMemory()};
if(rip=stats.match(/Negative\sEnergy\sFlood/i)){this.NegativeEnergyFlood()};
if(rip=stats.match(/Passwall/i)){this.Passwall()};
if(rip=stats.match(/Planar\sBinding/i)){this.PlanarBinding()};
if(rip=stats.match(/Raise\sDead/i)){this.RaiseDead()};
if(rip=stats.match(/Rary\’s\sTelepathic\sBond/i)){this.RarysTelepathicBond()};
if(rip=stats.match(/Reincarnate/i)){this.Reincarnate()};
if(rip=stats.match(/Scrying/i)){this.Scrying()};
if(rip=stats.match(/Seeming/i)){this.Seeming()};
if(rip=stats.match(/Skill\sEmpowerment/i)){this.SkillEmpowerment()};
if(rip=stats.match(/Steel\sWind\sStrike/i)){this.SteelWindStrike()};
if(rip=stats.match(/Swift\sQuiver/i)){this.SwiftQuiver()};
if(rip=stats.match(/Synaptic\sStatic/i)){this.SynapticStatic()};
if(rip=stats.match(/Telekinesis/i)){this.Telekinesis()};
if(rip=stats.match(/Teleportation\sCircle/i)){this.TeleportationCircle()};
if(rip=stats.match(/Transmute\sRock/i)){this.TransmuteRock()};
if(rip=stats.match(/Tree\sStride/i)){this.TreeStride()};
if(rip=stats.match(/Wall\sOf\sForce/i)){this.WallOfForce()};
if(rip=stats.match(/Wall\sOf\sLight/i)){this.WallOfLight()};
if(rip=stats.match(/Wall\sOf\sStone/i)){this.WallOfStone()};
if(rip=stats.match(/Wrath\sOf\sNature/i)){this.WrathOfNature()};
if(rip=stats.match(/Arcane\sGate/i)){this.ArcaneGate()};
if(rip=stats.match(/Blade\sBarrier/i)){this.BladeBarrier()};
if(rip=stats.match(/Bones\sOf\sThe\sEarth/i)){this.BonesOfTheEarth()};
if(rip=stats.match(/Chain\sLightning/i)){this.ChainLightning()};
if(rip=stats.match(/Circle\sOf\sDeath/i)){this.CircleOfDeath()};
if(rip=stats.match(/Conjure\sFey/i)){this.ConjureFey()};
if(rip=stats.match(/Contingency/i)){this.Contingency()};
if(rip=stats.match(/Create\sHomunculus\s/i)){this.CreateHomunculus()};
if(rip=stats.match(/Create\sUndead/i)){this.CreateUndead()};
if(rip=stats.match(/Disintegrate/i)){this.Disintegrate()};
if(rip=stats.match(/Drawmij\’s\sInstant\sSummons/i)){this.DrawmijsInstantSummons()};
if(rip=stats.match(/Druid\sGrove/i)){this.DruidGrove()};
if(rip=stats.match(/Eyebite/i)){this.Eyebite()};
if(rip=stats.match(/Find\sThe\sPath/i)){this.FindThePath()};
if(rip=stats.match(/Flesh\sTo\sStone/i)){this.FleshToStone()};
if(rip=stats.match(/Forbiddance/i)){this.Forbiddance()};
if(rip=stats.match(/Globe\sOf\sInvulnerability/i)){this.GlobeOfInvulnerability()};
if(rip=stats.match(/Guards\sAnd\sWards/i)){this.GuardsAndWards()};
if(rip=stats.match(/Harm/i)){this.Harm()};
if(rip=stats.match(/Heal/i)){this.Heal()};
if(rip=stats.match(/Heroes’\sFeast/i)){this.HeroesFeast()};
if(rip=stats.match(/Investiture\sOf\sFlame/i)){this.InvestitureOfFlame()};
if(rip=stats.match(/Investiture\sOf\sIce/i)){this.InvestitureOfIce()};
if(rip=stats.match(/Investiture\sOf\sStone/i)){this.InvestitureOfStone()};
if(rip=stats.match(/Investiture\sOf\sWind/i)){this.InvestitureOfWind()};
if(rip=stats.match(/Magic\sJar/i)){this.MagicJar()};
if(rip=stats.match(/Mass\sSuggestion/i)){this.MassSuggestion()};
if(rip=stats.match(/Mental\sPrison/i)){this.MentalPrison()};
if(rip=stats.match(/Move\sEarth/i)){this.MoveEarth()};
if(rip=stats.match(/Otiluke\’s\sFreezing\sSphere/i)){this.OtilukesFreezingSphere()};
if(rip=stats.match(/Otto\’s\sIrresistible\sDance/i)){this.OttosIrresistibleDance()};
if(rip=stats.match(/Planar\sAlly/i)){this.PlanarAlly()};
if(rip=stats.match(/Primordial\sWard/i)){this.PrimordialWard()};
if(rip=stats.match(/Primordial\sWard/i)){this.PrimordialWard()};
if(rip=stats.match(/Programmed\sIllusion/i)){this.ProgrammedIllusion()};
if(rip=stats.match(/Scatter/i)){this.Scatter()};
if(rip=stats.match(/Soul\sCage/i)){this.SoulCage()};
if(rip=stats.match(/Sunbeam/i)){this.Sunbeam()};
if(rip=stats.match(/Tenser\’s\sTransformation/i)){this.TensersTransformation()};
if(rip=stats.match(/Transport\sVia\sPlants/i)){this.TransportViaPlants()};
if(rip=stats.match(/True\sSeeing/i)){this.TrueSeeing()};
if(rip=stats.match(/Wall\sOf\sIce/i)){this.WallOfIce()};
if(rip=stats.match(/Wall\sOf\sThorns/i)){this.WallOfThorns()};
if(rip=stats.match(/Wind\sWalk/i)){this.WindWalk()};
if(rip=stats.match(/Word\sOf\sRecall/i)){this.WordOfRecall()};
if(rip=stats.match(/Conjure\sCelestial\s/i)){this.ConjureCelestial()};
if(rip=stats.match(/Crown\sOf\sStars/i)){this.CrownOfStars()};
if(rip=stats.match(/Delayed\sBlast\sFireball/i)){this.DelayedBlastFireball()};
if(rip=stats.match(/Divine\sWord/i)){this.DivineWord()};
if(rip=stats.match(/Etherealness/i)){this.Etherealness()};
if(rip=stats.match(/Finger\sOf\sDeath/i)){this.FingerOfDeath()};
if(rip=stats.match(/Fire\sStorm/i)){this.FireStorm()};
if(rip=stats.match(/Forcecage/i)){this.Forcecage()};
if(rip=stats.match(/Mirage\sArcane/i)){this.MirageArcane()};
if(rip=stats.match(/Mordenkainen\’s\sMagnificent\sMansion/i)){this.MordenkainensMagnificentMansion()};
if(rip=stats.match(/Mordenkainen\’s\sSword/i)){this.MordenkainensSword()};
if(rip=stats.match(/Plane\sShift/i)){this.PlaneShift()};
if(rip=stats.match(/Power\sWord\sPain/i)){this.PowerWordPain()};
if(rip=stats.match(/Prismatic\sSpray/i)){this.PrismaticSpray()};
if(rip=stats.match(/Project\sImage/i)){this.ProjectImage()};
if(rip=stats.match(/Regenerate/i)){this.Regenerate()};
if(rip=stats.match(/Resurrection/i)){this.Resurrection()};
if(rip=stats.match(/Reverse\sGravity/i)){this.ReverseGravity()};
if(rip=stats.match(/Sequester/i)){this.Sequester()};
if(rip=stats.match(/Simulacrum/i)){this.Simulacrum()};
if(rip=stats.match(/Symbol/i)){this.Symbol()};
if(rip=stats.match(/Teleport/i)){this.Teleport()};
if(rip=stats.match(/Temple\sOf\sThe\sGods/i)){this.TempleOfTheGods()};
if(rip=stats.match(/Whirlwind/i)){this.Whirlwind()};
if(rip=stats.match(/AbiDalzim\’s\sHorrid\sWilting/i)){this.AbiDalzimsHorridWilting()};
if(rip=stats.match(/Animal\sShapes/i)){this.AnimalShapes()};
if(rip=stats.match(/Antimagic\sField/i)){this.AntimagicField()};
if(rip=stats.match(/Antipathy\sSympathy/i)){this.AntipathySympathy()};
if(rip=stats.match(/Clone/i)){this.Clone()};
if(rip=stats.match(/Control\sWeather/i)){this.ControlWeather()};
if(rip=stats.match(/Demiplane/i)){this.Demiplane()};
if(rip=stats.match(/Dominate\sMonster/i)){this.DominateMonster()};
if(rip=stats.match(/Earthquake/i)){this.Earthquake()};
if(rip=stats.match(/Feeblemind/i)){this.Feeblemind()};
if(rip=stats.match(/Glibness/i)){this.Glibness()};
if(rip=stats.match(/Holy\sAura/i)){this.HolyAura()};
if(rip=stats.match(/Illusory\sDragon/i)){this.IllusoryDragon()};
if(rip=stats.match(/Incendiary\sCloud/i)){this.IncendiaryCloud()};
if(rip=stats.match(/Maddening\sDarkness/i)){this.MaddeningDarkness()};
if(rip=stats.match(/Maze\s/i)){this.Maze()};
if(rip=stats.match(/Mighty\sFortress/i)){this.MightyFortress()};
if(rip=stats.match(/Mind\sBlank/i)){this.MindBlank()};
if(rip=stats.match(/Power\sWord\sStun/i)){this.PowerWordStun()};
if(rip=stats.match(/Sunburst/i)){this.Sunburst()};
if(rip=stats.match(/Telepathy/i)){this.Telepathy()};
if(rip=stats.match(/Trap\sThe\sSoul/i)){this.TrapTheSoul()};
if(rip=stats.match(/Tsunami/i)){this.Tsunami()};
if(rip=stats.match(/Astral\sProjection/i)){this.AstralProjection()};
if(rip=stats.match(/Foresight/i)){this.Foresight()};
if(rip=stats.match(/Gate\s/i)){this.Gate()};
if(rip=stats.match(/Imprisonment/i)){this.Imprisonment()};
if(rip=stats.match(/Invulnerability/i)){this.Invulnerability()};
if(rip=stats.match(/Mass\sHeal/i)){this.MassHeal()};
if(rip=stats.match(/Mass\sPolymorph/i)){this.MassPolymorph()};
if(rip=stats.match(/Meteor\sSwarm/i)){this.MeteorSwarm()};
if(rip=stats.match(/Power\sWord\sHeal/i)){this.PowerWordHeal()};
if(rip=stats.match(/Power\sWord\sKill/i)){this.PowerWordKill()};
if(rip=stats.match(/Prismatic\sWall/i)){this.PrismaticWall()};
if(rip=stats.match(/Psychic\sScream/i)){this.PsychicScream()};
if(rip=stats.match(/Shapechange/i)){this.Shapechange()};
if(rip=stats.match(/Storm\sOf\sVengeance/i)){this.StormOfVengeance()};
if(rip=stats.match(/Time\sStop/i)){this.TimeStop()};
if(rip=stats.match(/True\sPolymorph/i)){this.TruePolymorph()};
if(rip=stats.match(/True\sResurrection/i)){this.TrueResurrection()};
if(rip=stats.match(/Weird/i)){this.Weird()};
if(rip=stats.match(/Wish/i)){this.Wish()};
}

if(rip=stats.match(/XP\)([\s\S]*)$/))
{characters[targeted].setFeatureNotes(rip[1].replace(/\./g, '\.\n'))}

if(rip=stats.match(/^([\s\S].+.)/))
{characters[targeted].setName(rip[1])};

if(rip=stats.match(/CREATURE([\s\S].)/))
{characters[targeted].setLvl(rip[1])};

if(rip=stats.match(/CREATURE[\s\S]+(CG|CE|LG|LE|NG|NE)/))
{characters[targeted].setAlignment(rip[1])};

if(rip=stats.match(/CREATURE[\s\S]+(TINY|SMALL|MEDIUM|LARGE)/))
{characters[targeted].setSize(rip[1])};

if(rip=stats.match(/CREATURE[\s\S]+(BEAST|DWARF|ELF)[\s\S].(EARTH|HUMANOID)/))
{characters[targeted].setRace(rip[1]+" "+rip[2])};

if(rip=stats.match(/Perception([\s\S].+)/))
{characters[targeted].setSenses(rip[1])};

if(rip=stats.match(/Languages([\s\S].+)/))
{characters[targeted].setLanguages(rip[1])};

if(rip=stats.match(/Skills([\s\S].+)/))
{characters[targeted].setSkills(rip[1])};

if(rip=stats.match(/Items([\s\S].+)/))
{characters[targeted].setEquipment(rip[1])};

if(rip=stats.match(/AC\s([\s\S].+?);/))
{characters[targeted].setAC(rip[1])};

if(rip=stats.match(/Fort\s([\s\S].+?),/))
{characters[targeted].setFortitude(rip[1])};

if(rip=stats.match(/Ref\s([\s\S].+?),/))
{characters[targeted].setReflex(rip[1])};

if(rip=stats.match(/Will\s([\s\S].+)/))
{characters[targeted].setWill(rip[1])};

if(rip=stats.match(/HP\s([\s\S].+?);/))
{characters[targeted].setMaxHp(rip[1])};

if(rip=stats.match(/Weaknesses\s([\s\S].+)/))
{characters[targeted].setVulnerability(rip[1])};

if(rip=stats.match(/Resistances\s([\s\S].+)/))
{characters[targeted].setResistance(rip[1])};

if(rip=stats.match(/Immunities\s([\s\S].+)/))
{characters[targeted].setImmunity(rip[1])};

if(rip=stats.match(/(?:Speed|Stride)([\s\S].+)/))
{characters[targeted].setSpeed(rip[1])};

if(rip=stats.match(/Str\s(\+\d{1,2})/))
{
if(rip[1]==='-7'){characters[targeted].setStr(-4)};
if(rip[1]==='-6'){characters[targeted].setStr(-2)};
if(rip[1]==='-5'){characters[targeted].setStr(0)};
if(rip[1]==='-4'){characters[targeted].setStr(2)};
if(rip[1]==='-3'){characters[targeted].setStr(4)};
if(rip[1]==='-2'){characters[targeted].setStr(6)};
if(rip[1]==='-1'){characters[targeted].setStr(8)};
if(rip[1]==='+0'){characters[targeted].setStr(10)};
if(rip[1]==='+1'){characters[targeted].setStr(12)};
if(rip[1]==='+2'){characters[targeted].setStr(14)};
if(rip[1]==='+3'){characters[targeted].setStr(16)};
if(rip[1]==='+4'){characters[targeted].setStr(18)};
if(rip[1]==='+5'){characters[targeted].setStr(20)};
if(rip[1]==='+6'){characters[targeted].setStr(22)};
if(rip[1]==='+7'){characters[targeted].setStr(24)};
if(rip[1]==='+8'){characters[targeted].setStr(26)};
};

if(rip=stats.match(/Dex\s(\+\d{1,2})/))
{
if(rip[1]==='-7'){characters[targeted].setDex(-4)};
if(rip[1]==='-6'){characters[targeted].setDex(-2)};
if(rip[1]==='-5'){characters[targeted].setDex(0)};
if(rip[1]==='-4'){characters[targeted].setDex(2)};
if(rip[1]==='-3'){characters[targeted].setDex(4)};
if(rip[1]==='-2'){characters[targeted].setDex(6)};
if(rip[1]==='-1'){characters[targeted].setDex(8)};
if(rip[1]==='+0'){characters[targeted].setDex(10)};
if(rip[1]==='+1'){characters[targeted].setDex(12)};
if(rip[1]==='+2'){characters[targeted].setDex(14)};
if(rip[1]==='+3'){characters[targeted].setDex(16)};
if(rip[1]==='+4'){characters[targeted].setDex(18)};
if(rip[1]==='+5'){characters[targeted].setDex(20)};
if(rip[1]==='+6'){characters[targeted].setDex(22)};
if(rip[1]==='+7'){characters[targeted].setDex(24)};
if(rip[1]==='+8'){characters[targeted].setDex(26)};
};

if(rip=stats.match(/Con\s(\+\d{1,2})/))
{
if(rip[1]==='-7'){characters[targeted].setCon(-4)};
if(rip[1]==='-6'){characters[targeted].setCon(-2)};
if(rip[1]==='-5'){characters[targeted].setCon(0)};
if(rip[1]==='-4'){characters[targeted].setCon(2)};
if(rip[1]==='-3'){characters[targeted].setCon(4)};
if(rip[1]==='-2'){characters[targeted].setCon(6)};
if(rip[1]==='-1'){characters[targeted].setCon(8)};
if(rip[1]==='+0'){characters[targeted].setCon(10)};
if(rip[1]==='+1'){characters[targeted].setCon(12)};
if(rip[1]==='+2'){characters[targeted].setCon(14)};
if(rip[1]==='+3'){characters[targeted].setCon(16)};
if(rip[1]==='+4'){characters[targeted].setCon(18)};
if(rip[1]==='+5'){characters[targeted].setCon(20)};
if(rip[1]==='+6'){characters[targeted].setCon(22)};
if(rip[1]==='+7'){characters[targeted].setCon(24)};
if(rip[1]==='+8'){characters[targeted].setCon(26)};
};

if(rip=stats.match(/Int\s(\+\d{1,2})/))
{
if(rip[1]==='-7'){characters[targeted].setInt(-4)};
if(rip[1]==='-6'){characters[targeted].setInt(-2)};
if(rip[1]==='-5'){characters[targeted].setInt(0)};
if(rip[1]==='-4'){characters[targeted].setInt(2)};
if(rip[1]==='-3'){characters[targeted].setInt(4)};
if(rip[1]==='-2'){characters[targeted].setInt(6)};
if(rip[1]==='-1'){characters[targeted].setInt(8)};
if(rip[1]==='+0'){characters[targeted].setInt(10)};
if(rip[1]==='+1'){characters[targeted].setInt(12)};
if(rip[1]==='+2'){characters[targeted].setInt(14)};
if(rip[1]==='+3'){characters[targeted].setInt(16)};
if(rip[1]==='+4'){characters[targeted].setInt(18)};
if(rip[1]==='+5'){characters[targeted].setInt(20)};
if(rip[1]==='+6'){characters[targeted].setInt(22)};
if(rip[1]==='+7'){characters[targeted].setInt(24)};
if(rip[1]==='+8'){characters[targeted].setInt(26)};
};

if(rip=stats.match(/Wis\s(\+\d{1,2})/))
{
if(rip[1]==='-7'){characters[targeted].setWis(-4)};
if(rip[1]==='-6'){characters[targeted].setWis(-2)};
if(rip[1]==='-5'){characters[targeted].setWis(0)};
if(rip[1]==='-4'){characters[targeted].setWis(2)};
if(rip[1]==='-3'){characters[targeted].setWis(4)};
if(rip[1]==='-2'){characters[targeted].setWis(6)};
if(rip[1]==='-1'){characters[targeted].setWis(8)};
if(rip[1]==='+0'){characters[targeted].setWis(10)};
if(rip[1]==='+1'){characters[targeted].setWis(12)};
if(rip[1]==='+2'){characters[targeted].setWis(14)};
if(rip[1]==='+3'){characters[targeted].setWis(16)};
if(rip[1]==='+4'){characters[targeted].setWis(18)};
if(rip[1]==='+5'){characters[targeted].setWis(20)};
if(rip[1]==='+6'){characters[targeted].setWis(22)};
if(rip[1]==='+7'){characters[targeted].setWis(24)};
if(rip[1]==='+8'){characters[targeted].setWis(26)};
};

if(rip=stats.match(/Cha\s(\+\d{1,2})/))
{
if(rip[1]==='-7'){characters[targeted].setCha(-4)};
if(rip[1]==='-6'){characters[targeted].setCha(-2)};
if(rip[1]==='-5'){characters[targeted].setCha(0)};
if(rip[1]==='-4'){characters[targeted].setCha(2)};
if(rip[1]==='-3'){characters[targeted].setCha(4)};
if(rip[1]==='-2'){characters[targeted].setCha(6)};
if(rip[1]==='-1'){characters[targeted].setCha(8)};
if(rip[1]==='+0'){characters[targeted].setCha(10)};
if(rip[1]==='+1'){characters[targeted].setCha(12)};
if(rip[1]==='+2'){characters[targeted].setCha(14)};
if(rip[1]==='+3'){characters[targeted].setCha(16)};
if(rip[1]==='+4'){characters[targeted].setCha(18)};
if(rip[1]==='+5'){characters[targeted].setCha(20)};
if(rip[1]==='+6'){characters[targeted].setCha(22)};
if(rip[1]==='+7'){characters[targeted].setCha(24)};
if(rip[1]==='+8'){characters[targeted].setCha(26)};
};

if(rip=stats.match(/(Melee\s[\s\S].+?)(\+\d{1,2})([\s\S].+)Damage\s(\d{1,2}d\d{1,2}\+\d{1,2}|\d{1,2}d\d{1,2})([\s\S].+)/))
{
characters[targeted].setRollName1(rip[1]+" "+rip[3]);
characters[targeted].setRoll1('1d20'+rip[2]);
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4].replace(/\s/g,''));
addRollPrompt(targeted);
}

if(rip=stats.match(/Melee[\s\S]+(Melee\s[\s\S].+?)(\+\d{1,2})([\s\S].+)Damage\s(\d{1,2}d\d{1,2}\+\d{1,2}|\d{1,2}d\d{1,2})([\s\S].+)/))
{
characters[targeted].setRollName1(rip[1]+" "+rip[3]);
characters[targeted].setRoll1('1d20'+rip[2]);
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4].replace(/\s/g,''));
addRollPrompt(targeted);
}

if(rip=stats.match(/(Ranged\s[\s\S].+?)(\+\d{1,2})([\s\S]+)Damage\s([\s\S]+)(piercing)/))
{
characters[targeted].setRollName1(rip[1]+" "+rip[3]);
characters[targeted].setRoll1('1d20'+rip[2]);
characters[targeted].setRollName2(rip[5]);
characters[targeted].setRoll2(rip[4].replace(/\s/g,''));
addRollPrompt(targeted);
}

checkTheTarget();
}
function _addRoll(name, roll, name2, roll2)
{x=this.rolls.length;
this.rolls[x]=roll;
this.rollNames[x]=name;
x=this.rolls2.length;
this.rolls2[x]=roll2;
this.rollNames2[x]=name2;
this.refresh()}
function _deleteRoll(i){this.rolls.splice(i, 1);
this.rollNames.splice(i, 1);
this.rolls2.splice(i, 1);
this.rollNames2.splice(i, 1);
this.refresh();
checkTheTarget()}
function _getSaveText(){this.updateXY();
varName="";
varName="pc";
varName+=Math.ceil(Math.random()*10000);
toSave="\/\/"+this.name+"<br>";
toSave+=varName+"=new Character('"+this.name+"', ' "+this.type+"')<br>";
for(var i=0; i<this.rolls.length; i++){toSave+=varName+".addRoll('"+this.rollNames[i]+"', ' "+this.rolls[i]+"', ' "+this.rollNames2[i]+"', ' "+this.rolls2[i]+"')<br>"
}toSave+=varName+".putAt('"+this.x+"\', \' "+this.y+"\' )<br>";
toSave+=varName+".setClass('"+this.class+"')<br>";
toSave+=varName+".setLvl('"+this.lvl+"')<br>";
toSave+=varName+".setRace('"+this.race+"')<br>";
toSave+=varName+".setBackground('"+this.background+"')<br>";
toSave+=varName+".setAbility('"+this.ability+"')<br>";
toSave+=varName+".setAC("+this.ac+")<br>";
toSave+=varName+".setFortitude("+this.fortitude+")<br>";
toSave+=varName+".setReflex("+this.reflex+")<br>";
toSave+=varName+".setWill("+this.will+")<br>";
toSave+=varName+".setPetrify('"+this.petrify+"')<br>";
toSave+=varName+".setAlignment('"+this.alignment+"')<br>";
toSave+=varName+".setAnimal('"+this.animal+"')<br>";
toSave+=varName+".setArmor('"+this.armor+"')<br>";
toSave+=varName+".setArcana('"+this.arcana+"')<br>";
toSave+=varName+".setParalysis('"+this.paralysis+"')<br>";
toSave+=varName+".setBackF('"+this.backF+"')<br>";
toSave+=varName+".setBackL('"+this.backL+"')<br>";
toSave+=varName+".setBackS('"+this.backS+"')<br>";
toSave+=varName+".setBackT('"+this.backT+"')<br>";
toSave+=varName+".setBonds('"+this.bonds+"')<br>";
toSave+=varName+".setCha("+this.cha+")<br>";
toSave+=varName+".setChaPro('"+this.chaPro+"')<br>";
toSave+=varName+".setCon("+this.con+")<br>";
toSave+=varName+".setConPro('"+this.conPro+"')<br>";
toSave+=varName+".setCurHp("+this.curHp+")<br>";
toSave+=varName+".setOpenDoors('"+this.openDoors+"')<br>";
toSave+=varName+".setDex("+this.dex+")<br>";
toSave+=varName+".setDexPro('"+this.dexPro+"')<br>";
toSave+=varName+".setEquipment('"+this.equipment+"')<br>";
toSave+=varName+".setExperience('"+this.experience+"')<br>";
toSave+=varName+".setFeats('"+this.feats+"')<br>";
toSave+=varName+".setActionNotes('"+this.actionNotes+"')<br>";
toSave+=varName+".setFeatureNotes('"+this.featureNotes+"')<br>";
toSave+=varName+".setFigure('"+this.figure+"')<br>";
toSave+=varName+".setFlaws('"+this.flaws+"')<br>";
toSave+=varName+".setRods('"+this.rods+"')<br>";
toSave+=varName+".setHitDice('"+this.hitDice+"')<br>";
toSave+=varName+".setIdeals('"+this.ideals+"')<br>";
if(!isNaN(this.init)){toSave+=varName+".setInit("+this.init+")<br>"
}toSave+=varName+".setImmunity('"+this.immunity+"')<br>";
toSave+=varName+".setInitBonus('"+this.initBonus+"')<br>";
toSave+=varName+".setInsight('"+this.insight+"')<br>";
toSave+=varName+".setInt("+this.inte+")<br>";
toSave+=varName+".setIntimidation('"+this.intimidation+"')<br>";
toSave+=varName+".setIntPro('"+this.intPro+"')<br>";
toSave+=varName+".setInvestigation('"+this.investigation+"')<br>";
toSave+=varName+".setLanguages('"+this.languages+"')<br>";
toSave+=varName+".setMaxHp("+this.maxHp+")<br>";
toSave+=varName+".setCurHp("+this.curHp+")<br>";
toSave+=varName+".setBendBars('"+this.bendBars+"')<br>";
toSave+=varName+".setNature('"+this.nature+"')<br>";
toSave+=varName+".setPerception('"+this.perception+"')<br>";
toSave+=varName+".setBreath('"+this.breath+"')<br>";
toSave+=varName+".setAttackAdjustment('"+this.attackAdjustment+"')<br>";
toSave+=varName+".setPro('"+this.pro+"')<br>";
toSave+=varName+".setProficiencies('"+this.proficiencies+"')<br>";
toSave+=varName+".setProficienciesRace('"+this.proficienciesRace+"')<br>";
toSave+=varName+".setSpells('"+this.spells+"')<br>";
toSave+=varName+".setResistance('"+this.resistance+"')<br>";
toSave+=varName+".setSaving('"+this.saving+"')<br>";
toSave+=varName+".setSenses('"+this.senses+"')<br>";
toSave+=varName+".setShield('"+this.shield+"')<br>";
toSave+=varName+".setSize('"+this.size+"')<br>";
toSave+=varName+".setDamageAdjustment('"+this.damageAdjustment+"')<br>";
toSave+=varName+".setSkills('"+this.skills+"')<br>";
toSave+=varName+".setSpeed('"+this.speed+"')<br>";
toSave+=varName+".setSpellAbility('"+this.spellAbility+"')<br>";
toSave+=varName+".setSpellAbilityNumber('"+this.spellAbilityNumber+"')<br>";
toSave+=varName+".setStealth('"+this.stealth+"')<br>";
toSave+=varName+".setStr("+this.str+")<br>";
toSave+=varName+".setStrPro('"+this.strPro+"')<br>";
toSave+=varName+".setMissileAdjustment('"+this.missileAdjustment+"')<br>";
toSave+=varName+".setTrait('"+this.trait+"')<br>";
toSave+=varName+".setVulnerability('"+this.vulnerability+"')<br>";
toSave+=varName+".setWis("+this.wis+")<br>";
toSave+=varName+".setWisPro('"+this.wisPro+"')<br>";
toSave+=varName+".setDamageConditions('"+this.dmgConditions+"')<br>";
toSave+=varName+".setCurSlot1("+this.curSlot1+")<br>";
toSave+=varName+".setCurSlot2("+this.curSlot2+")<br>";
toSave+=varName+".setCurSlot3("+this.curSlot3+")<br>";
toSave+=varName+".setCurSlot4("+this.curSlot4+")<br>";
toSave+=varName+".setCurSlot5("+this.curSlot5+")<br>";
toSave+=varName+".setCurSlot6("+this.curSlot6+")<br>";
toSave+=varName+".setCurSlot7("+this.curSlot7+")<br>";
toSave+=varName+".setCurSlot8("+this.curSlot8+")<br>";
toSave+=varName+".setCurSlot9("+this.curSlot9+")<br>";
if(this.menuShown){toSave+=varName+".showMenu( )"
}toSave+="add("+varName+")<br>";
toSave+="\/\/End of "+this.name+"<br>";
return toSave
}
function _hide(){document.getElementById(this.elementId).style.visibility="hidden"
}
function _hideBox(){this.box.hide()}
function _hideMenu(){this.menu.hide();
this.menuShown=false
}
function _putAt(x, y){this.x=x;
this.y=y;
document.getElementById(this.elementId).style.top=y;
document.getElementById(this.elementId).style.left=x
}
function _putCharAt(x, y){this.x=x;
this.y=y;
numX=x.substring(0, x.length - 2);
menuX=(numX / 1+characterBoxWidth)+"px";
this.box.putAt(x, y);
this.menu.putAt(menuX, y)}$("input[name='id_radioname']").on('change', function(e){var value=$("input[name='id_radioname']:checked").val();
localStorage.setItem('option', value);
location.reload()})
function _ref(){boxContents="<img id='rotated"+this.index+"' onClick='characters["+this.index+"].setRotation("+this.index+")' src=' "+this.figure+"'>";
boxContents+="<table><tr><td>"+this.name;
boxContents+="<br>(Ini)tiative:"+this.init;
boxContents+="<br>Target?<input id='targeted"+this.index+"' name='targeted' onClick='targeted="+this.index+"' type='radio'>"
boxContents+="<br>HP:"+this.maxHp+"/"+this.curHp;
boxContents+="</td></tr><tr><td><input onClick='toggleTab1("+this.index+");checkTheTarget("+this.index+")' type='button' value='Show Stats?'>";

boxContents+="</td></tr></table></span><span id=toggled1"+this.index+" style='display:"+this.toggled1+"'>"

boxContents+="<table>"
boxContents+="<tr><td><b>Name:</b> <input class=name maxLength='200' onChange='characters["+this.index+"].setName(this.value)' placeHolder='Name'size='30' type='text' value=' "+this.name+"'>";
boxContents+="<br><b>Miniature File:</b> <input maxLength='200' onChange='characters["+this.index+"].setFigure(this.value)'placeHolder='*.png'size='30' type='text' value=' "+this.figure+"'>";
boxContents+="</td></tr><tr><td><b>AC:</b>Armor Class <input maxLength='2' onChange='characters["+this.index+"].setAC(this.value);checkTheTarget("+this.index+")' size='2' type='text' value="+this.ac+">/"+this.curAc;
boxContents+="<br><b>Armor Type:</b> <select onChange='characters["+this.index+"].setArmor(this.value);checkTheTarget("+this.index+")'><option>"+this.armor+"<option>No Armor AC10<option>Leather AC8</option><option>Padded AC8<option>Studded Leather AC7<option>Ring Mail AC7<option>Scale Mail AC6<option>Chain Mail AC5<option>Banded Mail AC4<option>Plate Mail AC3</select>";
boxContents+="<br><input maxLength='200' onChange='characters["+this.index+"].setArmor(this.value);checkTheTarget("+this.index+")' placeHolder='other armor or magical defense' size='30' type='text'>";
boxContents+="<br><b>Shield:</b> <select onChange='characters["+this.index+"].setShield(this.value);checkTheTarget("+this.index+")'><option>"+this.shield+"<option>No Shield AC-0<option>Shield AC-1</select>";
boxContents+="<br><input maxLength='200' onChange='characters["+this.index+"].setShield(this.value);checkTheTarget("+this.index+")' placeHolder='other shield or magical defense' size='30' type='text'>";
boxContents+="</td></tr><tr><td><b>MV:</b> movement in inches<input maxLength='200' onChange='characters["+this.index+"].setSpeed(this.value);checkTheTarget("+this.index+")' size='8' type='text' value=' "+this.speed+"'>";
boxContents+="</td></tr><tr><td><b>Senses:</b> <input maxLength='200' onChange='characters["+this.index+"].setSenses(this.value);checkTheTarget("+this.index+")' size='30' type='text' value=' "+this.senses+"'>";
boxContents+="</td></tr><tr><td><b>Class:</b><select onChange='characters["+this.index+"].setClass(this.value)'><option>"+this.class+"<option>Monster</option><option>Assassin</option><option>Bard</option><option>Cleric</option><option>Druid</option><option>Fighter</option><option>Illusionist</option><option>Magic User</option><option>Monk</option><option>Paladin</option><option>Ranger</option><option>Thief</option></select>";
boxContents+="<br><input maxLength='200' onChange='characters["+this.index+"].setClass(this.value)' placeHolder='or other class' size='30' type='text'>";
boxContents+="<br><b>Lvl:</b>Level <input maxLength='2' onChange='characters["+this.index+"].setLvl(this.value);checkTheTarget("+this.index+")' size=3 type='text' value="+this.lvl+">";
boxContents+="<br><b>XP:</b>Experience Points <input maxLength='8' onChange='characters["+this.index+"].setExperience(this.value);checkTheTarget("+this.index+")'size='8' type='text' value=' "+this.experience+"'>";
boxContents+="<br><b>HD:</b>Hit Dice <input maxLength='10' onChange='characters["+this.index+"].setHitDice(this.value);checkTheTarget("+this.index+")' placeHolder='XdY+Z' size=10 type='text' value=' "+this.hitDice+"'>";
boxContents+="<br><b>Damage Conditions:</b>temp hp+10, ac-1, str+1, ini+3, blinded<textArea cols='30' rows=2 onChange='characters["+this.index+"].setDamageConditions(this.value);checkTheTarget("+this.index+")'placeHolder=''>"+this.dmgConditions+"</textArea>"
boxContents+="<br><b>Vulnerability:</b>(2Xdmg)<input maxLength='200' onChange='characters["+this.index+"].setVulnerability(this.value);checkTheTarget("+this.index+")' size='30' value=' "+this.vulnerability+"'>";
boxContents+="<br><b>Damage Resistances: </b>(1/2dmg)<input maxLength='200' onChange='characters["+this.index+"].setResistance(this.value);checkTheTarget("+this.index+")' size='30' value=' "+this.resistance+"'>";
boxContents+="<br><b>Damage Immunities:</b> (0dmg)<input maxLength='200' onChange='characters["+this.index+"].setImmunity(this.value);checkTheTarget("+this.index+")' size='30' value=' "+this.immunity+"'>";
boxContents+="<br>Damage?<input class='piece' maxLength='3' onChange='characters["+this.index+"].setDmg(this.value);checkTheTarget("+this.index+")'size='3' type='text'>";
boxContents+="<br>Heal?<input class='piece' maxLength='3' onChange='characters["+this.index+"].setHealing(this.value);checkTheTarget("+this.index+")'size='3' type='text'><br><b>Temporary Hit Points</b>:"+this.tempHp;
boxContents+="<br><b>HP:</b>Hit Points <input maxLength='3' onChange='characters["+this.index+"].setMaxHp(this.value);checkTheTarget("+this.index+")' size='3' type='text' value="+this.maxHp+">";
boxContents+="/<input maxLength='3' onChange='characters["+this.index+"].setCurHp(this.value);checkTheTarget("+this.index+")' size='3' type='text' value="+this.curHp+">";
boxContents+="</td></tr><tr><td><b>AT: </b>Atttacks, actions in combat<textArea cols='30' rows=2 onChange='characters["+this.index+"].setActionNotes(this.value);checkTheTarget("+this.index+")'placeHolder='Multiattacks'>"+this.actionNotes+"</textArea>"
boxContents+="</td></tr><tr><td>(Sit)uation (Mod)ifier:<input maxLength='3' onChange='characters["+this.index+"].setSit(this.value);checkTheTarget("+this.index+")'size='3' type='text' value="+this.sit+">";
boxContents+="</td></tr><tr><td><b>Make a new roll?</b><br><b>Weapon or Spell Name:</b><input maxLength='200' onChange='characters["+this.index+"].setRollName1(this.value);checkTheTarget("+this.index+")' size='30' type='text' value=' "+this.rollName1+"'>"
boxContents+="<b>Attack Dice:</b><input maxLength='8' onChange='characters["+this.index+"].setRoll1(this.value);checkTheTarget("+this.index+")' placeHolder='XdY+Z'size='8' type='text' value="+this.roll1+">"
boxContents+="<b>Damage Type:</b><input maxLength='200' onChange='characters["+this.index+"].setRollName2(this.value);checkTheTarget("+this.index+")' placeHolder='damage type' size='30' type='text' value=' "+this.rollName2+"'>"
boxContents+="<b>Damage Dice:</b><input maxLength='8' onChange='characters["+this.index+"].setRoll2(this.value);checkTheTarget("+this.index+")' placeHolder='XdY+Z'size='8' type='text' value="+this.roll2+">"
boxContents+="<input maxLength='8' onClick='addRollPrompt("+this.index+")'size='8' type='button' value='Add this roll?'>";
if(this.rolls.length===0){boxContents+="</td></tr><tr><td><i>No custom rolls listed.</i>"
}
else
{for(var i=0; i<this.rolls.length; i++){boxContents+="</td></tr><tr><td><input type='button' onClick='makeRoll("+this.index+", "+i+")'value='Roll? Target first.'>"
boxContents+="<input maxLength='200' onChange='characters["+this.index+"].rollNames["+i+"]=this.value' size='30' type='text' value=' "+this.rollNames[i]+"'>";
boxContents+="<input maxLength='8' onChange='characters["+this.index+"].rolls["+i+"]=this.value' size='8' type='text' value=' "+this.rolls[i]+"'>";
boxContents+="<input maxLength='200' onChange='characters["+this.index+"].rollNames2["+i+"]=this.value' size='30' type='text' value=' "+this.rollNames2[i]+"'>";
boxContents+="<input maxLength='8' onChange='characters["+this.index+"].rolls2["+i+"]=this.value' size='8' type='text' value=' "+this.rolls2[i]+"'>";
boxContents+="<input type='button' onClick='deleteRollPrompt("+this.index+", "+i+")'value='Delete this roll?'>"
}
}
boxContents+="</td></tr><tr><td><b>Race:</b> <select onChange='characters["+this.index+"].setRace(this.value)'><option>"+this.race+"<option>Dwarf</option><option>Elf</option><option>Gnome</option><option>Half Elf<option>Halfling<option>Half Orc<option>Human</select>";
boxContents+="<br><input maxLength='200' onChange='characters["+this.index+"].setRace(this.value)' placeHolder='or other race' size='30' type='ptext'>";
boxContents+="<br><b>Size:</b> <select onChange='characters["+this.index+"].setSize(this.value);checkTheTarget("+this.index+")'><option>"+this.size+"<option>Tiny 2.5x2.5ft<option>Small 5x5ft<option>Medium 5x5ft<option>Large 10x10ft<option>Huge 15x15ft<option>Gargantuan 20x20ft+</select>";
boxContents+="<br><b>Traits:</b>Gender, Age, Color, Height, Weight<textArea cols='30' rows='3' onChange='characters["+this.index+"].setTrait(this.value)'placeHolder=''>"+this.trait+"</textarea>";
boxContents+="<br><b>Languages:</b> <input maxLength='200' onChange='characters["+this.index+"].setLanguages(this.value);checkTheTarget("+this.index+")' size='30' type='text' value=' "+this.languages+"'>";
boxContents+="<br><b>Alignment:</b> <select onChange='characters["+this.index+"].setAlignment(this.value);checkTheTarget("+this.index+")'><option>"+this.alignment+"<option>Lawful Good<option>Lawful Neutral<option>Lawful Evil<option>Neutral Good<option>Neutral<option>Neutral Evil<option>Chaotic Good<option>Chaotic Neutral<option>Chaotic Evil<option>Unaligned</select>";
boxContents+="<br>"+this.alignmentDescription;
boxContents+="</td></tr><tr><td><input onClick='abi=1;abiMod=characters["+this.index+"].strMod;skillMod=characters["+this.index+"].strPro;abiRoll("+this.index+")'value='Roll (STR)ength?' type='button'><input maxLength='2' onChange='characters["+this.index+"].setStr(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.str+">/<mark>"+this.curStr+"</mark>"

boxContents+="<br>Attack Adjustment<input maxLength='2' onChange='characters["+this.index+"].setAttackAdjustment(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.attackAdjustment+">"

boxContents+="<br>Damage Adjustment<input maxLength='2' onChange='characters["+this.index+"].setDamageAdjustment(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.damageAdjustment+">"

boxContents+="<br>Open Doors<input maxLength='2' onChange='characters["+this.index+"].setOpenDoors(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.openDoors+">on a 1d6 roll 1 to"

boxContents+="<br>Bend Bars<input maxLength='2' onChange='characters["+this.index+"].setBendBars(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.bendBars+">% on a 2d10"

boxContents+="</td></tr><tr><td><input onClick='abi=2;abiMod=characters["+this.index+"].dexMod;skillMod=characters["+this.index+"].dexPro;abiRoll("+this.index+")'value='Roll (DEX)terity?' type='button'><input maxLength='2' onChange='characters["+this.index+"].setDex(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.dex+">/<mark>"+this.curDex+"</mark>"

boxContents+="<br>Missile Adjustment<input maxLength='2' onChange='characters["+this.index+"].setMissileAdjustment(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.missileAdjustment+">"

boxContents+="</td></tr><tr><td><input onClick='abi=3;abiMod=characters["+this.index+"].conMod;skillMod=characters["+this.index+"].conPro;abiRoll("+this.index+")'value='Roll (CON)stitution?'type='button'><input maxLength='2' onChange='characters["+this.index+"].setCon(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.con+">/<mark>"+this.curCon+"</mark>"
boxContents+="</td></tr><tr><td><input onClick='abi=5;abiMod=characters["+this.index+"].wisMod;skillMod=characters["+this.index+"].wisPro;abiRoll("+this.index+")'value='Roll (WIS)dom?'type='button'><input maxLength='2' onChange='characters["+this.index+"].setWis(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.wis+">/<mark>"+this.curWis+"</mark>"
boxContents+="</td></tr><tr><td><input onClick='abi=4;abiMod=characters["+this.index+"].intMod;skillMod=characters["+this.index+"].intPro;abiRoll("+this.index+")'value='Roll (INT)elligence?'type='button'><input maxLength='2' onChange='characters["+this.index+"].setInt(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.inte+">/<mark>"+this.curInt+"</mark>"
boxContents+="</td></tr><tr><td><input onClick='abi=6;abiMod=characters["+this.index+"].chaMod;skillMod=characters["+this.index+"].chaPro;abiRoll("+this.index+")'value='Roll (CHA)risma?'type='button'><input maxLength='2' onChange='characters["+this.index+"].setCha(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.cha+">/<mark>"+this.curCha+"</mark>"
boxContents+="</td></tr><tr><td><h3>Saving Throws</h3>minimum on 1d20 needed to save for Monsters and Characters";
boxContents+="</td></tr><tr><td>Paralysis, Poison or Death<input maxLength='2' onChange='characters["+this.index+"].setParalysis(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.paralysis+"><mark>"

boxContents+="</td></tr><tr><td>Petrify or Polymorph<input maxLength='2' onChange='characters["+this.index+"].setPetrify(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.petrify+">"

boxContents+="</td></tr><tr><td>Rod, Staff, Wand<input maxLength='2' onChange='characters["+this.index+"].setRods(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.rods+">"

boxContents+="</td></tr><tr><td>Breath<input maxLength='2' onChange='characters["+this.index+"].setBreath(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.breath+">"

boxContents+="</td></tr><tr><td>Spells<input maxLength='2' onChange='characters["+this.index+"].setSpells(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.spells+">"

boxContents+="</td></tr><tr><td>Equipment:<textArea cols='30' rows='3' onChange='characters["+this.index+"].setEquipment(this.value)'>"+this.equipment+"</textArea>";

boxContents+="</td></tr><tr><td><h3>Combat Results</h3>"+this.combatLog;
boxContents+="</td></tr><tr><td><input type='button' onClick='characters["+this.index+"].save();checkTheTarget("+this.index+")'value='Save this character?'>";
boxContents+="</td></tr><tr><td><input type='button' value='Delete this character?'onClick='removeChar("+this.index+");checkTheTarget("+this.index+")'>";

boxContents+="</td></tr></table></span></td><td><span id=toggled2"+this.index+" style='display:"+this.toggled2+"'>";

boxContents+="</td></tr></table></span></td><td><span id=toggled3"+this.index+" style='display:"+this.toggled3+"'>";

boxContents+="<table><tr><td>";

boxContents+="</td></tr></table></span></td><td><span id=toggled4"+this.index+" style='display:"+this.toggled4+"'>";

boxContents+="<table><tr><td>"

boxContents+="</td></tr><tr><td><input onClick='abi=1;abiMod=characters["+this.index+"].strMod;skillMod=characters["+this.index+"].strPro;abiRoll("+this.index+")'value='Roll (STR)ength?' type='button'><input maxLength='2' onChange='characters["+this.index+"].setStr(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.str+">/<mark>"+this.curStr+"</mark> mod:"+this.strMod+"+<select onChange='characters["+this.index+"].setStrPro(this.value);checkTheTarget("+this.index+")'><option>"+this.strPro+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=10;abiMod=characters["+this.index+"].strMod;skillMod=characters["+this.index+"].paralysis;abiRoll("+this.index+")'value='Roll Athletics(str)?'type='button'>+<select onChange='characters["+this.index+"].setParalysis(this.value);checkTheTarget("+this.index+")'><option>"+this.paralysis+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>";
boxContents+="</td></tr><tr><td>Carrying Capacity:"+this.carryingCapacity+"lbs";
boxContents+="</td></tr><tr><td>Drag, Lift, Push:"+this.dragLiftPush+"lbs";
boxContents+="</td></tr><tr><td>High Jump:"+this.highJump+"ft"
boxContents+="</td></tr><tr><td>Long Jump:"+this.longJump+"ft";
boxContents+="</td></tr><tr><td><input onClick='abi=2;abiMod=characters["+this.index+"].dexMod;skillMod=characters["+this.index+"].dexPro;abiRoll("+this.index+")'value='Roll (DEX)terity?' type='button'><input maxLength='2' onChange='characters["+this.index+"].setDex(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.dex+">/<mark>"+this.curDex+"</mark> mod:"+this.dexMod+"+<select onChange='characters["+this.index+"].setDexPro(this.value);checkTheTarget("+this.index+")'><option>"+this.dexPro+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input type='button' value='Roll (Init)iative?'onClick='askInit("+this.index+");checkTheTarget("+this.index+")'>"
boxContents+="</td></tr><tr><td>(Init)ative Bonus:<input maxLength='3' onChange='characters["+this.index+"].setInitBonus(this.value);checkTheTarget("+this.index+")'size='3' type='text' value="+this.initBonus+">/"+this.curIni;
boxContents+="</td></tr><tr><td><input onClick='abi=7;abiMod=characters["+this.index+"].dexMod;skillMod=characters["+this.index+"].petrify;abiRoll("+this.index+")'value='Roll Acrobatics(dex)?'type='button'>+<select onChange='characters["+this.index+"].setPetrify(this.value);checkTheTarget("+this.index+")'><option>"+this.petrify+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=22;abiMod=characters["+this.index+"].dexMod;skillMod=characters["+this.index+"].damageAdjustment;abiRoll("+this.index+")'value='Roll Sleight of Hand(dex)?'type='button'>+<select onChange='characters["+this.index+"].setDamageAdjustment(this.value);checkTheTarget("+this.index+")'><option>"+this.damageAdjustment+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=23;abiMod=characters["+this.index+"].dexMod;skillMod=characters["+this.index+"].stealth;abiRoll("+this.index+")'value='Roll Stealth(dex)?'type='button'>+<select onChange='characters["+this.index+"].setStealth(this.value);checkTheTarget("+this.index+")'><option>"+this.stealth+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>";
boxContents+="</td></tr><tr><td><input onClick='abi=3;abiMod=characters["+this.index+"].conMod;skillMod=characters["+this.index+"].conPro;abiRoll("+this.index+")'value='Roll (CON)stitution?'type='button'><input maxLength='2' onChange='characters["+this.index+"].setCon(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.con+">/<mark>"+this.curCon+"</mark> mod:"+this.conMod+"+<select onChange='characters["+this.index+"].setConPro(this.value);checkTheTarget("+this.index+")'><option>"+this.conPro+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td>Hold Breath:"+(parseInt(this.conMod)+1)+"min"
boxContents+="</td></tr><tr><td>Suffocate:"+parseInt(this.conMod)+"min";
boxContents+="</td></tr><tr><td><input onClick='abi=4;abiMod=characters["+this.index+"].intMod;skillMod=characters["+this.index+"].intPro;abiRoll("+this.index+")'value='Roll (INT)elligence?'type='button'><input maxLength='2' onChange='characters["+this.index+"].setInt(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.inte+">/<mark>"+this.curInt+"</mark> mod:"+this.intMod+"+<select onChange='characters["+this.index+"].setIntPro(this.value);checkTheTarget("+this.index+")'><option>"+this.intPro+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=9;abiMod=characters["+this.index+"].intMod;skillMod=characters["+this.index+"].arcana;abiRoll("+this.index+")'value='Roll Arcana(int)?'type='button'>+<select onChange='characters["+this.index+"].setArcana(this.value);checkTheTarget("+this.index+")'><option>"+this.arcana+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=12;abiMod=characters["+this.index+"].intMod;skillMod=characters["+this.index+"].History;abiRoll("+this.index+")'value='Roll History(int)?'type='button'>+<select onChange='characters["+this.index+"].setRods(this.value);checkTheTarget("+this.index+")'><option>"+this.rods+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=15;abiMod=characters["+this.index+"].intMod;skillMod=characters["+this.index+"].investigation;abiRoll("+this.index+")'value='Roll Investigation(int)?'type='button'>+<select onChange='characters["+this.index+"].setInvestigation(this.value);checkTheTarget("+this.index+")'><option>"+this.investigation+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=17;abiMod=characters["+this.index+"].intMod;skillMod=characters["+this.index+"].nature;abiRoll("+this.index+")'value='Roll Nature(int)?'type='button'>+<select onChange='characters["+this.index+"].setNature(this.value);checkTheTarget("+this.index+")';checkTheTarget("+this.index+")><option>"+this.nature+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=21;abiMod=characters["+this.index+"].intMod;skillMod=characters["+this.index+"].spells;abiRoll("+this.index+")'value='Roll Religion(int)?'type='button'>+<select onChange='characters["+this.index+"].setSpells(this.value);checkTheTarget("+this.index+")'><option>"+this.spells+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>";
boxContents+="</td></tr><tr><td><input onClick='abi=5;abiMod=characters["+this.index+"].wisMod;skillMod=characters["+this.index+"].wisPro;abiRoll("+this.index+")'value='Roll (WIS)dom?'type='button'><input maxLength='2' onChange='characters["+this.index+"].setWis(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.wis+">/<mark>"+this.curWis+"</mark> mod:"+this.wisMod+"+<select onChange='characters["+this.index+"].setWisPro(this.value);checkTheTarget("+this.index+")'><option>"+this.wisPro+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=8;abiMod=characters["+this.index+"].wisMod;skillMod=characters["+this.index+"].animal;abiRoll("+this.index+")'value='Roll Animal Handling(wis)?'type='button'>+<select onChange='characters["+this.index+"].setAnimal(this.value);checkTheTarget("+this.index+")'><option>"+this.animal+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=13;abiMod=characters["+this.index+"].wisMod;skillMod=characters["+this.index+"].insight;abiRoll("+this.index+")'value='Roll Insight(wis)?'type='button'>+<select onChange='characters["+this.index+"].setInsight(this.value);checkTheTarget("+this.index+")'><option>"+this.insight+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=16;abiMod=characters["+this.index+"].wisMod;skillMod=characters["+this.index+"].bendBars;abiRoll("+this.index+")'value='Roll Medicine(wis)?'type='button'>+<select onChange='characters["+this.index+"].setBendBars(this.value);checkTheTarget("+this.index+")'><option>"+this.bendBars+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=18;abiMod=characters["+this.index+"].wisMod;skillMod=characters["+this.index+"].perception;abiRoll("+this.index+")'value='Roll Perception(wis)?'type='button'>+<select onChange='characters["+this.index+"].setPerception(this.value);checkTheTarget("+this.index+")'><option>"+this.perception+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=24;abiMod=characters["+this.index+"].wisMod;skillMod=characters["+this.index+"].missileAdjustment;abiRoll("+this.index+")'value='Roll Survival(wis)?'type='button'>+<select onChange='characters["+this.index+"].setMissileAdjustment(this.value);checkTheTarget("+this.index+")'><option>"+this.missileAdjustment+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select> ";
boxContents+="</td></tr><tr><td><input onClick='abi=6;abiMod=characters["+this.index+"].chaMod;skillMod=characters["+this.index+"].chaPro;abiRoll("+this.index+")'value='Roll (CHA)risma?'type='button'><input maxLength='2' onChange='characters["+this.index+"].setCha(this.value);checkTheTarget("+this.index+")'size='2' type='text' value="+this.cha+">/<mark>"+this.curCha+"</mark> mod:"+this.chaMod+"+<select onChange='characters["+this.index+"].setChaPro(this.value);checkTheTarget("+this.index+")'><option>"+this.chaPro+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=11;abiMod=characters["+this.index+"].chaMod;skillMod=characters["+this.index+"].openDoors;abiRoll("+this.index+")'value='Roll Deception(cha)?'type='button'>+<select onChange='characters["+this.index+"].setOpenDoors(this.value);checkTheTarget("+this.index+")'><option>"+this.openDoors+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=14;abiMod=characters["+this.index+"].chaMod;skillMod=characters["+this.index+"].intimidation;abiRoll("+this.index+")'value='Roll Intimidation(cha)?'type='button'>+<select onChange='characters["+this.index+"].setIntimidation(this.value);checkTheTarget("+this.index+")'><option>"+this.intimidation+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=19;abiMod=characters["+this.index+"].chaMod;skillMod=characters["+this.index+"].breath;abiRoll("+this.index+")'value='Roll Performance(cha)?'type='button'>+<select onChange='characters["+this.index+"].setBreath(this.value);checkTheTarget("+this.index+")'><option>"+this.breath+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>"
boxContents+="</td></tr><tr><td><input onClick='abi=20;abiMod=characters["+this.index+"].chaMod;skillMod=characters["+this.index+"].attackAdjustment;abiRoll("+this.index+")'value='Roll Persuasion(cha)?'type='button'>+<select onChange='characters["+this.index+"].setAttackAdjustment(this.value);checkTheTarget("+this.index+")'><option>"+this.attackAdjustment+"</option><option></option><option>pro</option><option>exp</option><option>Untrained+0</option><option>Trained+2</option><option>Expert+4</option><option>Master+6</option><option>Legendary+8</option></select>";
boxContents+="</td></tr><tr><td>Racial Abilility Increases:<input maxLength='200' onChange='characters["+this.index+"].setAbility(this.value);checkTheTarget("+this.index+")' size='30' value=' "+this.ability+"'>";
boxContents+="</td></tr><tr><td>Background <b>Skills:</b> <input maxLength='200' onChange='characters["+this.index+"].setBackS(this.value);checkTheTarget("+this.index+")' size='30' value=' "+this.backS+"'>";
boxContents+="<br>Class Skills:<input maxLength='200' onChange='characters["+this.index+"].setSkills(this.value);checkTheTarget("+this.index+")' size='30' value=' "+this.skills+"'>";
boxContents+="</td></tr><tr><td>Class <b>Saving Throws:</b> <input maxLength='200' onChange='characters["+this.index+"].setSaving(this.value);checkTheTarget("+this.index+")' size='30' value=' "+this.saving+"'>";

boxContents+="</td></tr></table></span></td><td><span id=toggled5"+this.index+" style='display:"+this.toggled5+"'>";

boxContents+="<table><tr><td>"

boxContents+="<a href='https://tetra-cube.com/dnd/dnd-char-gen.html' target='_blank'>Tetra-Cube.Com's Random Personality Generator</a>";
boxContents+="</td></tr><tr><td>Background:<select onChange='characters["+this.index+"].setBackground(this.value)'><option>"+this.background+"<option>Acolyte<option>Charlatan<option>City Investigator<option>City Watch<option>Cloistered Scholar<option>Courtier<option>Criminal, Blackmailer<option>Criminal, Burglar<option>Criminal, Enforcer<option>Criminal, Fence<option>Criminal, Highway Robber<option>Criminal, Hired Killer<option>Criminal, Pickpocket<option>Criminal, Smuggler<option>Criminal, Spy<option>Entertainer, Actor<option>Entertainer, Dancer<option>Entertainer, Fire-Eater<option>Entertainer, Gladiator<option>Entertainer, Instrumentalist<option>Entertainer, Jester<option>Entertainer, Juggler<option>Entertainer, Poet<option>Entertainer, Singer<option>Entertainer, Storyteller<option>Entertainer, Tumbler<option>Faction Agent<option>Folk Hero, Farmer<option>Guild, Alchemist<option>Guild, Brewer<option>Guild, Calligrapher<option>Guild, Carpenter<option>Guild, Cartographer<option>Guild, Cobbler<option>Guild, Cook<option>Guild Crafter<option>Guild, Glassblower<option>Guild, Jeweler<option>Guild, Leatherworker<option>Guild, Mason<option>Guild, Painter<option>Guild, Potter<option>Guild, Smith<option>Guild, Tinker<option>Guild, Weaver<option>Guild, or Woodcarver<option>Hermit<option>Noble, Knight<option>Noble, Retainer<option>Outlander, Bounty Hunter<option>Outlander, Exile<option>Outlander, Forester<option>Outlander, Guide<option>Outlander, Homesteader<option>Outlander, Hunter-Gatherer<option>Outlander, Pilgrim<option>Outlander, Trapper<option>Outlander, Tribal Marauder<option>Outlander, Tribal Nomad<option>Sage, Alchemist<option>Sage, Astronomer<option>Sage, Discredited Academic<option>Sage, Librarian<option>Sage, Professor<option>Sage, Researcher<option>Sage, Scribe<option>Sage, Wizard Apprentice<option>Sailor, Cartographer<option>Sailor, Pirate<option>Soldier, Cavalry<option>Soldier, Healer<option>Soldier, Infantry<option>Soldier, Officer<option>Soldier, Quartermaster<option>Soldier, Scout<option>Urchin</select>";
boxContents+="</td></tr><tr><td><input maxLength='200' onChange='characters["+this.index+"].setBackground(this.value)' placeHolder='other background' size='30' type='text'>";
boxContents+="</td></tr><tr><td>Background Features:<input maxLength='200' onChange='characters["+this.index+"].setBackF(this.value)' size='30' type='text' value=' "+this.backF+"'>";
boxContents+="</td></tr><tr><td>Bonds:<textArea cols='30' rows='3' onChange='characters["+this.index+"].setBonds(this.value)'>"+this.bonds+"</textArea>";
boxContents+="</td></tr><tr><td>Flaws:<textArea cols='30' rows='3' onChange='characters["+this.index+"].setFlaws(this.value)'>"+this.flaws+"</textArea>";
boxContents+="</td></tr><tr><td>Ideals:<textArea cols='30' rows='3' onChange='characters["+this.index+"].setIdeals(this.value)'>"+this.ideals+"</textArea>";
boxContents+="</td></tr><tr><td>Feats:<textArea cols='30' rows='3' onChange='characters["+this.index+"].setFeats(this.value)'>"+this.feats+"</textArea>";

boxContents+="</td></tr></table></span></td><td><span id=toggled6"+this.index+" style='display:"+this.toggled6+"'>";

boxContents+="<table><tr><td>"

boxContents+="</td></tr><tr><td>Class Features:"+this.features+"";
boxContents+="</td></tr></table></span></span>"
this.box.setContents(boxContents);
}
function _refresh(){document.getElementById(this.elementId).innerHTML=this.contents;
}
function _rollInit(){return d(20)+parseInt(this.curIni)+parseInt(this.sit)}
function _save(){toSave=this.getSaveText();showSavePrompt(this.name, toSave)}
function _setAbility(x){this.ability=x;
this.refresh()}
function _setAC(x){this.ac=x;
this.curAc=x;
this.refresh()}
function _setFortitude(x){this.fortitude=x;
this.curFortitude=x;
this.refresh()}
function _setReflex(x){this.reflex=x;
this.curReflex=x;
this.refresh()}
function _setWill(x){this.will=x;
this.curWill=x;
this.refresh()}
function _setAlignment(x){this.alignment=x;
this.setAlignmentDescription(x);
if(this.alignment.match(/Neutral/i)){this.setAlignmentDescription("I will help others, but avoid serious personal risks or loyalties that don\'t benefit me.")}
if(this.alignment.match(/Chaotic Evil/i)){this.setAlignmentDescription("I violently follow my greed, hatred, or bloodlust, promoting my own freedom and control over others.")}
if(this.alignment.match(/Chaotic Good/i)){this.setAlignmentDescription("I follow my conscience regardless of others\' expectations. Freedom and compassion matter more than rules.")}
if(this.alignment.match(/Chaotic Neutral/i)){this.setAlignmentDescription("I follow my shifting whims with little concern about rules or later consequences.")}
if(this.alignment.match(/Lawful Evil/i)){this.setAlignmentDescription("I take what I want up to the maximum allowed by law or loyalty, promoting order and control over others.")}
if(this.alignment.match(/Lawful Good/i)){this.setAlignmentDescription("I do what s right as expected by society to promote order and compassion for all.")}
if(this.alignment.match(/Lawful Neutral/i)){this.setAlignmentDescription("I obey laws, traditions or my own strict code to promote order and society above all else.")}
if(this.alignment.match(/Neutral Evil/i)){this.setAlignmentDescription("I lack compassion and do whatever I want, promoting control over others above all else.")}
if(this.alignment.match(/Neutral Good/i)){this.setAlignmentDescription("I help others according to their needs and promote compassion above all else.")}
if(this.alignment.match(/Unaligned/i)){this.setAlignmentDescription("I act according to my instinct to survive and nurture my young.")}
this.refresh()}
function _setAlignmentDescription(x){this.alignmentDescription=x;
this.refresh()}
function _setArmor(x){this.armor=x;
this.refresh()}
function _setBackground(x){this.background=x;
if(this.background.match(/Acolyte/)){this.setBackF('Shelter of the Faithful');
this.setBackL('2 languages');
this.setBackS('Insight, Religion');
this.setBackT('')}
if(this.background.match(/City Investigator/)){this.setBackF('(Watchere s Eye)understand laws, posts and criminal guilds of any place');
this.setBackL('any 2');
this.setBackS('Athletics, Investigation');
this.setBackT('Uniform, Horn summoning help, Manacles, 10GP')}
if(this.background.match(/City Watch/)){this.setBackF('(Watchere s Eye)understand laws, posts and criminal guilds of any place');
this.setBackL('any 2');
this.setBackS('Athletics, Insight');
this.setBackT('Uniform, Horn summoning help, Manacles, 10GP')}
if(this.background.match(/Charlatan/)){this.setBackF('False Identity, Favorite Schemes');
this.setBackL('');
this.setBackS('Deception, Sleight of Hand');
this.setBackT('Disguise Kit, Forgery Kit')}
if(this.background.match(/Cloistered Scholar/)){this.setBackF('(Library Access)preferential treatment accessing lore');
this.setBackL('any 2');
this.setBackS('History and 1 from Arcana, Nature, Religion');
this.setBackT('Scholar Robes, Writing Kit, Borrowed book on current study, 10GP')}
if(this.background.match(/Courtier/)){this.setBackF('(Courtfunctionary)bureaucracy, access to records, current government interests and intrigues');
this.setBackL('any 2');
this.setBackS('Insight, Persuasion');
this.setBackT('Fine Clothes, 5GP')}
if(this.background.match(/Guild Crafter/)){this.setBackF('(Respect of the Craft Folk)finest free room and board among crafters');
this.setBackL('Dwarvish or 1 language');
this.setBackS('History, Insight');
this.setBackT('Traveler Clothes, 5GP, Gem of 10GP')}
if(this.background.match(/Criminal, Spy/)){this.setBackF('Criminal Contact, Criminal Specialty');
this.setBackL('');
this.setBackS('Deception, Stealth');
this.setBackT('1 from Cards, Darts, Dice, or Dragonchess, Thieves Tools')}
if(this.background.match(/Criminal/)){this.setBackF('Criminal Contact, Criminal Specialty');
this.setBackL('');
this.setBackS('Deception, Stealth');
this.setBackT('1 from Cards, Darts, Dice, or Dragonchess, Thieves Tools')}
if(this.background.match(/Entertainer/)){this.setBackF('Entertainer Routines, By Popular Demand');
this.setBackL('');
this.setBackS('Acrobatics, Performance');
this.setBackT('Disguise Kit, 1 musical instrument')}
if(this.background.match(/Faction Agent/)){this.setBackF('(Courtfunctionary)bureaucracy, access to records, current government interests and intrigues');
this.setBackL('any 2');
this.setBackS('Insight and 1 int wis or cha based skill');
this.setBackT('Badge of faction, code book, common clothes, 15GP')}
if(this.background.match(/Far Traveler/)){this.setBackF('');
this.setBackL('1 language');
this.setBackS('Insight, Perception');
this.setBackT('traveler clothes 1 musical instrument or gaming set, maps jewelry of 10GP, 5GP')}
if(this.background.match(/Folk/)){this.setBackF('Defining Event, Rustic Hospitality');
this.setBackL('');
this.setBackS('Animal Handling, Survival');
this.setBackT('Artisan Tools 1 from Alchemist, Brewer, Calligrapher, Carpenter, Cartographer, Cobbler, Cook, Glassblower, Jeweler, Leatherworker, Mason, Painter, Potter, Smith, Tinker, Weaver, or Woodcarver, Land Vehicles')}
if(this.background.match(/Guild/)){this.setBackF('Guild Business, Guild Membership');
this.setBackL('1 language');
this.setBackS('Insight, Persuasion');
this.setBackT('Artisan Tools 1 from Alchemist, Brewer, Calligrapher, Carpenter, Cartographer, Cobbler, Cook, Glassblower, Jeweler, Leatherworker, Mason, Painter, Potter, Smith, Tinker, Weaver, or Woodcarver')}
if(this.background.match(/Hermit/)){this.setBackF('Life of Seclusion, Discovery');
this.setBackL('1 language');
this.setBackS('Medicine, Religion');
this.setBackT('Herbalism Kit')}
if(this.background.match(/Noble/)){this.setBackF('Position of Privilege');
this.setBackL('1 language');
this.setBackS('History, Persuasion');
this.setBackT('1 from Cards, Darts, Dice, or Dragonchess')}
if(this.background.match(/Outlander/)){this.setBackF('Origin, Wanderer');
this.setBackL('1 language');
this.setBackS('Athletics, Survival');
this.setBackT('1 musical instrument')}
if(this.background.match(/Sage/)){this.setBackF('Specialty, Researcher');
this.setBackL('2 languages');
this.setBackS('Arcana, History');
this.setBackT('')}
if(this.background.match(/Sailor/)){this.setBackF('Ship s Passage');
this.setBackL('');
this.setBackS('Athletics, Perception');
this.setBackT('Navigator Tools, Vehicles(Water)')}
if(this.background.match(/Soldier/)){this.setBackF('Specialty, Military Rank');
this.setBackL('');
this.setBackS('Athletics, Intimidation');
this.setBackT('1 from Cards, Darts, Dice, or Dragonchess, Vehicles(Land)')}
if(this.background.match(/Urchin/)){this.setBackF('City Secrets');
this.setBackL('');
this.setBackS('Sleight of Hand, Stealth');
this.setBackT('Disguise Kit, Thieves Tools')}
this.refresh()}
function _setBackF(x){this.backF=x;
this.refresh()}
function _setBackL(x){this.backL=x;
this.refresh()}
function _setBackS(x){this.backS=x;
this.refresh()}
function _setBackT(x){this.backT=x;
this.refresh()}
function _setBonds(x){this.bonds=x;
this.bonds=this.bonds.replace(/\'/g, '');
this.refresh()}
function _setCha(x){this.cha=x;
this.curCha=x;calcMod(x);
this.chaMod=mod;
if(this.spellAbility==='int'){this.setSpellAbilityNumber(this.intMod)}
if(this.spellAbility==='wis'){this.setSpellAbilityNumber(this.wisMod)}
if(this.spellAbility==='cha'){this.setSpellAbilityNumber(this.chaMod)}
this.refresh()}
function _setClass(x){this.class=x;this.refresh()}

function _setCombatLog(x){this.combatLog=x;
this.refresh()}
function _setCon(x){this.con=x;
this.curCon=x;calcMod(x);
this.conMod=mod;
this.setClass(this.class);
this.refresh()}
function _setContents(newContents){this.contents=newContents;
this.refresh()}
function _setCurAc(x){this.curAc=x;
this.refresh()}
function _setCurCon(x){this.curCon=x;calcMod(x);
this.conMod=mod;
this.refresh()}
function _setCurCha(x){this.curCha=x;calcMod(x);
this.chaMod=mod;
this.refresh()}
function _setCurDex(x){this.curDex=x;calcMod(x);
this.dexMod=mod;
this.refresh()}
function _setCurIni(x){this.curIni=x;
this.refresh()}
function _setCurInt(x){this.curInt=x;calcMod(x);
this.intMod=mod;
this.refresh()}
function _setCurStr(x){this.curStr=x;calcMod(x);
this.strMod=mod;
if(this.size.match(/Tiny/)){this.carryingCapacity=((this.curStr / 1)*15)/ 2;
this.dragLiftPush=((this.curStr / 1)*30)/ 2;
this.highJump=Math.floor(((this.strMod / 1)+3)/ 2);
this.longJump=Math.floor((this.curStr / 1)/ 2)}
if(this.size.match(/Small|Medium/)){this.carryingCapacity=(this.curStr / 1)*15;
this.dragLiftPush=(this.curStr / 1)*30;
this.highJump=Math.floor((this.strMod / 1)+3);
this.longJump=Math.floor(this.curStr / 1)}
if(this.size.match(/Large/)){this.carryingCapacity=((this.curStr / 1)*15)*2;
this.dragLiftPush=((this.curStr / 1)*30)*2;
this.highJump=Math.floor(((this.strMod / 1)+3)*2);
this.longJump=Math.floor((this.curStr / 1)*2)}
if(this.size.match(/Huge/)){this.carryingCapacity=((this.curStr / 1)*15)*4;
this.dragLiftPush=((this.curStr / 1)*30)*4;
this.highJump=Math.floor(((this.strMod / 1)+3)*4);
this.longJump=Math.floor((this.curStr / 1)*4)}
if(this.size.match(/Gargantuan/)){this.carryingCapacity=((this.curStr / 1)*15)*6;
this.dragLiftPush=((this.curStr / 1)*30)*6;
this.highJump=Math.floor(((this.strMod / 1)+3)*6);
this.longJump=Math.floor((this.curStr / 1)*6)}
this.refresh()}
function _setCurWis(x){this.curWis=x;calcMod(x);
this.wisMod=mod;
this.refresh()}
function _setDmg(x){this.curHp -=x;
if(this.curHp< -this.maxHp){this.curHp=-this.maxHp
}
this.refresh()}
function _setDamageConditions(x){this. dmgConditions=x;
if(changedStr=this. dmgConditions.match(/(str)(\+\d{1,2}|\-\d{1,2})/i)){this.setCurStr(parseInt(this.str)+parseInt(changedStr[2]))}
else
{this.setCurStr(parseInt(this.str))}
if(changedDex=this. dmgConditions.match(/(dex)(\+\d{1,2}|\-\d{1,2})/i)){this.setCurDex(parseInt(this.dex)+parseInt(changedDex[2]))}
else
{this.setCurDex(parseInt(this.dex))}
if(changedCon=this. dmgConditions.match(/(con)(\+\d{1,2}|\-\d{1,2})/i)){this.setCurCon(parseInt(this.con)+parseInt(changedCon[2]))}
else
{this.setCurCon(parseInt(this.con))}
if(changedInt=this. dmgConditions.match(/(int)(\+\d{1,2}|\-\d{1,2})/i)){this.setCurInt(parseInt(this.inte)+parseInt(changedInt[2]))}
else
{this.setCurInt(parseInt(this.inte))}
if(changedHp=this. dmgConditions.match(/(hp)(\+\d{1,3}|\-\d{1,3})/i)){this.setTempHp(parseInt(changedHp[2]))}
else
{this.setTempHp(parseInt(0))}
if(changedWis=this. dmgConditions.match(/(wis)(\+\d{1,2}|\-\d{1,2})/i)){this.setCurWis(parseInt(this.wis)+parseInt(changedWis[2]))}
else
{this.setCurWis(parseInt(this.wis))}
if(changedCha=this. dmgConditions.match(/(cha)(\+\d{1,2}|\-\d{1,2})/i)){this.setCurCha(parseInt(this.cha)+parseInt(changedCha[2]))}
else
{this.setCurCha(parseInt(this.cha))}
if(changedAc=this. dmgConditions.match(/(ac)(\+\d{1,2}|\-\d{1,2})/i)){this.setCurAc(parseInt(this.ac)+parseInt(changedAc[2]))}
else
{this.setCurAc(parseInt(this.ac))}
if(changedIni=this. dmgConditions.match(/(ini)(\+\d{1,2}|\-\d{1,2})/i)){newIni=parseInt(this.initBonus)+parseInt(changedIni[2]);
if(newIni> -1){newIni="+"+newIni
}
this.setCurIni(newIni)}
else
{this.setCurIni(this.initBonus)}
this.refresh()}
function _setDex(x){this.dex=x;
this.curDex=x;calcMod(x);
this.dexMod=mod;
this.initBonus=mod;
this.curIni=mod;
this.refresh()}
function _setEquipment(x){this.equipment=x;
this.equipment=this.equipment.replace(/\'/g, ' ');
this.equipment=this.equipment.replace(/\./g, '\n');
this.refresh()}

let rotation=0;
function _setRotation(x)
{
this.rotation += 90;
if(this.rotation === 360){this.rotation === 0};
document.getElementById('rotated'+[x]+'').style.transform='rotate('+this.rotation+'deg)';
}

function _setExperience(x){this.experience=x;
this.refresh(x)}
function _setFeats(x){this.feats=x;
this.feats=this.feats.replace(/\'/g, '');
this.refresh(x)}
function _setFeatures(x){this.features=x;
this.features=this.features.replace(/\'/g, '\'');
this.features=this.features.replace(/\s+/g, ' ');
this.features=this.features.replace(/\./g, '\.\n');
this.refresh()}
function _setFeatureNotes(x){this.featureNotes=x;
this.featureNotes=this.featureNotes.replace(/\'|\s+/g, ' ');
this.featureNotes=this.featureNotes.replace(/\./g, '\.\n');
this.refresh()}
function _setActionNotes(x){this.actionNotes=x;
this.actionNotes=this.actionNotes.replace(/\'|\s+/g, ' ');
this.actionNotes=this.actionNotes.replace(/\./g, '\.\n');
this.refresh()}
function _setFigure(x){this.figure=x;
this.refresh(x)}
function _setFlaws(x){this.flaws=x;
this.flaws=this.flaws.replace(/\'/g, ' ');
this.refresh(x)}
function _setHealing(x){this.curHp=(x / 1+this.curHp);
if(this.curHp>this.maxHp){this.curHp=this.maxHp
}
this.refresh()}
function _setHitDice(x){this.hitDice=x;
this.refresh(x)}
function _setIdeals(x){this.ideals=x;
this.ideals=this.ideals.replace(/\'/g, ' ');
this.refresh(x)}
function _setImmunity(x){this.immunity=x;
this.refresh(x)}
function _setInit(x){this.init=x;
this.refresh(x)}
function _setIndex(x){this.index=x
}
function _setInitBonus(x){this.initBonus=x;
this.curIni=x;
this.refresh()}
function _setStrPro(x){this.strPro=x;
this.refresh(x)}
function _setDexPro(x){this.dexPro=x;
this.refresh(x)}
function _setConPro(x){this.conPro=x;
this.refresh(x)}
function _setIntPro(x){this.intPro=x;
this.refresh(x)}
function _setWisPro(x){this.wisPro=x;
this.refresh(x)}
function _setChaPro(x){this.chaPro=x;
this.refresh(x)}
function _setPetrify(x){this.petrify=x;
this.refresh(x)}
function _setParalysis(x){this.paralysis=x;
this.refresh(x)}
function _setAnimal(x){this.animal=x;
this.refresh(x)}
function _setArcana(x){this.arcana=x;
this.refresh(x)}
function _setOpenDoors(x){this.openDoors=x;
this.refresh(x)}
function _setRods(x){this.rods=x;
this.refresh(x)}
function _setInsight(x){this.insight=x;
this.refresh(x)}
function _setIntimidation(x){this.intimidation=x;
this.refresh(x)}
function _setInvestigation(x){this.investigation=x;
this.refresh(x)}

function _setMaxSlot1(x){this.maxSlot1=x;this.curSlot1=this.maxSlot1;this.refresh(x);}
function _setCurSlot1(x){this.curSlot1=x;this.refresh(x);}
function _setMaxSlot2(x){this.maxSlot2=x;this.curSlot2=this.maxSlot2;this.refresh(x);}
function _setCurSlot2(x){this.curSlot2=x;this.refresh(x);}
function _setMaxSlot3(x){this.maxSlot3=x;this.curSlot3=this.maxSlot3;this.refresh(x);}
function _setCurSlot3(x){this.curSlot3=x;this.refresh(x);}
function _setMaxSlot4(x){this.maxSlot4=x;this.curSlot4=this.maxSlot4;this.refresh(x);}
function _setCurSlot4(x){this.curSlot4=x;this.refresh(x);}
function _setMaxSlot5(x){this.maxSlot5=x;this.curSlot5=this.maxSlot5;this.refresh(x);}
function _setCurSlot5(x){this.curSlot5=x;this.refresh(x);}
function _setMaxSlot6(x){this.maxSlot6=x;this.curSlot6=this.maxSlot6;this.refresh(x);}
function _setCurSlot6(x){this.curSlot6=x;this.refresh(x);}
function _setMaxSlot7(x){this.maxSlot7=x;this.curSlot7=this.maxSlot7;this.refresh(x);}
function _setCurSlot7(x){this.curSlot7=x;this.refresh(x);}
function _setMaxSlot8(x){this.maxSlot8=x;this.curSlot8=this.maxSlot8;this.refresh(x);}
function _setCurSlot8(x){this.curSlot8=x;this.refresh(x);}
function _setMaxSlot9(x){this.maxSlot9=x;this.curSlot9=this.maxSlot9;this.refresh(x);}
function _setCurSlot9(x){this.curSlot9=x;this.refresh(x);}

function _setBendBars(x){this.bendBars=x;
this.refresh(x)}
function _setNature(x){this.nature=x;
this.refresh(x)}
function _setPerception(x){this.perception=x;
this.refresh(x)}
function _setBreath(x){this.breath=x;
this.refresh(x)}
function _setAttackAdjustment(x){this.attackAdjustment=x;
this.refresh(x)}
function _setSpells(x){this.spells=x;
this.refresh(x)}
function _setDamageAdjustment(x){this.damageAdjustment=x;
this.refresh(x)}
function _setStealth(x){this.stealth=x;
this.refresh(x)}
function _setMissileAdjustment(x){this.missileAdjustment=x;
this.refresh(x)}
function abiRoll(x)
{skillMod='+0';skillModName="no pro";
if(abi===1){abi='str';abiMod=characters[x].strMod;
if(characters[x].strPro==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].strPro==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===2){abi='dex';abiMod=characters[x].dexMod;
if(characters[x].dexPro==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].dexPro==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===3){abi='con';abiMod=characters[x].conMod;
if(characters[x].conPro==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].conPro==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===4){abi='int';abiMod=characters[x].intMod;
if(characters[x].intPro==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].intPro==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===5){abi='wis';abiMod=characters[x].wisMod;
if(characters[x].wisPro==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].wisPro==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===6){abi='cha';abiMod=characters[x].chaMod;
if(characters[x].chaPro==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].chaPro==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===7){abi='Acrobatics(dex)';abiMod=characters[x].dexMod;
if(characters[x].petrify==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].petrify==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
else if(characters[x].petrify==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].petrify==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].petrify==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].petrify==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].petrify==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===8){abi='Animal Handling(wis)';abiMod=characters[x].wisMod;
if(characters[x].animal==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].animal==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===9){abi='Arcana(Int)';abiMod=characters[x].intMod;
if(characters[x].arcana==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].arcana==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
else if(characters[x].arcana==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].arcana==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].arcana==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].arcana==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].arcana==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===10){abi='Athletics(str)';abiMod=characters[x].strMod;
if(characters[x].paralysis==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].paralysis==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].paralysis==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].paralysis==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].paralysis==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].paralysis==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].paralysis==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===11){abi='Deception(cha)';abiMod=characters[x].chaMod;
if(characters[x].openDoors==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].openDoors==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].openDoors==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].openDoors==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].openDoors==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].openDoors==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].openDoors==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===12){abi='History(Int)';abiMod=characters[x].intMod;
if(characters[x].rods==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].rods==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===13){abi='Insight(wis)';abiMod=characters[x].wisMod;
if(characters[x].insight==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].insight==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===14){abi='Intimidation(cha)';abiMod=characters[x].chaMod;
if(characters[x].intimidation==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].intimidation==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].intimidation==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].intimidation==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].intimidation==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].intimidation==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].intimidation==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===15){abi='Investigation(Int)';abiMod=characters[x].intMod;
if(characters[x].investigation==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].investigation==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===16){abi='Medicine(wis)';abiMod=characters[x].wisMod;
if(characters[x].bendBars==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].bendBars==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].bendBars==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].bendBars==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].bendBars==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].bendBars==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].bendBars==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===17){abi='Nature(Int)';abiMod=characters[x].intMod;
if(characters[x].nature==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].nature==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].nature==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].nature==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].nature==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].nature==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].nature==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===18){abi='Perception(wis)';abiMod=characters[x].wisMod;
if(characters[x].perception==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].perception==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===19){abi='Performance(cha)';abiMod=characters[x].chaMod;
if(characters[x].breath==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].breath==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].breath==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].breath==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].breath==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].breath==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].breath==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===20){abi='Persuasion(cha)';abiMod=characters[x].chaMod;
if(characters[x].attackAdjustment==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].attackAdjustment==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===21){abi='religion(Int)';abiMod=characters[x].intMod;
if(characters[x].spells==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].spells==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].spells==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].spells==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].spells==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].spells==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].spells==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===22){abi='Sleight of Hand(dex)';abiMod=characters[x].dexMod;
if(characters[x].damageAdjustment==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].damageAdjustment==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"
}
}
if(abi===23){abi='Stealth(dex)';abiMod=characters[x].dexMod;
if(characters[x].stealth==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].stealth==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].arcana==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].stealth==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].stealth==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].stealth==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].stealth==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
if(abi===24){abi='Survival(wis)';abiMod=characters[x].wisMod;
if(characters[x].missileAdjustment==="pro"){skillMod=characters[x].pro;skillModName="pro"
}else if(characters[x].missileAdjustment==='exp'){skillMod='+'+characters[x].pro*2;skillModName="exp"}
else if(characters[x].missileAdjustment==='Untrained+0'){skillMod='+0';skillModName="Untrained+0"
}
else if(characters[x].missileAdjustment==='Trained+2'){skillMod='+2';skillModName="Trained+2"
}
else if(characters[x].missileAdjustment==='Expert+4'){skillMod='+4';skillModName="Expert+4"
}
else if(characters[x].missileAdjustment==='Master+6'){skillMod='+6';skillModName="Master+6"
}
else if(characters[x].missileAdjustment==='Legendary+8'){skillMod='+8';skillModName="Legendary+8"
}
}
D20Roll1=parseInt(rollDForm('1d20+0'));
D20NaturalRoll1=naturalRoll;
D20RollModifier1=roll;
D20Roll2=parseInt(rollDForm('1d20+0'));
D20NaturalRoll2=naturalRoll;
D20RollModifier2=roll;
abilityCheckRollTotal1=D20Roll1+parseInt(abiMod)+parseInt(skillMod)+parseInt(characters[x].sit);
abilityCheckRollTotal2=D20Roll2+parseInt(abiMod)+parseInt(skillMod)+parseInt(characters[x].sit);
AbiCheckLog=""+characters[x].name+" s<br>Ability Check<br>or Skill Check<br>or Saving Throw</td></tr><tr><td><h3>Roll 1</h3>1d20+0<br>="+D20NaturalRoll1+" natural<br>"+D20RollModifier1+" modifier<br>="+D20Roll1+"<br>"+abiMod+" "+abi+"<br>"+skillMod+" "+skillModName+"<br>"+characters[x].sit+" sit<br>="+abilityCheckRollTotal1+"</td></tr><tr><td><h3>Roll 2</h3>1d20+0<br>="+D20NaturalRoll2+" natural<br>"+D20RollModifier2+" modifier<br>="+D20Roll2+"<br>"+abiMod+" "+abi+"<br>"+skillMod+" "+skillModName+"<br>"+characters[x].sit+" sit<br>="+abilityCheckRollTotal2;
characters[x].setCombatLog(AbiCheckLog);
}
function _setInt(x){this.inte=x;
this.curInt=x;calcMod(x);
this.intMod=mod;
if(this.spellAbility==='int'){this.setSpellAbilityNumber(this.intMod)}
if(this.spellAbility==='wis'){this.setSpellAbilityNumber(this.wisMod)}
if(this.spellAbility==='cha'){this.setSpellAbilityNumber(this.chaMod)}
this.refresh()}
function _setLanguages(x){this.languages=x;
this.refresh()}
function _setMaxHp(x){this.maxHp=x;
this.curHp=x;
this.refresh()}
function _setCurHp(x){this.curHp=x;
if(this.curHp< -this.maxHp){this.curHp=-this.maxHp
}
if(this.curHp>this.maxHp){this.curHp=this.maxHp
}
this.refresh()}
function _setTempHp(x){this.tempHp=x;
this.refresh()}
function _setName(name){this.name=name;
this.refresh()}
function _setPro(x){this.pro=x;
this.refresh()}
function _setProficiencies(x){this.proficiencies=x;
this.refresh()}
function _setProficienciesRace(x){this.proficienciesRace=x;
this.trait=this.trait.replace(/\'/g, '\'');
this.refresh()}
function _setRace(x){this.race=x;
if(this.race.match(/Aasimar/)){this.setLanguages('Common, Celestial');
this.setResistance('necrotic, radiant');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('age 60-160yrs, Humanoid, hair color red, blonde, brown, black, or silver, eye color pale white, gold, gray, or topaz, skin color pale-dark brown, emerald, gold, silver, male height 150–220 cm, female height 140–210 cm, male weight 56.2–127 kg, female weight 40.4–111 kg, homeland Prime Material, Plane, or Celestial Planes');
if(this.race.match(/Protector/)){this.setAbility('wis+1, cha+2');
this.setProficienciesRace('Healing Hands:1/1/long rest, heal self or ally,lvlin hp, Light cha, Radiant Soul:,@3rd fly 30ft 1min, deal your,lvlxtra radiant dmg,1tgt each turn, 1/1/long rest')}
if(this.race.match(/Scourge/)){this.setAbility('con+1, cha+2');
this.setProficienciesRace('Healing Hands:1/1/long rest, heal self or ally,lvlin hp, Light cha, Radiant Consumption:,@3rd lvl, 1act,1min or bonus end, 10ft rad bright light and 10ft dim light chosen tgts take your,lvlradiant dmg each turn')}
if(this.race.match(/Fallen/)){this.setAbility('str+1, cha+2');
this.setProficienciesRace('Healing Hands:1/1/long rest, heal self or ally,lvlin hp, Light cha, Necrotic Shroud:,@3rd tgts 10ft-radi cha vsCha or frightened utteo your nt, deal xtra necrotic dmg to,1tgt per turn, 1min or 1 bonus end 1/1/long rest')}
}
if(this.race.match(/Bugbear/)){this.setAbility('str+2, dex+1');
this.setActionNotes('(Long-Limbed)melee atk+5ft, (Suprise atk)1/1,1tgt 1st turn+2d6 dmg');
this.setAlignment('Chaotic Evil');
this.setLanguages('Common, Goblin');
this.setProficienciesRace('Stealth+pro');
this.setResistance('');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('16-80 yrs old('+(16+parseInt(rollDForm('1d64+0')))+'yrs old), 6ft tall+2d12in('+(6.0+(parseInt(rollDForm('2d12+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 200lbs+2d6('+(parseInt(200)+parseInt(rollDForm('2d6+0')))+'lbs)')}
if(this.race.match(/Dragonborn/))
{this.setAbility('str+2, cha+1');
this.setLanguages('Common, Draconic');
this.setResistance('Acid');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
if(this.race.match(/Dragonborn,Black/))
{this.setProficienciesRace('(Breath wpn)(Black)1d6 Acid 5x30ft-lineDC8+"+characters[targeted].spellAbility+"+pro vsDex for half')}
if(this.race.match(/Dragonborn,Blue/))
{this.setProficienciesRace('(Breath wpn)(Blue)Lightning 5x30ft-lineDC8+"+characters[targeted].spellAbility+"+pro vsDex for half')}
if(this.race.match(/Dragonborn,Brass/))
{this.setProficienciesRace('(Breath wpn)(Brass)Fire 5x30ft-lineDC8+"+characters[targeted].spellAbility+"+pro vsDex for half(Bronze)Lightning 5x30ft-lineDC8+"+characters[targeted].spellAbility+"+pro vsDex for half')}
if(this.race.match(/Dragonborn,Bronze/))
{this.setProficienciesRace('(Breath wpn)(Bronze)Lightning 5x30ft-lineDC8+"+characters[targeted].spellAbility+"+pro vsDex for half')}
if(this.race.match(/Dragonborn,Copper/))
{this.setProficienciesRace('(Breath wpn)(Copper)Acid 5x30ft-lineDC8+"+characters[targeted].spellAbility+"+pro vsDex for half')}
if(this.race.match(/Dragonborn,Gold/))
{this.setProficienciesRace('(Breath wpn)(Gold)Fire 15ft-coneDC8+"+characters[targeted].spellAbility+"+pro vsDex for half')}
if(this.race.match(/Dragonborn,Green/))
{this.setProficienciesRace('(Breath wpn)(Green)Poison 15ft-cone vsCon for half')}
if(this.race.match(/Dragonborn,Red/))
{this.setProficienciesRace('(Breath wpn)(Red)Fire 15ft-coneDC8+"+characters[targeted].spellAbility+"+pro vsDex for half(Silver)Cold 15ft-cone vsCon for half')}
if(this.race.match(/Dragonborn,Silver/))
{this.setProficienciesRace('(Breath wpn)(Silver)Cold 15ft-cone vsCon for half')}
if(this.race.match(/Dragonborn,White/))
{this.setProficienciesRace('(Breath wpn)(White)Cold 15ft-cone vsCon for half+1d6,@6th, 11th, 16th lvl, 1-80 years old, 250 lbs., 6+feet tall')}
}

if(this.race.match(/Dwarf,\sHill/)){this.setAbility('con+2, wis+1');
this.setLanguages('Common, Dwarvish');
this.setProficienciesRace('battleaxe, handaxe, light hammer, warhammer, smith or brewer or Mason Tools, (Stonecunning)History+exp re the details of stone work age and construction');
this.setResistance('(Dwarven Resilience)resist poison 1/2 dmg save vs poison@Adv');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('25ft');
this.setTrait('(Dwarven Toughness)when lvling up, hp+1hp, 1-350 years old, 150 lbs., 4-5fttall')}
if(this.race.match(/Dwarf,\sMountain/)){this.setAbility('str+2, con+2');
this.setLanguages('Common, Dwarvish');
this.setProficienciesRace('light armor, medium armor, battleaxes, handaxes, light hammers, and warhammers, smith or brewer or mason Tools, (Stonecunning)History+exp re the details of stone work age and construction');
this.setResistance('(Dwarven Resilience)resist poison 1/2 dmg save vs poison@Adv');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('25ft');
this.setTrait("50-350 yrs old("+(50+parseInt(rollDForm('1d300+0')))+"yrs old), 4ft 0in tall+2d4("+(4.0+(parseInt(rollDForm('2d4+0'))/12)).toFixed(1).replace('.', 'ft ')+"in tall, 115lbs+2d6("+(parseInt(115)+parseInt(rollDForm('2d6+0')))+"lbs)")}
if(this.race.match(/Dwarf,\sGray/)){this.setAbility('str+1');
this.setLanguages('Common, Dwarvish, Undercommon');
this.setProficienciesRace('battleaxe, handaxe, light hammer, warhammer, smith or brewer or Mason Tools, (Stonecunning)History+exp re the details of stone work age and construction,@3rd(EnlargeReduce)only Enlarge on self 1/1/long rest, @5th(Invisibility)no components needed/in dim light 1/1/long rest');
this.setResistance('(Duergar Resilience)save@Adv vs illusion, charm, paralysis');
this.setSenses('Darkvision 120ft');
this.setSize('Medium 5x5ft');
this.setSpeed('25ft');
this.setVulnerability('(Sunlight Sensitivity)atks and Perception @DisAdv in sunlight, 150 lbs., 4.5fttall')}
if(this.race.match(/Elf,\sDark/)){this.setAbility('dex+2, cha+1');
this.setImmunity('Sleep');
this.setLanguages('Common, Elvish');
this.setProficienciesRace('Dancing Lights(cha),@3rd Faerie Fire(cha), @5th Darkness(cha)1/1/long rest, rapiers, and shortswords');
this.setResistance('(Fae Ancestry)save vs charm@Adv');
this.setSenses('Darkvision 120ft, (Keen Senses)Perception+pro, (Trance)alert to danger during long and short rests');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('(Sunlight Sensitivity)atks and Perception @DisAdv in sunlight, 1-750 years old, 5-6fttall')}
if(this.race.match(/Elf,\sHalf/)){this.setAbility('cha+2, abi+1 and abi+1');
this.setImmunity('Sleep');
this.setLanguages('Common, Elvish, and 1 language');
this.setProficienciesRace('2 skills+pro');
this.setResistance('(Fae Ancestry)save vs charm@Adv');
this.setSenses('Darkvision 60ft, (Keen Senses)Perception+pro, (Trance)alert to danger during long and short rests');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('1-180 years old, 5-6fttall')}
if(this.race.match(/Elf,\sHigh/)){this.setAbility('dex+2, int+1');
this.setImmunity('Sleep');
this.setLanguages('Common, Elvish, and 1 language');
this.setProficienciesRace('1 Wizard Cantrip(Int), Longbows, longswords, shortbows, and shortswords');
this.setResistance('(Fae Ancestry)save vs charm@Adv');
this.setSenses('Darkvision 60ft, (Keen Senses)Perception+pro, (Trance)alert to danger during long and short rests');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('1-750 years old, 5-6fttall')}
if(this.race.match(/Elf,\sMoon/)){this.setAbility('dex+2, int+1');
this.setImmunity('Sleep');
this.setLanguages('Common, Elvish, and 1 language');
this.setProficienciesRace('Longbows, longswords, shortbows, shortswords');
this.setResistance('(Fae Ancestry)save vs charm@Adv');
this.setSenses('Darkvision 60ft, (Keen Senses)Perception+pro, (Trance)alert to danger during long and short rests');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('1-750 years old, 5-6fttall')}
if(this.race.match(/Elf,\sShadow/)){this.setAbility('dex+2, con+1');
this.setImmunity('Sleep');
this.setLanguages('Common, Elvish, and 1 language');
this.setProficienciesRace('Longbows, longswords, shortbows, shortswords');
this.setResistance('necrotic,@3rd resist all dmg when teleporting 1rnd 30ft bonus 1/1/long rest,(Fae Ancestry)save vs charm@Adv');
this.setSenses('Darkvision 60ft, (Keen Senses)Perception+pro, (Trance)alert to danger during rest,short rest is long rest');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('100-750 yrs old('+(100+parseInt(rollDForm('1d650+0')))+'yrs old), 4ft 8in tall+2d8('+(4.8+(parseInt(rollDForm('2d8+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 90lbs+1d4('+(parseInt(90)+parseInt(rollDForm('1d4+0')))+'lbs)')}
if(this.race.match(/Elf,\sWood/)){this.setAbility('dex+2, int+1');
this.setImmunity('Sleep');
this.setLanguages('Common, Elvish');
this.setProficienciesRace('Longbows, longswords, shortbows, and shortswords');
this.setResistance('necrotic dmg, (Fae Ancestry)save vs charm@Adv');
this.setSenses('Darkvision 60ft, (Keen Senses)Perception+pro, (Trance)alert to danger during long and short rests');
this.setSize('Medium 5x5ft');
this.setSpeed('35ft');
this.setFeatureNotes("(Mask of the Wild)try to hide even under light cover");
this.setTrait("100-750 yrs old("+(100+parseInt(rollDForm('1d650+0')))+"yrs old), 4ft 6in tall+2d10("+(4.6+(parseInt(rollDForm('2d10+0'))/12)).toFixed(1).replace('.', 'ft ')+"in tall, 100lbs+1d4("+(parseInt(100)+parseInt(rollDForm('1d4+0')))+"lbs)")}
if(this.race.match(/Firbolg/)){this.setAbility('str+1, wis+2');
this.setAlignment('Neutral\sGood');
this.setImmunity('');
this.setLanguages('Common, Elvish, Giant');
this.setProficienciesRace('');
this.setResistance('');
this.setSenses("passive Perception "+((10+(this.wisMod/1)+(this.wisPro/1))));
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setFeatureNotes("(Firbolg Magic) wis Detect Magic, Disguise Self 1/1 short rest, (Hidden Step)bonus,invisible utso your next turn, (Powerful Build), (Speech of Beast and Leaf)vsCha to influence them");
this.setTrait("30-500yrs old("+(30+parseInt(rollDForm('1d470+0')))+"yrs old), 6ft2in tall+2d12("+(6.2+(parseInt(rollDForm('2d12+0'))/12)).toFixed(1).replace('.', 'ft')+"in tall, 175lbs+2d6("+(parseInt(175)+parseInt(rollDForm('2d6+0')))+"lbs)")}
if(this.race.match(/Gnome,\sDeep/)){this.setAbility('dex+1');
this.setLanguages('Common, Gnomish, Undercommon');
this.setProficienciesRace('Natural Illusionist(Minor Illusion(Int))');
this.setResistance('(Gnome Cunning)save vs magic@Adv');
this.setSenses('Darkvision 120ft');
this.setSize('Small 5x5ft');
this.setSpeed('25ft');
this.setTrait('(Stone Camouflage)Stealth@Adv in rocky terrain, 1-500 years old, 40 lbs., 3fttall')}
if(this.race.match(/Gnome,\sForest/)){this.setAbility('dex+1, int+2');
this.setLanguages('Common, Gnomish');
this.setProficienciesRace('Natural Illusionist(Minor Illusion(Int))');
this.setResistance('(Gnome Cunning)save vs magic@Adv');
this.setSenses('Darkvision 60ft');
this.setSize('Small 5x5ft');
this.setSpeed('25ft');
this.setTrait('(Speak with Small Beasts), 1-500 years old, 40 lbs., 3fttall')}
if(this.race.match(/Gnome,\sRock/)){this.setAbility('int+2, con+1');
this.setLanguages('Common, Gnomish');
this.setProficienciesRace('(Artifcer s Lore)History+exp regarding alchemical and magic items(Tinker)Tinker Tools+pro 1hr 10gp 1 toy AC5 1hp Clockwork Toy Fire Starter Music Box');
this.setResistance('(Gnome Cunning)save vs magic@Adv');
this.setSenses('Darkvision 60ft');
this.setSize('Small 5x5ft');
this.setSpeed('25ft');
this.setTrait('1-500 years old, 40 lbs., 3fttall')}
if(this.race.match(/Goblin/)){this.setAbility('dex+2, con+1');
this.setActionNotes('(Fury of the Small)1/1 4hr rest,1tgt deal xtra your,lvldmg, (Nimble Escape)Disengage or Hide as bonus 1/turn');
this.setAlignment('Neutral Evil');
this.setLanguages('Common, Goblin');
this.setProficienciesRace('');
this.setResistance('');
this.setSenses('Darkvision 60ft');
this.setSize('Small 5x5ft');
this.setSpeed('30ft');
this.setTrait('8-60 yrs old('+(8+parseInt(rollDForm('1d52+0')))+'yrs old), 3ft 5in tall+2d4('+(3.5+(parseInt(rollDForm('2d4+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 35lbs+1d4('+(parseInt(35)+parseInt(rollDForm('1d4+0')))+'lbs)')}
if(this.race.match(/Halfling,\sLightfoot/)){this.setAbility('dex+2, cha+1');
this.setLanguages('Common, Halfling');
this.setProficienciesRace('');
this.setResistance('(Brave)save vs fear@Adv');
this.setSenses('');
this.setSize('Small 5x5ft');
this.setSpeed('25ft');
this.setTrait('(Naturally Stealthy)can try to hide behind larger being, (Nimbleness)can move through larger being space, (Lucky)re-roll on a natural 1, 1-250 years old, 40 lbs., 3fttall')}
if(this.race.match(/Halfling,\sStout/)){this.setAbility('dex+2, con+1');
this.setLanguages('Common, Halfling');
this.setProficienciesRace('');
this.setResistance('(Stout Resilience)resist Poison, save vs poison@Adv, (Brave)save vs fear@Adv');
this.setSenses('');
this.setSize('Small 5x5ft');
this.setSpeed('25ft');
this.setTrait('(Nimbleness)can move through larger being space, (Lucky)re-roll on a natural 1, 1-250 years old, 40 lbs., 3fttall')}
if(this.race.match(/Hobgoblin/)){this.setAbility('con+2, int+1');
this.setActionNotes('(Saving Face)bonus , reroll number of allies till success 1/1, ');
this.setAlignment('Lawful Evil');
this.setLanguages('Common, Goblin');
this.setProficienciesRace('2wpns, light armor');
this.setResistance('');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('15-100 yrs old('+(15+parseInt(rollDForm('1d100+0')))+'yrs old), 4ft 8in tall+2d10('+(4.8+(parseInt(rollDForm('2d10+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 110lbs+2d4('+(parseInt(110)+parseInt(rollDForm('2d4+0')))+'lbs)')}
if(this.race.match(/Human/)){this.setAbility('abi+1 and abi+1');
this.setLanguages('Common, and 1 language');
this.setProficienciesRace('1 more skill, 1 more feat');
this.setResistance('');
this.setSenses('');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait("15-80 yrs old("+(15+parseInt(rollDForm('1d65+0')))+"yrs old), 4ft 8in tall+2d10("+(4.8+(parseInt(rollDForm('2d10+0'))/12)).toFixed(1).replace('.', 'ft ')+"in tall, 110lbs+2d4("+(parseInt(110)+parseInt(rollDForm('2d4+0')))+"lbs)")}
if(this.race.match(/Kenku/))
{this.setAbility('dex+2, wis+1');
this.setActionNotes('(Expert Forgery)duplicate items@Adv,(Mimicry)imitate sounds,Deception+cha vsWis ');
this.setAlignment('Chaotic');
this.setLanguages('read,write Auran,mimic languages');
this.setProficienciesRace('2 from Acrobatics, Deception, Stealth or Slight of Hand');
this.setResistance('');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('12-60 yrs old('+(12+parseInt(rollDForm('1d48+0')))+'yrs old), 4ft4in tall+2d8('+(4.4+(parseInt(rollDForm('2d8+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 50lbs+1d6('+(parseInt(50)+parseInt(rollDForm('1d6+0')))+'lbs)')}

if(this.race.match(/Kobold/)){this.setAbility('str+2, dex+2');
this.setActionNotes('(Grovel Cower and Beg)10ft 1 act 1/1 short rest allies atk@Adv till end of your next turn, (Pack Tactics)woke ally 5ft you atk@Adv');
this.setAlignment('Lawful');
this.setLanguages('Common, Draconic');
this.setProficienciesRace('');
this.setResistance('');
this.setSenses('Darkvision 60ft');
this.setSize('Small 5x5ft');
this.setSpeed('30ft');
this.setTrait('6-120 yrs old('+(6+parseInt(rollDForm('1d114+0')))+'yrs old), 2ft 1in tall+2d4('+(2.1+(parseInt(rollDForm('2d4+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 25lbs+1d4('+(parseInt(25)+parseInt(rollDForm('1d4+0')))+'lbs)')}
if(this.race.match(/Orc/)){this.setAbility('str+2, con+1');
this.setActionNotes('(Aggressive)bonus xtra move toward enemy');
this.setAlignment('Chaotic Evil');
this.setLanguages('Common, Orc');
this.setProficienciesRace('Intimidation+pro');
this.setResistance('');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('12-50 yrs old('+(12+parseInt(rollDForm('1d38+0')))+'yrs old), 5ft 4in tall+2d8('+(5.4+(parseInt(rollDForm('2d8+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 175lbs+2d6('+(parseInt(175)+parseInt(rollDForm('2d6+0')))+'lbs)')}
if(this.race.match(/Orc,\sHalf/)){this.setAbility('str+2, con+1');
this.setLanguages('Common, Orc');
this.setProficienciesRace('Intimidation+pro');
this.setResistance('');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait('(Relentless Endurance)1/1/long rest, 0hp is 1hp, (Menacing)Intimidation+pro, (Savage atks)crit dmg+1d, 1-75 years old, 6+feet tall')}
if(this.race.match(/Satyr/)){this.setAbility('dex+1, cha+2');
this.setDamageConditions('immune to Charm Person');
this.setLanguages('Common, Sylvan');
this.setProficienciesRace('Ram 1d4+str+pro, Mirthful Leaps long jump+1d8ft, Performance+pro, Persuasion+pro, Musical Instrument+pro, @1st Vicious Mockery+cha ,@3rd Entangle+cha, @5th Suggestion+cha 1/1/long rest resets');
this.setResistance('resists magic@Adv');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('35ft');
this.setTrait(15+rollDForm('1d75+0')+' or 1-90 years old, '+(3+rollDForm('1d2+0'))+'ft or 4-5ft tall, '+(100+rollDForm('1d50+0'))+'lbs or 100-150lbs')}
if(this.race.match(/Tabaxi/)){this.setAbility('dex+2, cha+1');
this.setActionNotes('(Feline Agility)mv0 1turn, mv2Xspeed 1turn(Cats Claws)climb20ft, 1d4+strslash');
this.setLanguages('Common, 1 language');
this.setProficienciesRace('Perception+pro, Stealth+pro');
this.setResistance('');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait("15-100yrs old("+(15+rollDForm('1d85+0'))+'yrs old), 4ft10in+2d10in('+(4.10+(parseInt(rollDForm('2d10+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 90lbs+2d4lbs('+(90+rollDForm('2d4+0'))+'lbs)');
}

if(this.race.match(/Asmodeus/))
{this.setAbility('int+1, cha+2');
this.setFeatures('@1st(Infernal Legacy)<b onClick=Thaumaturgy()>Thaumaturgy</b>,@3rd <b onClick=HellishRebuke()>HellishRebuke</b>1/1 long rest, @5th <b onClick=Darkness()>Darkness</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Baalzebul/))
{this.setAbility('int+1, cha+2');
this.setFeatures('@1st(Legacy of Maladomini)<b onClick=Thaumaturgy()>Thaumaturgy</b>,@3rd <b onClick=RayOfSickness()>RayOfSickness</b>1/1 long rest, @5th <b onClick=CrownOfMadness()>CrownOfMadness</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Dispater/))
{this.setAbility('dex+1, cha+2');
this.setFeatures('@1st(Legacy of Dis)<b onClick=Thaumaturgy()>Thaumaturgy</b>,@3rd <b onClick=DisguiseSelf()>DisguiseSelf</b>1/1 long rest, @5th <b onClick=DetectThoughts()>DetectThoughts</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Fierna/))
{this.setAbility('wis+1, cha+2');
this.setFeatures('@1st(Legacy of Phlegethos)<b onClick=Friends()>Friends</b>,@3rd <b onClick=CharmPerson()>CharmPerson</b>1/1 long rest, @5th <b onClick=Suggestion()>Suggestion</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Glasya/))
{this.setAbility('dex+1, cha+2');
this.setFeatures('@1st(Legacy of Malbolge)<b onClick=MinorIllusion()>MinorIllusion</b>,@3rd <b onClick=DisguiseSelf()>DisguiseSelf</b>1/1 long rest, @5th <b onClick=Invisibility()>Invisibility</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Levistus/))
{this.setAbility('con+1, cha+2');
this.setFeatures('(Legacy of Stygia)@1st <b onClick=RayOfFrost()>RayOfFrost</b>,@3rd <b onClick=ArmorOfAgathys()>ArmorOfAgathys</b>, @5th <b onClick=Darkness()>Darkness</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Mammon/))
{this.setAbility('int+1, cha+2');
this.setFeatures('@1st(Legacy of Minauros) <b onClick=MageHand()>MageHand</b>,@3rd <b onClick=TensersFloatingDisk()>TensersFloatingDisk</b>, @5th <b onClick=ArcaneLock()>ArcaneLock</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Mephistopheles/))
{this.setAbility('int+1, cha+2');
this.setLanguages('Common, Infernal');
this.setFeatures('Mage Hand,@3rd Burning Hands, @5th Flame Blade 1/1 short rest');
this.setFeatures('@1st(Legacy of Cania) <b onClick=MageHand()>MageHand</b>,@3rd <b onClick=BurningHand()>BurningHand</b>1/1 long rest, @5th <b onClick=FlameBlade()>FlameBlade</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Zariel/))
{this.setAbility('str+1, cha+2');
this.setFeatures('@1st <b onClick=Thaumaturgy()>Thaumaturgy</b>,@3rd <b onClick=SearingSmite()>SearingSmite</b>, @5th <b onClick=BrandingSmite()>BrandingSmite</b>1/1 long rest, cha spell ability)'+this.features);
}

if(this.race.match(/Tiefling/))
{this.setLanguages('Common, Infernal');
this.setProficienciesRace('');
this.setResistance('Fire');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setTrait("15-100yrs old("+(15+rollDForm('1d85+0'))+'yrs old), 4.9+2d8('+(4.9+(parseInt(rollDForm('2d8+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 110+2d4lbs('+(110+rollDForm('2d4+0'))+'lbs')+")";
}

if(this.race.match(/Yuan-Ti/)){this.setAbility('int+1, cha+2');
this.setActionNotes('(Innate Spellcasting)Animal Friendship(snakes), Poison Spray unlimited,@3rd Suggestion(snakes)');AnimalFriendship();PoisonSpray();
this.setAlignment('Neutral Evil');
this.setDamageConditions('immune to poison');
this.setImmunity('poison')
this.setLanguages('Abyssal, Common, Draconic');
this.setProficienciesRace('');
this.setResistance('save vs magic@Adv');
this.setSenses('Darkvision 60ft');
this.setSize('Medium 5x5ft');
this.setSpeed('30ft');
this.setSpellAbility('cha');
this.setTrait('15-80 yrs old('+(15+parseInt(rollDForm('1d65+0')))+'yrs old), 4ft 8in tall+2d10('+(4.8+(parseInt(rollDForm('2d10+0'))/12)).toFixed(1).replace('.', 'ft ')+'in), 110lbs+2d4('+(parseInt(110)+parseInt(rollDForm('2d4+0')))+'lbs)')}
this.refresh()}
function _setResistance(x){this.resistance=x;
this.refresh()}
function _setResults(x){this.results=x;
this.refresh()}
function _setRollName1(x){this.rollName1=x;
this.refresh()}
function _setRoll1(x){this.roll1=x;
this.refresh()}
function _setRollName2(x){this.rollName2=x;
this.refresh()}
function _setRoll2(x){this.roll2=x;
this.refresh()}
function _setSaving(x){this.saving=x;
this.refresh()}
function _setSenses(x){this.senses=x;
this.refresh()}
function _setShield(x){this.shield=x;
this.refresh()}
function _setSpeed(x){this.speed=x;
this.refresh()}
function _setSpellAbility(x){this.spellAbility=x;
if(x==='int'){this.setSpellAbilityNumber(this.intMod)}
if(x==='wis'){this.setSpellAbilityNumber(this.wisMod)}
if(x==='cha'){this.setSpellAbilityNumber(this.chaMod)}
this.refresh()}
function _setSpellAbilityNumber(x){this.spellAbilityNumber=x;
this.refresh()}
function _setSit(x){this.sit=x;
if(this.sit===''){this.sit="+0"
}
this.refresh()}
function _setSize(x){this.size=x;
if(this.size.match(/Tiny/)){this.carryingCapacity=((this.curStr / 1)*15)/ 2;
this.dragLiftPush=((this.curStr / 1)*30)/ 2;
this.highJump=Math.floor(((this.strMod / 1)+3)/ 2);
this.longJump=Math.floor((this.curStr / 1)/ 2)}
if(this.size.match(/Small|Medium/)){this.carryingCapacity=(this.curStr / 1)*15;
this.dragLiftPush=(this.curStr / 1)*30;
this.highJump=Math.floor((this.strMod / 1)+3);
this.longJump=Math.floor(this.curStr / 1)}
if(this.size.match(/Large/)){this.carryingCapacity=((this.curStr / 1)*15)*2;
this.dragLiftPush=((this.curStr / 1)*30)*2;
this.highJump=Math.floor(((this.strMod / 1)+3)*2);
this.longJump=Math.floor((this.curStr / 1)*2)}
if(this.size.match(/Huge/)){this.carryingCapacity=((this.curStr / 1)*15)*4;
this.dragLiftPush=((this.curStr / 1)*30)*4;
this.highJump=Math.floor(((this.strMod / 1)+3)*4);
this.longJump=Math.floor((this.curStr / 1)*4)}
if(this.size.match(/Gargantuan/)){this.carryingCapacity=((this.curStr / 1)*15)*6;
this.dragLiftPush=((this.curStr / 1)*30)*6;
this.highJump=Math.floor(((this.strMod / 1)+3)*6);
this.longJump=Math.floor((this.curStr / 1)*6)}
this.refresh()}
function _setSkills(x){this.skills=x;
this.refresh()}
function _setStr(x){this.str=x;
this.curStr=x;calcMod(x);
this.strMod=mod;
if(this.size.match(/Tiny/)){this.carryingCapacity=((this.curStr / 1)*15)/ 2;
this.dragLiftPush=((this.curStr / 1)*30)/ 2;
this.highJump=Math.floor(((this.strMod / 1)+3)/ 2);
this.longJump=Math.floor((this.curStr / 1)/ 2)}
if(this.size.match(/Small|Medium/)){this.carryingCapacity=(this.curStr / 1)*15;
this.dragLiftPush=(this.curStr / 1)*30;
this.highJump=Math.floor((this.strMod / 1)+3);
this.longJump=Math.floor(this.curStr / 1)}
if(this.size.match(/Large/)){this.carryingCapacity=((this.curStr / 1)*15)*2;
this.dragLiftPush=((this.curStr / 1)*30)*2;
this.highJump=Math.floor(((this.strMod / 1)+3)*2);
this.longJump=Math.floor((this.curStr / 1)*2)}
if(this.size.match(/Huge/)){this.carryingCapacity=((this.curStr / 1)*15)*4;
this.dragLiftPush=((this.curStr / 1)*30)*4;
this.highJump=Math.floor(((this.strMod / 1)+3)*4);
this.longJump=Math.floor((this.curStr / 1)*4)}
if(this.size.match(/Gargantuan/)){this.carryingCapacity=((this.curStr / 1)*15)*6;
this.dragLiftPush=((this.curStr / 1)*30)*6;
this.highJump=Math.floor(((this.strMod / 1)+3)*6);
this.longJump=Math.floor((this.curStr / 1)*6)}
this.refresh()}
function _setStyle(att, style){eval("document.getElementById(this.elementId).style."+att+"=\""+style+"\"")}
function _setToggled1(x){this.toggled1=x;
this.refresh()}
function _setToggled2(x){this.toggled2=x;
this.refresh()}
function _setToggled3(x){this.toggled3=x;
this.refresh()}
function _setToggled4(x){this.toggled4=x;
this.refresh()}
function _setToggled5(x){this.toggled5=x;
this.refresh()}
function _setToggled6(x){this.toggled6=x;
this.refresh()}
function _setTrait(x){this.trait=x;
this.trait=this.trait.replace(/\'/g, '\'');
this.refresh()}
function _setVulnerability(x){this.vulnerability=x;
this.refresh()}
function _updateXY(){this.x=document.getElementById(this.box.elementId).style.left;
this.y=document.getElementById(this.box.elementId).style.top
}
function _setWis(x){this.wis=x;
this.curWis=x;calcMod(x);
this.wisMod=mod;
if(this.spellAbility==='int'){this.setSpellAbilityNumber(this.intMod)}
if(this.spellAbility==='wis'){this.setSpellAbilityNumber(this.wisMod)}
if(this.spellAbility==='cha'){this.setSpellAbilityNumber(this.chaMod)}
this.refresh()}
function _setX(x){this.x=x;
this.putAt(x, this.y)}
function _setY(y){this.y=y;
this.putAt(this.x, y)}
function _show(){document.getElementById(this.elementId).style.visibility="visible"
}
function _showBox(){this.box.show()}
function _showMenu(){this.menu.show();
this.menuShown=true
}
function add(character){x=characters.length;
character.setIndex(x);
characters[x]=character;
characters[x].refresh();
characters[x].show();
SET_DHTML(character.box.elementId)}
function addRollPrompt(x)
{characters[x].addRoll(characters[x].rollName1,dFormParse(characters[x].roll1),characters[x].rollName2,dFormParse(characters[x].roll2));

checkTheTarget(characters[targeted]);
}
function askInit(x){initRoll=characters[x].rollInit();
characters[x].setInit(initRoll)}
function calcMod(x){mod=Math.floor((x - 10)/ 2);
if(mod> -1){mod="+"+mod
}return mod
}
function Character(name, type){this.abi=0;

this. dmgConditions='';
this.ability='';
this.ac=0;
this.fortitude=0;
this.reflex=0;
this.will=0;
this.curFortitude=0;
this.curReflex=0;
this.curWill=0;
this.petrify='';
this.actionNotes='';
this.addRoll=_addRoll;
this.alignment='Unaligned';
this.alignmentDescription='';
this.animal='';
this.arcana='';
this.armor='No Armor AC10+dex';
this.paralysis='';
this.backF='';
this.backL='';
this.backS='';
this.backT='';
this.background='';
this.bonds='';
this.box=new AGEElement();
this.carryingCapacity=0;
this.cha=0;
this.chaMod='+0';
this.chaPro='';
this.class='';
this.combatLog="";
this.con=0;
this.conMod='+0';
this.conPro='';
this.curAc=0;
this.curCha=0;
this.curCon=0;
this.curDex=0;
this.curHp=0;
this.curIni='+0';
this.curInt=0;
this.curSlot1=0;
this.curSlot2=0;
this.curSlot3=0;
this.curSlot4=0;
this.curSlot4=0;
this.curSlot5=0;
this.curSlot6=0;
this.curSlot7=0;
this.curSlot8=0;
this.curSlot9=0;
this.curStr=0;
this.curWis=0;
this.openDoors='';
this.deleteRoll=_deleteRoll;
this.dex=0;
this.dexMod='+0';
this.dexPro='';
this.dragLiftPush=0;
this.equipment='';
this.experience='';
this.feats='';
this.featureNotes='';
this.features='';
this.figure='Miniatures/Monster.png';
this.flaws='';
this.getSaveText=_getSaveText;
this.hide=_hide;
this.hideMenu=_hideMenu;
this.highJump=0;
this.rods='';
this.hitDice='';
this.ideals='';
this.immunity='';
this.index=null;
this.init="Unrolled";
this.initBonus='+0';
this.insight='';
this.intMod='+0';
this.intPro='';
this.inte=0;
this.intimidation='';
this.investigation='';
this.languages='';
this.longJump=0;
this.lvl=0;
this.maxHp=0;
this.maxSlot1=0;
this.maxSlot2=0;
this.maxSlot3=0;
this.maxSlot4=0;
this.maxSlot4=0;
this.maxSlot5=0;
this.maxSlot6=0;
this.maxSlot7=0;
this.maxSlot8=0;
this.maxSlot9=0;
this.bendBars='';
this.menu=new AGEElement();
this.menuShown=false;
this.name=name;
this.nature='';
this.perception='';
this.breath='';
this.attackAdjustment='';
this.pro='+0';
this.proficiencies='';
this.proficienciesRace='';
this.putAt=_putCharAt;
this.race='';
this.rageDamage=0;
this.refresh=_ref;
this.spells='';
this.resistance='';
this.results="";
this.roll1='';
this.roll2='';
this.rollInit=_rollInit;
this.rollName1='';
this.rollName2='';
this.rollNames2=new Array();
this.rollNames=new Array();
this.rollStuff='';
this.rolls2=new Array();
this.rolls=new Array();
this.save=_save;
this.saving='';
this.senses='';
this.setAC=_setAC;
this.setFortitude=_setFortitude;
this.setReflex=_setReflex;
this.setWill=_setWill;
this.setAbility=_setAbility;
this.setPetrify=_setPetrify;
this.setActionNotes=_setActionNotes;
this.setAlignment=_setAlignment;
this.setAlignmentDescription=_setAlignmentDescription;
this.setAnimal=_setAnimal;
this.setArcana=_setArcana;
this.setArmor=_setArmor;
this.setParalysis=_setParalysis;
this.setBackF=_setBackF;
this.setBackL=_setBackL;
this.setBackS=_setBackS;
this.setBackT=_setBackT;
this.setBackground=_setBackground;
this.setBonds=_setBonds;
this.setCha=_setCha;
this.setChaPro=_setChaPro;
this.setClass=_setClass;
this.setCombatLog=_setCombatLog;
this.setCon=_setCon;
this.setConPro=_setConPro;
this.setCurAc=_setCurAc;
this.setCurCha=_setCurCha;
this.setCurCon=_setCurCon;
this.setCurDex=_setCurDex;
this.setCurHp=_setCurHp;
this.setCurIni=_setCurIni;
this.setCurInt=_setCurInt;
this.setCurSlot1=_setCurSlot1;
this.setCurSlot2=_setCurSlot2;
this.setCurSlot3=_setCurSlot3;
this.setCurSlot4=_setCurSlot4;
this.setCurSlot4=_setCurSlot4;
this.setCurSlot5=_setCurSlot5;
this.setCurSlot6=_setCurSlot6;
this.setCurSlot7=_setCurSlot7;
this.setCurSlot8=_setCurSlot8;
this.setCurSlot9=_setCurSlot9;
this.setCurStr=_setCurStr;
this.setCurWis=_setCurWis;
this.setDamageConditions=_setDamageConditions;
this.setOpenDoors=_setOpenDoors;
this.setDex=_setDex;
this.setDexPro=_setDexPro;
this.setDmg=_setDmg;
this.rotation=0;
this.setRotation=_setRotation;
this.setEquipment=_setEquipment;
this.setExperience=_setExperience;
this.setFeats=_setFeats;
this.setFeatureNotes=_setFeatureNotes;
this.setFeatures=_setFeatures;
this.setFigure=_setFigure;
this.setFlaws=_setFlaws;
this.setHealing=_setHealing;
this.setRods=_setRods;
this.setHitDice=_setHitDice;
this.setIdeals=_setIdeals;
this.setImmunity=_setImmunity;
this.setIndex=_setIndex;
this.setInit=_setInit;
this.setInitBonus=_setInitBonus;
this.setInsight=_setInsight;
this.setInt=_setInt;
this.setIntPro=_setIntPro;
this.setIntimidation=_setIntimidation;
this.setInvestigation=_setInvestigation;
this.setLanguages=_setLanguages;
this.setLvl=_setLvl;
this.setMaxHp=_setMaxHp;
this.setMaxSlot1=_setMaxSlot1;
this.setMaxSlot2=_setMaxSlot2;
this.setMaxSlot3=_setMaxSlot3;
this.setMaxSlot4=_setMaxSlot4;
this.setMaxSlot4=_setMaxSlot4;
this.setMaxSlot5=_setMaxSlot5;
this.setMaxSlot6=_setMaxSlot6;
this.setMaxSlot7=_setMaxSlot7;
this.setMaxSlot8=_setMaxSlot8;
this.setMaxSlot9=_setMaxSlot9;
this.setBendBars=_setBendBars;
this.setName=_setName;
this.setNature=_setNature;
this.setPerception=_setPerception;
this.setBreath=_setBreath;
this.setAttackAdjustment=_setAttackAdjustment;
this.setPro=_setPro;
this.setProficiencies=_setProficiencies;
this.setProficienciesRace=_setProficienciesRace;
this.setRace=_setRace;
this.setSpells=_setSpells;
this.setResistance=_setResistance;
this.setResults=_setResults;
this.setRoll1=_setRoll1;
this.setRoll2=_setRoll2;
this.setRollName1=_setRollName1;
this.setRollName2=_setRollName2;
this.setSaving=_setSaving;
this.setSenses=_setSenses;
this.setShield=_setShield;
this.setSit=_setSit;
this.setSize=_setSize;
this.setSkills=_setSkills;
this.setDamageAdjustment=_setDamageAdjustment;
this.setSpeed=_setSpeed;
this.setSpellAbility=_setSpellAbility;
this.setSpellAbilityNumber=_setSpellAbilityNumber;
this.setStealth=_setStealth;
this.setStr=_setStr;
this.setStrPro=_setStrPro;
this.setMissileAdjustment=_setMissileAdjustment;
this.setTempHp=_setTempHp;
this.setToggled1=_setToggled1;
this.setToggled2=_setToggled2;
this.setToggled3=_setToggled3;
this.setToggled4=_setToggled4;
this.setToggled5=_setToggled5;
this.setToggled6=_setToggled6;
this.setTrait=_setTrait;
this.setVulnerability=_setVulnerability;
this.setWis=_setWis;
this.setWisPro=_setWisPro;
this.shield='No Shield AC+0';
this.show=_showBox;
this.showMenu=_showMenu;
this.sit='+0';
this.size='';
this.skills='';
this.damageAdjustment='';
this.speed='';
this.spellAbility='';
this.spellAbilityNumber='+0';
this.stealth='';
this.str=0;
this.strMod='+0';
this.strPro='';
this.missileAdjustment='';
this.tempHp=0;
this.toggled1="none";
this.toggled2="none";
//this.toggled2="block";
this.toggled3="none";
this.toggled4="none";
this.toggled5="none";
this.toggled6="none";
this.trait='';
this.type=type;
this.updateXY=_updateXY;
this.vulnerability='';
this.wis=0;
this.wisMod='+0';
this.wisPro='';
this.x=0;
this.xtraRolls=new Array(0);
this.y=0;
this.refresh();
}
function makeRoll(x, i)
{dmgRoll1=rollDForm(characters[x].rolls2[i])
dmgNaturalRoll1=naturalRoll;
dmgModifier1=roll;
dmgRoll2=rollDForm(characters[x].rolls2[i])
dmgNaturalRoll2=naturalRoll;
dmgModifier2=roll;
//Healing Rolls
if(characters[x].rollNames2[i].match(/heal/)){healingRollTotal1=dmgRoll1+parseInt(characters[x].spellAbilityNumber);
healingRollTotal2=dmgRoll2+parseInt(characters[x].spellAbilityNumber);
theDamageConditions=characters[x].dmgConditions+characters[x].rollNames2[i];
healRollLog=characters[x].name+"<p>is healing<p>"+characters[targeted].name+"</td></tr><tr><td>"+characters[x].rollNames2[i]+"<br><input onClick='characters[targeted].setDamageConditions(theDamageConditions);checkTheTarget()' type='button' value='Assign this condition?'></td></tr><tr><td><h3>Heal 1</h3>"+characters[x].rolls2[i]+"<br>="+dmgNaturalRoll1+" natural<br>"+dmgModifier1+" modifier<br>="+dmgRoll1+"<br>"+characters[x].spellAbilityNumber+" spell abi<br>="+healingRollTotal1+"<br><input onClick='characters[targeted].setCurHp(characters[targeted].curHp+healingRollTotal1);checkTheTarget()' type='button' value=Heal?></td></tr><tr><td><h3>Heal 2</h3>"+characters[x].rolls2[i]+"<br>="+dmgNaturalRoll2+" natural<br>"+dmgModifier2+" modifier<br>="+dmgRoll2+"<br>"+characters[x].spellAbilityNumber+" spell abi<br>="+healingRollTotal2+"<br><input onClick='characters[targeted].setCurHp(characters[targeted].curHp+healingRollTotal2);checkTheTarget()' type='button' value=Heal?>";
characters[x].setCombatLog(healRollLog);
}else
{abi='abi';
abiMod='+0';
if(characters[x].rollNames[i].match(/\+str/)){abi='str';
abiMod=characters[x].strMod
}
if(characters[x].rollNames[i].match(/\+dex/)){abi='dex';
abiMod=characters[x].dexMod
}
if(characters[x].rollNames[i].match(/\+con/)){abi='con';
abiMod=characters[x].conMod
}
if(characters[x].rollNames[i].match(/\+int/)){abi='int';
abiMod=characters[x].intMod
}
if(characters[x].rollNames[i].match(/\+wis/)){abi='wis';
abiMod=characters[x].wisMod
}
if(characters[x].rollNames[i].match(/\+cha/)){abi='cha';
abiMod=characters[x].chaMod
}
skillMod='+0';
skillModName='no pro'
if(characters[x].rollNames[i].match(/\+pro/)){skillMod=characters[x].pro;skillModName="pro"
}
if(characters[x].rollNames[i].match(/\+exp/)){skillMod=parseInt(characters[x].pro)*2;
if(skillMod> -1){skillMod='+'+skillMod
}skillModName='exp';
}
//Dmg Rolls
dmgRoll1=parseInt(rollDForm(characters[x].rolls2[i]));
dmgNaturalRoll1=naturalRoll;
dmgRollModifier1=roll;
dmgRoll2=parseInt(rollDForm(characters[x].rolls2[i]));
dmgNaturalRoll2=naturalRoll;
dmgRollModifier2=roll;
dmgRollTotal1=dmgRoll1+parseInt(abiMod);
dmgRollTotal2=dmgRoll2+parseInt(abiMod);
dmgRollTotal3=dmgRoll2;
theDamageConditions=characters[x].dmgConditions+characters[x].rollNames2[i];
dmgRollLog="</td></tr><tr><td>"+characters[targeted].name+"<br>has resistances: "+characters[targeted].resistance+"<br>has immunities: "+characters[targeted].immunity+"<br>has vulnerabilities: "+characters[targeted].vulnerability+"<p>versus<p>"+characters[x].rollNames2[i]+"<br><input onClick='characters[targeted].setDamageConditions(theDamageConditions);checkTheTarget()' type='button' value='Assign this dmg condition?'></td></tr><tr><td><h3>Dmg 1</h3>"+characters[x].rolls2[i]+"<br>="+dmgNaturalRoll1+" natural<br>"+dmgRollModifier1+" modifier<br>="+dmgRoll1+"<br><input onClick='characters[targeted].setCurHp(characters[targeted].curHp-dmgRollTotal1);checkTheTarget()' type='button' value=Dmg?><br><input onClick='characters[targeted].setCurHp(Math.floor(characters[targeted].curHp-(parseInt(dmgRollTotal1/2))));checkTheTarget()' type='button' value='1/2 Dmg?'></td></tr><tr><td><h3>Dmg 2</h3>"+characters[x].rolls2[i]+"<br>="+dmgNaturalRoll2+" natural<br>"+dmgRollModifier2+" modifier<br>="+dmgRoll2+"<br><input onClick='characters[targeted].setCurHp(characters[targeted].curHp-dmgRollTotal1);checkTheTarget()' type='button' value=Dmg?><br><input onClick='characters[targeted].setCurHp(Math.floor(characters[targeted].curHp-(parseInt(dmgRollTotal1/2))));checkTheTarget()' type='button' value='1/2 Dmg?'>";
//DC Save Rolls

if(characters[x].rollNames[i].match(/DC\d{1,2}/gi)){roll1=8;
dcTotal=roll1+abiMod / 1+characters[x].pro / 1 ;
DCSaveLog=characters[x].name+"<br>"+characters[x].rollNames[i]+"<p>DC8<br>"+abiMod+" "+abi+"<br>"+characters[x].pro+" pro<br>="+dcTotal+"<p>vs<p>";

if(characters[x].rollNames[i].match(/vsFort/gi)){modName="fort"
saveMod=characters[targeted].curFortitude
}

if(characters[x].rollNames[i].match(/vsRef/gi)){modName="ref"
saveMod=characters[targeted].curReflex
}

if(characters[x].rollNames[i].match(/vsWill/gi)){modName="will"
saveMod=characters[targeted].curWill
}

if(characters[x].rollNames[i].match(/vsStr/gi)){modName="str"
saveMod=characters[targeted].strMod
if(characters[targeted].strPro==="pro"){savePro=characters[targeted].pro;saveProName="pro"
}else if(characters[targeted].strPro==='exp'){savePro=characters[targeted].pro*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsDex/gi)){modName="dex"
saveMod=characters[targeted].dexMod
if(characters[targeted].dexPro==="pro"){savePro=characters[targeted].pro;saveProName="pro"
}else if(characters[targeted].dexPro==='exp'){savePro=characters[targeted].pro*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsCon/gi)){modName="con"
saveMod=characters[targeted].conMod
if(characters[targeted].conPro==="pro"){savePro=characters[targeted].pro;saveProName="pro"
}else if(characters[targeted].conPro==='exp'){savePro=characters[targeted].pro*2;saveProName="exp"
}
}if(characters[x].rollNames[i].match(/vsInt/gi)){modName="int"
saveMod=characters[targeted].intMod
if(characters[targeted].intPro==="pro"){savePro=characters[targeted].pro;saveProName="pro"
}else if(characters[targeted].intPro==='exp'){savePro=characters[targeted].pro*2;saveProName="exp"
}
}if(characters[x].rollNames[i].match(/vsWis/gi)){modName="wis"
saveMod=characters[targeted].wisMod
if(characters[targeted].wisPro==="pro"){savePro=characters[targeted].pro;saveProName="pro"
}else if(characters[targeted].wisPro==='exp'){savePro=characters[targeted].pro*2;saveProName="exp"
}
}if(characters[x].rollNames[i].match(/vsCha/gi)){modName="cha"
saveMod=characters[targeted].chaMod
if(characters[targeted].chaPro==="pro"){savePro=characters[targeted].pro;saveProName="pro"
}else if(characters[targeted].chaPro==='exp'){savePro=characters[targeted].pro*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsAthletics/gi)){modName="str"
saveMod=characters[targeted].strMod;
savePro=0;
saveProName="pro";
if(characters[targeted].paralysis==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].paralysis==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsAcrobatics/gi)){modName="dex"
saveMod=characters[targeted].dexMod;
savePro=0;
saveProName="pro";
if(characters[targeted].petrify==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].petrify==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsSleightOfHand/gi)){modName="dex"
saveMod=characters[targeted].dexMod;
savePro=0;
saveProName="pro";
if(characters[targeted].damageAdjustment==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].damageAdjustment==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsStealth/gi)){modName="dex"
saveMod=characters[targeted].dexMod;
savePro=0;
saveProName="pro";
if(characters[targeted].stealth==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].stealth==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsArcana/gi)){modName="int"
saveMod=characters[targeted].intMod;
savePro=0;
saveProName="pro";
if(characters[targeted].arcana==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].arcana==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsHistory/gi)){modName="int"
saveMod=characters[targeted].intMod;
savePro=0;
saveProName="pro";
if(characters[targeted].rods==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].rods==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsInvestigation/gi)){modName="int"
saveMod=characters[targeted].intMod;
savePro=0;
saveProName="pro";
if(characters[targeted].investigation==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].investigation==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsNature/gi)){modName="int"
saveMod=characters[targeted].intMod;
savePro=0;
saveProName="pro";
if(characters[targeted].nature==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].nature==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsReligion/gi)){modName="int"
saveMod=characters[targeted].intMod;
savePro=0;
saveProName="pro";
if(characters[targeted].spells==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].spells==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsAnimal/gi)){modName="wis"
saveMod=characters[targeted].wisMod;
savePro=0;
saveProName="pro";
if(characters[targeted].animal==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].animal==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsInsight/gi)){modName="wis"
saveMod=characters[targeted].wisMod;
savePro=0;
saveProName="pro";
if(characters[targeted].insight==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].insight==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsMedicine/gi)){modName="wis"
saveMod=characters[targeted].wisMod;
savePro=0;
saveProName="pro";
if(characters[targeted].bendBars==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].bendBars==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsPerception/gi)){modName="wis"
saveMod=characters[targeted].wisMod;
savePro=0;
saveProName="pro";
if(characters[targeted].perception==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].perception==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsSurvival/gi)){modName="wis"
saveMod=characters[targeted].wisMod;
savePro=0;
saveProName="pro";
if(characters[targeted].missileAdjustment==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].missileAdjustment==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsDeception/gi)){modName="cha"
saveMod=characters[targeted].chaMod;
savePro=0;
saveProName="pro";
if(characters[targeted].openDoors==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].openDoors==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsIntimidation/gi)){modName="cha"
saveMod=characters[targeted].chaMod;
savePro=0;
saveProName="pro";
if(characters[targeted].intimidation==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].intimidation==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsPerformance/gi)){modName="cha"
saveMod=characters[targeted].chaMod;
savePro=0;
saveProName="pro";
if(characters[targeted].breath==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].breath==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
if(characters[x].rollNames[i].match(/vsPersuasion/gi)){modName="cha"
saveMod=characters[targeted].chaMod;
savePro=0;
saveProName="pro";
if(characters[targeted].attackAdjustment==="pro"){savePro=characters[targeted].pro/1;saveProName="pro"
}else if(characters[targeted].attackAdjustment==='exp'){savePro=characters[targeted].pro/1*2;saveProName="exp"
}
}
else{savePro="0";saveProName="pro"
}if(savePro> -1){savePro="+"+savePro
}
D20Roll1=parseInt(rollDForm('1d20+0'));
D20NaturalRoll1=naturalRoll;
D20RollModifier1=roll;
D20Roll2=parseInt(rollDForm('1d20+0'));
D20NaturalRoll2=naturalRoll;
D20RollModifier2=roll;
savingRollTotal1=D20Roll1+parseInt(saveMod)+parseInt(savePro)+parseInt(characters[x].sit);
savingRollTotal2=D20Roll2+parseInt(saveMod)+parseInt(savePro)+parseInt(characters[x].sit);
let theAttackResult1='<br>miss'
if(savingRollTotal1>=dcTotal){theAttackResult1='<br>save'}
if(savingRollTotal1>=(10+dcTotal)){theAttackResult1='<br>critical save'}
if(savingRollTotal1<dcTotal){theAttackResult1='<br>failure'}
if(savingRollTotal1<(dcTotal-10)){theAttackResult1='<br>critical failure'}
let theAttackResult2='<br>miss'
if(savingRollTotal2>=dcTotal){theAttackResult2='<br>save'}
if(savingRollTotal2>=(10+dcTotal)){theAttackResult2='<br>critical save'}
if(savingRollTotal2<dcTotal){theAttackResult2='<br>failure'}
if(savingRollTotal2<(dcTotal-10)){theAttackResult2='<br>critical failure'}
savingThrowLog=characters[targeted].name+"</td></tr><tr><td><h3>Saving Throw 1</h3>1d20+0<br>="+D20NaturalRoll1+" natural<br>"+D20RollModifier1+" modifier<br>="+D20Roll1+"<br>"+saveMod+" "+modName+"<br>"+savePro+" "+saveProName+"<br>"+characters[x].sit+" sit<br>="+savingRollTotal1+theAttackResult1+"</td></tr><tr><td><h3>Saving Throw 2</h3>1d20+0<br>="+D20NaturalRoll2+" natural<br>"+D20RollModifier2+" modifier<br>="+D20Roll2+"<br>"+saveMod+" "+modName+"<br>"+savePro+" "+saveProName+"<br>"+characters[x].sit+" sit<br>="+savingRollTotal2+theAttackResult2;
characters[x].setCombatLog(DCSaveLog+savingThrowLog+dmgRollLog);
}else
{//atk Rolls
atkRoll1=parseInt(rollDForm(characters[x].rolls[i]));
atkNaturalRoll1=naturalRoll;
atkRollModifier1=roll;
atkRoll2=parseInt(rollDForm(characters[x].rolls[i]));
atkNaturalRoll2=naturalRoll;
atkRollModifier2=roll;
atkRollTotal1=atkRoll1+parseInt(abiMod)+parseInt(skillMod)+parseInt(characters[x].sit);
atkRollTotal2=atkRoll2+parseInt(abiMod)+parseInt(skillMod)+parseInt(characters[x].sit);
let theAttackResult1='<br>miss'

if(atkRollTotal1>=characters[targeted].curAc){theAttackResult1='<br>hit'}
if(atkRollTotal1>=(10+characters[targeted].curAc)){theAttackResult1='<br>critical hit'}
if(atkRollTotal1<characters[targeted].curAc){theAttackResult1='<br>failure'}
if(atkRollTotal1<(characters[targeted].curAc-10)){theAttackResult1='<br>critical failure'}
let theAttackResult2='<br>miss'
if(atkRollTotal2>=characters[targeted].curAc){theAttackResult2='<br>hit'}
if(atkRollTotal2>=(10+characters[targeted].curAc)){theAttackResult2='<br>critical hit'}
if(atkRollTotal2<characters[targeted].curAc){theAttackResult2='<br>failure'}
if(atkRollTotal2<(characters[targeted].curAc-10)){theAttackResult2='<br>critical failure'}

atkRollLog="<h3>Atk 1</h3>"+characters[x].rolls[i]+"<br>="+atkNaturalRoll1+" natural<br>"+atkRollModifier1+" modifier<br>="+atkRoll1+"<br>"+characters[x].sit+" sit<br>="+atkRollTotal1+"</td></tr><tr><td><h3>Atk 2</h3>"+characters[x].rolls[i]+"<br>="+atkNaturalRoll2+" natural<br>"+atkRollModifier2+" modifier<br>="+atkRoll2+"<br>"+characters[x].sit+" sit<br>="+atkRollTotal2;
characters[x].setCombatLog(atkRollLog+dmgRollLog);
}
}
document.getElementById('targeted'+[targeted]).checked='checked';
}
function checkTheTarget(){document.getElementById('targeted'+[targeted]).checked="checked"
}
function removeChar(x){if(confirm("Are you sure you want to delete "+characters[x].name+"?this cannot be undone!")){for(var i=x+1; i< characters.length; i++){characters[i].setIndex(i - 1);
// alert((i-1)+"==="+characters[i].index)
characters[i].refresh()} characters[x].box.hide();
characters[x].menu.hide();
characters.splice(x, 1)}
}
function newCharacter(type){response=prompt("what is the new "+type+"'s name?");
if(response !=null){x=characters.length;
newChar=new Character(response, type);
newChar.setIndex(x);
newChar.refresh();
newChar.show();
characters[x]=newChar;
ADD_DHTML(newChar.box.elementId)}
}//Regular expression for something in the form XdY+/-Z, with X and+/-Z optional
diceRegex=/[0-9]{0,}[d|D][0-9]{1,}([+|-][0-9]{1,}){0,1}/
function rollInitiatives(){for(i=0; i< characters.length; i++){initRoll=characters[i].rollInit();
characters[i].setInit(initRoll)}
}
function saveAll(){globalSave="";
for(var i=0; i< characters.length; i++){globalSave+=characters[i].getSaveText()+" "
}showSavePrompt("all characters", globalSave)}
function showSavePrompt(name, toSave){toSave="<table><tr><td>Cut and paste below and above the lines into the Characters.js file.<hr></td></tr><tr><td>"+toSave+"</td></tr><tr><td><hr><input type='button' onClick='savePane.hide()'value=Close></td></tr></table>";
savePane.setContents(toSave);
savePane.show()}
function toggleMenu(x){if(characters[x].menuShown){characters[x].hideMenu()}
else
{characters[x].showMenu()}
}
function XdY(dice, sides){results=0;
for(i=0; i< dice; i++){results+=d(sides)}return results
}
var row;function start(){ row= event.target}
function dragover(){ var e= event;
e.preventDefault();
 let children= Array.from(e.target.parentNode.parentNode.children);
if(children.indexOf(e.target.parentNode)>children.indexOf(row))
 e.target.parentNode.after(row);
else
 e.target.parentNode.before(row)}

function _setLvl(x){this.lvl=x;this.refresh()}

</script>
<script src="Characters.js"></script>
</body>
</html>
