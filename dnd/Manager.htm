<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<title>Advanced Dungeons & Dragons 1st Edition(for Android and Desktop Chrome)</title>
<style>

body,
button,
input,
radio,
text,
textArea,
a:link,
a:visited {
background: url("Decorations/Panel.png") repeat;
border-color: #000;
border-style: solid;
border-width: 2px;
color: #000;
}

table,
tr,
td {
background: url("Decorations/Panel.png") repeat;
border-color: #3a8094;
color: #000;
}

#board {
position: relative;
width: 700px;
height: 700px;
border: 1px solid #000;
}

.attack-roll-result,
.damage-roll-result {
display: block;
font-size: 12px;
margin-top: 5px;
}

.board {
border-style: solid;
color: inherit;
display: grid;
grid-template-columns: repeat(7, 100px);
grid-template-rows: repeat(7, 100px);
height: 700px;
max-height: 700px;
max-width: 700px;
position: relative;
width: 700px;
}

.board.touch,
.unit.touch {
touch-action: none;
}

.menu {
position: relative;
max-width: 100%;
}

.menu-button {
cursor: pointer;
display: inline-block;
font-size: 10px;
}

.menu-input {
color: #000;
display: inline-block;
box-sizing: border-box;
font-size: 10px;
max-height: 100px;
max-width: 100px;
z-index: 3;
}

.menu-item {
color: #000;
display: inline-block;
}

.unit {
background: url("Decorations/Panel.png") repeat;
color: black;
cursor: move;
font-size: 10px;
height: 100px;
position: absolute;
transform-origin: center;
user-select: none;
width: 100px;
z-index: 1;
}

.unit-display {
float: right;
position: absolute;
bottom: 0;
right: 0;
clear: right;
}

.rotate-button {
display: inline-block;
font-size: 10px;
}

.square {
width: 100px;
height: 100px;
border: 1px solid #000;
}

</style>

<body>
<table><tr><td>
<button onclick="createUnit()">Create a character or monster?</button>

Load a map image.
<input type="file" id="mapImageInput" accept="image/*" name="mapImageInput">

<div class="board" id="board"></div>

<script>
let unitCount=0;
let highestZIndex=1;

// Start constant declarations
const board=document.getElementById('board');
for (let i=0; i < 49; i++) {
const square=document.createElement('div');
square.className='square';
board.appendChild(square);
}
// End constant declarations

// start of drag functions

let isDragging = false;
let draggedElement = null;
let offsetX, offsetY;
let boardRect;

document.addEventListener('mousedown', onMouseDown);
document.addEventListener('mousemove', onMouseMove);
document.addEventListener('mouseup', onMouseUp);

function onMouseDown(event) {
if (event.target.classList.contains('unit')) {
isDragging = true;
draggedElement = event.target;
offsetX = event.clientX - draggedElement.offsetLeft;
offsetY = event.clientY - draggedElement.offsetTop;
draggedElement.style.zIndex = '2'; // Bring the element to the top
document.addEventListener('selectstart', preventDefault); // Prevent text selection during drag
boardRect = document.getElementById('board').getBoundingClientRect(); // Get board dimensions
}
}

function onMouseMove(event) {
if (isDragging) {
event.preventDefault();
const mouseX = event.clientX - offsetX;
const mouseY = event.clientY - offsetY;

// Enforce maximum draggable area
const maxX = boardRect.width - draggedElement.offsetWidth;
const maxY = boardRect.height - draggedElement.offsetHeight;
const newX = Math.min(Math.max(0, mouseX), maxX);
const newY = Math.min(Math.max(0, mouseY), maxY);

// Snap to grid
const cellSize = 100;
const gridX = Math.round(newX / cellSize) * cellSize;
const gridY = Math.round(newY / cellSize) * cellSize;

draggedElement.style.left = `${gridX}px`;
draggedElement.style.top = `${gridY}px`;
}
}

function onMouseUp() {
if (isDragging) {
isDragging = false;
draggedElement.style.zIndex = '1'; // Restore the z-index
document.removeEventListener('selectstart', preventDefault);
}
}

function preventDefault(event) {
event.preventDefault();
}

// End of the drag functions

const lastRolls=[];

// Function to display the last 5 rolls on the webpage
function displayLastRolls() {
const resultsContainer=document.getElementById('resultsContainer');
resultsContainer.innerHTML=lastRolls.join('<br>');
}

// Function to roll a random 20-sided die (D20)
function rollD20() {
const result=Math.floor(Math.random() * 20) + 1;
lastRolls.push(`D20 Result:${result}`);
if (lastRolls.length > 5) {
lastRolls.shift(); // Remove the oldest roll
}
displayLastRolls();
}

// Function to roll a 12-sided die (D12)
function rollD12() {
const result=Math.floor(Math.random() * 12) + 1;
lastRolls.push(`D12 Result:${result}`);
if (lastRolls.length > 5) {
lastRolls.shift(); // Remove the oldest roll
}
displayLastRolls();
}

// Function to roll a 10-sided die (D10)
function rollD10() {
const result=Math.floor(Math.random() * 10) + 1;
lastRolls.push(`D10 Result:${result}`);
if (lastRolls.length > 5) {
lastRolls.shift(); // Remove the oldest roll
}
displayLastRolls();
}

// Function to roll an 8-sided die (D8)
function rollD8() {
const result=Math.floor(Math.random() * 8) + 1;
lastRolls.push(`D8 Result:${result}`);
if (lastRolls.length > 5) {
lastRolls.shift(); // Remove the oldest roll
}
displayLastRolls();
}

// Function to roll a 6-sided die (D6)
function rollD6() {
const result=Math.floor(Math.random() * 6) + 1;
lastRolls.push(`D6 Result:${result}`);
if (lastRolls.length > 5) {
lastRolls.shift(); // Remove the oldest roll
}
displayLastRolls();
}

// Function to roll a 4-sided die (D4)
function rollD4() {
const result=Math.floor(Math.random() * 4) + 1;
lastRolls.push(`D4 Result:${result}`);
if (lastRolls.length > 5) {
lastRolls.shift(); // Remove the oldest roll
}
displayLastRolls();
}

// Event listeners for rolling each die
document.addEventListener('DOMContentLoaded',function() {
document.getElementById('rollD20Button').addEventListener('click',rollD20);
document.getElementById('rollD12Button').addEventListener('click',rollD12);
document.getElementById('rollD10Button').addEventListener('click',rollD10);
document.getElementById('rollD8Button').addEventListener('click',rollD8);
document.getElementById('rollD6Button').addEventListener('click',rollD6);
document.getElementById('rollD4Button').addEventListener('click',rollD4);
});

// Beginning of map image loading functions
let currentMapImage='Map.png';

function loadMapImage(event) {
const mapImage=document.createElement('img');
const file=event.target.files[0];

if (file) {
currentMapImage=URL.createObjectURL(file);
mapImage.src=currentMapImage;
mapImage.style.position='absolute';
mapImage.style.width='100%';
mapImage.style.height='100%';
mapImage.style.top='0';
mapImage.style.left='0';
mapImage.style.zIndex='-1';
const board=document.getElementById('board');
board.innerHTML='';
board.appendChild(mapImage);
changeMap();
}
}

document.getElementById('mapImageInput').addEventListener('change',loadMapImage);

const defaultMapImage=new Image();
defaultMapImage.src='Maps/Map.png';

defaultMapImage.onload=function() {
const board=document.getElementById('board');
board.style.backgroundImage=`url(${defaultMapImage.src})`;
board.style.backgroundSize='cover';
}

function changeMap() {
const board=document.getElementById('board');
board.style.backgroundImage=`url(${currentMapImage})`;
board.style.backgroundSize='cover';
}
// End of map image loading functions

function getRotationDegrees(element) {
const transform=window.getComputedStyle(element).getPropertyValue('transform');
if (transform && transform !== 'none') {
const matrix=new DOMMatrix(transform);
return Math.round(Math.atan2(matrix.b,matrix.a) * (180/Math.PI));
}
return 0;
}

// Start drag and drop functions
function onDragStart(event) {
isDragging=true;
event.dataTransfer.setData('text/plain',event.target.id);

const rect=event.target.getBoundingClientRect();
offsetX=event.clientX - rect.left;
offsetY=event.clientY - rect.top;
draggedElement=event.target;

highestZIndex++;
draggedElement.style.zIndex=highestZIndex;
}

function onDragOver(event) {
event.preventDefault();
}

function onDrop(event) {
event.preventDefault();
const data=event.dataTransfer.getData('text/plain');
const draggedElement=document.getElementById(data);
const cellSize=100;

if (draggedElement) {
const mouseX=event.clientX - board.offsetLeft;
const mouseY=event.clientY - board.offsetTop;

const cellX=Math.floor(mouseX / cellSize) * cellSize;
const cellY=Math.floor(mouseY / cellSize) * cellSize;

draggedElement.style.left=`${cellX}px`;
draggedElement.style.top=`${cellY}px`;
}
}

board.addEventListener('dragover',(event) => {
event.preventDefault();
});

board.addEventListener('drop',(event) => {
event.preventDefault();
const data=event.dataTransfer.getData('text/plain');
const draggedElement=document.getElementById(data);
const cellSize=100;

if (draggedElement) {
const mouseX=event.clientX - board.offsetLeft;
const mouseY=event.clientY - board.offsetTop;

const cellX=Math.floor(mouseX / cellSize) * cellSize;
const cellY=Math.floor(mouseY / cellSize) * cellSize;

draggedElement.style.left=`${cellX}px`;
draggedElement.style.top=`${cellY}px`;
}
});

document.addEventListener('mousemove',onMouseMove);

function onMouseMove(event) {
if (isDragging) {
const mouseX=event.clientX - offsetX + window.scrollX;
const mouseY=event.clientY - offsetY + window.scrollY;
const boardRect=board.getBoundingClientRect();
const maxX=boardRect.width - draggedElement.offsetWidth;
const maxY=boardRect.height - draggedElement.offsetHeight;
const newX=Math.min(Math.max(0,mouseX),maxX);
const newY=Math.min(Math.max(0,mouseY),maxY);
draggedElement.style.left=`${newX}px`;
draggedElement.style.top=`${newY}px`;
}
}

document.addEventListener('mouseup',onMouseUp);

function onMouseUp() {
if (isDragging) {
isDragging=false;
}
}

document.addEventListener('dragend',() => {
isDragging=false;
draggedElement=null;
});
// End drag and drop functions

let selectedUnit = null; // Variable to keep track of the selected unit

function createUnit() {
const unitElement=document.createElement('div');
unitElement.className='unit';
unitElement.draggable=true;
unitElement.id=`unit-${unitCount}`;
unitElement.ondragstart=onDragStart;

// Create a radio button for targeting
const targetRadio = document.createElement('input');
targetRadio.type = 'radio';
targetRadio.name = 'target';
targetRadio.id = `target-${unitCount}`;
targetRadio.style.position = 'relative';

// Label for the radio button (optional)
const targetLabel = document.createElement('label');
targetLabel.htmlFor = `target-${unitCount}`;
targetLabel.textContent = `Target Unit ${unitCount}`;
targetLabel.style.position = 'relative';

// Add an event listener to handle targeting
targetRadio.addEventListener('change', function() {
if (selectedUnit) {
selectedUnit.style.border = '2px solid black'; // Reset border of previously selected unit
}
selectedUnit = unitElement; // Update the selected unit
// Set visual indication on unit face
unitElement.style.border = '2px solid red'; // Change border color to indicate selection
unitElement.style.boxShadow = '0px 0px 10px rgba(255, 0, 0, 0.5)'; // Add shadow for emphasis
});

const rotateButton=document.createElement('button');
rotateButton.textContent='R';
rotateButton.className='rotate-button';

rotateButton.addEventListener('click',function(event) {
event.stopPropagation(); // Stop event from bubbling up
let currentRotation=0;

const transform=unitElement.style.transform;
const match=transform && transform.match(/\d+/);

if (match) {
currentRotation=parseInt(match[0],10);
}
unitElement.style.transform=`rotate(${(currentRotation + 45) % 360}deg)`;
});

const menuButton=document.createElement('button');
menuButton.className='menu-button';
menuButton.textContent='M';

const menu=document.createElement('div');
menu.className='menu';

const nameLabel=document.createElement('div');
nameLabel.className='menu-item';
nameLabel.textContent='Name:';

const nameInput=document.createElement('input');
nameInput.id = 'nameInputId-' + unitCount;
nameInput.type='text';
nameInput.className='menu-input';
nameInput.name = 'nameInputName-' + unitCount;
nameInput.placeholder='character or monster name';
nameInput.maxLength=9;
nameInput.size=9;
nameInput.style.width='10em';
nameInput.addEventListener('input',function() {
nameUnit.textContent=nameInput.value;
});

const classLabel = document.createElement('div');
classLabel.className = 'menu-item';
classLabel.textContent = 'Class:';

const classSelect = document.createElement('select');
classSelect.className = 'menu-input';
classSelect.setAttribute('id', `classSelectId-${unitCount}`); // Unique ID for each selection
classSelect.setAttribute('name', `classSelectName-${unitCount}`); // Unique name for each selection

const classes = ['Cleric', 'Fighter', 'Magic-User', 'Paladin', 'Ranger', 'Thief'];

classes.forEach(className => {
const option = document.createElement('option');
option.value = className;
option.textContent = className;
classSelect.appendChild(option);
});

classSelect.addEventListener('change', function() {
classUnit.textContent = classSelect.value;
});

const classUnit = document.createElement('div');
classUnit.className = 'menu-item';
classUnit.textContent = 'Class:';

// Append everything to the container
const container = document.createElement('div');
container.appendChild(nameLabel);
container.appendChild(nameInput);
container.appendChild(classLabel);
container.appendChild(classSelect);
container.appendChild(classUnit);

// Create a container for the race dropdown menu
const raceContainer = document.createElement('div');

// Race Label
const raceLabel = document.createElement('div');
raceLabel.className = 'menu-item';
raceLabel.textContent = 'Race:';

// Race Dropdown Select
const raceSelect = document.createElement('select');
raceSelect.className = 'menu-input';
raceSelect.setAttribute('id', `raceSelectId-${unitCount}`); // Unique ID for each selection
raceSelect.setAttribute('name', `raceSelectName-${unitCount}`); // Unique name for each selection

const races = ['Dwarf', 'Elf', 'Half-Elf', 'Gnome', 'Human', 'Halfling', 'Orc', 'Half-Orc'];

races.forEach(raceName => {
const option = document.createElement('option');
option.value = raceName;
option.textContent = raceName;
raceSelect.appendChild(option);
});

raceSelect.addEventListener('change', function() {
raceUnit.textContent = raceSelect.value;
});

// Race Unit
const raceUnit = document.createElement('div');
raceUnit.className = 'menu-item';
raceUnit.textContent = 'Race:';

// Append race elements to the race container
raceContainer.appendChild(raceLabel);
raceContainer.appendChild(raceSelect);
raceContainer.appendChild(raceUnit);

// Strength
const strengthLabel = document.createElement('div');
strengthLabel.className = 'menu-item';
strengthLabel.textContent = 'S:';

const strengthInput = document.createElement('input');
strengthInput.className = 'menu-input';
strengthInput.id = 'strengthInputId-' + unitCount;
strengthInput.maxLength = 2;
strengthInput.name='strengthInputName-' +unitCount;
strengthInput.size = 2;
strengthInput.style.width = '3em';
strengthInput.type = 'text';

// Dexterity
const dexterityLabel = document.createElement('div');
dexterityLabel.className = 'menu-item';
dexterityLabel.textContent = 'D:';

const dexterityInput = document.createElement('input');
dexterityInput.className = 'menu-input';
dexterityInput.id = 'dexterityInputId-' + unitCount;
dexterityInput.maxLength = 2;
dexterityInput.name = 'dexterityInputName-' + unitCount;
dexterityInput.size = 2;
dexterityInput.style.width = '3em';
dexterityInput.type = 'text';

// Constitution
const constitutionLabel = document.createElement('div');
constitutionLabel.className = 'menu-item';
constitutionLabel.textContent = 'Co:';

const constitutionInput = document.createElement('input');
constitutionInput.className = 'menu-input';
constitutionInput.id = 'constitutionInputId-' + unitCount;
constitutionInput.maxLength = 2;
constitutionInput.name = 'constitutionInputName-' + unitCount;
constitutionInput.size = 2;
constitutionInput.style.width = '3em';
constitutionInput.type = 'text';

// Intelligence
const intelligenceLabel = document.createElement('div');
intelligenceLabel.className = 'menu-item';
intelligenceLabel.textContent = 'I:';

const intelligenceInput = document.createElement('input');
intelligenceInput.className = 'menu-input';
intelligenceInput.id = 'intelligenceInputId-' + unitCount;
intelligenceInput.maxLength = 2;
intelligenceInput.name = 'intelligenceInputName-' + unitCount;
intelligenceInput.size = 2;
intelligenceInput.style.width = '3em';
intelligenceInput.type = 'text';

// Wisdom
const wisdomLabel = document.createElement('div');
wisdomLabel.className = 'menu-item';
wisdomLabel.textContent = 'W:';

const wisdomInput = document.createElement('input');
wisdomInput.className = 'menu-input';
wisdomInput.id = 'wisdomInputId-' + unitCount;
wisdomInput.maxLength = 2;
wisdomInput.name = 'wisdomInputName-' + unitCount;
wisdomInput.size = 2;
wisdomInput.style.width = '3em';
wisdomInput.type = 'text';

// Charisma
const charismaLabel = document.createElement('div');
charismaLabel.className = 'menu-item';
charismaLabel.textContent = 'Ch:';

const charismaInput = document.createElement('input');
charismaInput.className = 'menu-input';
charismaInput.id = 'charismaInputId-' + unitCount;
charismaInput.maxLength = 2;
charismaInput.name = 'charismaInputName-' + unitCount;
charismaInput.size = 2;
charismaInput.style.width = '3em';
charismaInput.type = 'text';

const addImageButton=Object.assign(document.createElement('button'),{
className:'menu-button',
textContent:'Add a miniature?',
onclick:function() {
imageInput.click();
}
});

const imageInput=Object.assign(document.createElement('input'),{
type:'file',
accept:'image/*',
style:'display:none;'
});

imageInput.addEventListener('change',function() {
const file=this.files[0];
const reader=new FileReader();

reader.onload=function() {
const imageElement=document.createElement('img');
imageElement.src=reader.result;

// Add an event listener to the image to prevent dragging
imageElement.addEventListener('dragstart',function(event) {
event.preventDefault();
});

unitElement.style.backgroundImage=`url(${reader.result})`; // Set image as background

// Remove the added image element
imageElement.remove();
}

reader.readAsDataURL(file);
});

const movementLabel=document.createElement('div');
movementLabel.className='menu-item';
movementLabel.textContent='MV:';

const movementInput=document.createElement('input');
movementInput.className='menu-input';
movementInput.id='movementInputId'+unitCount;
movementInput.maxLength=2;
movementInput.name='movementInputName'+unitCount;
movementInput.size=2;
movementInput.style.width='3em';
movementInput.type='text';

const armorClassLabel=document.createElement('div');
armorClassLabel.className='menu-item';
armorClassLabel.textContent='AC:';

const armorClassInput=document.createElement('input');
armorClassInput.className='menu-input';
armorClassInput.id = 'armorClassInputId-' + unitCount;
armorClassInput.maxLength=2;
armorClassInput.name = 'armorClassInputName-' + unitCount;
armorClassInput.size=2;
armorClassInput.style.width='3em';
armorClassInput.type='text';
armorClassInput.addEventListener('input',function() {
unitElement.dataset.ac=armorClassInput.value;
armorClassUnit.textContent=`AC:${armorClassInput.value}`;
});
const armorClassUnit=document.createElement('div');
armorClassUnit.className='menu-item';
armorClassUnit.textContent='AC:';

const hitDiceLabel=document.createElement('div');
hitDiceLabel.className='menu-item';
hitDiceLabel.textContent='HD:';
const hitDiceInput=document.createElement('input');
hitDiceInput.className='menu-input';
hitDiceInput.id='hitDiceInputId'+unitCount;
hitDiceInput.maxLength=8;
hitDiceInput.name='hitDiceInputName'+unitCount;
hitDiceInput.size=8;
hitDiceInput.style.width='9em';
hitDiceInput.type='text';

const maximumHitPointsLabel=document.createElement('div');
maximumHitPointsLabel.className='menu-item';
maximumHitPointsLabel.textContent='maxHP:';

const maximumHitPointsInput=Object.assign
(
document.createElement('input'),
{
className:'menu-input',
id:'maximumHitPointsInputId'+unitCount,
maxLength:3,
name:'maximumHitPointsInputName'+unitCount,
oninput:function()
{
currentHitPointsInput.value=this.value;
currentHitPointsUnit.textContent=`HP:${this.value}`;
},
size:3,
style:'width:4em;',
type:'text',
}
);

const currentHitPointsLabel=document.createElement('div');
currentHitPointsLabel.className='menu-item';
currentHitPointsLabel.textContent='curHP:';
const currentHitPointsInput=document.createElement('input');
currentHitPointsInput.className='menu-input';
currentHitPointsInput.id='currentHitPointsInputId'+unitCount;
currentHitPointsInput.maxLength=3;
currentHitPointsInput.name='currentHitPointsInputName'+unitCount;
currentHitPointsInput.size=3;
currentHitPointsInput.style.width='4em';
currentHitPointsInput.type='text';
const currentHitPointsUnit=document.createElement('div');
currentHitPointsUnit.className='menu-item';
currentHitPointsUnit.textContent='HP:';
currentHitPointsInput.addEventListener('input',
function() {
unitElement.dataset.curHP=currentHitPointsInput.value;
currentHitPointsUnit.textContent=`HP:${currentHitPointsInput.value}`;
});

const menuAddRowButton=document.createElement('button');
menuAddRowButton.className='menu-button';
menuAddRowButton.textContent='Add a weapon or spell and effect?';

menuAddRowButton.addEventListener('click',function() {
const newRow=document.createElement('div');
newRow.className='menu-item';

const newAttackName=document.createElement('input');
newAttackName.type='text';
newAttackName.className='menu-input';
newAttackName.placeholder='weapon or spell name and effect';
newAttackName.maxLength=9;
newAttackName.size=9;
newAttackName.style.width='10em';
newRow.appendChild(newAttackName);

const newAttackRoll=document.createElement('input');
newAttackRoll.type='text';
newAttackRoll.className='menu-input';
newAttackRoll.placeholder='Attack Roll';
newAttackRoll.maxLength=8;
newAttackRoll.size=8;
newAttackRoll.style.width='9em';
newRow.appendChild(newAttackRoll);

const attackRollResult = document.createElement('span');
attackRollResult.className = 'attack-roll-result';

newRow.appendChild(newAttackRoll);
newRow.appendChild(attackRollResult);

newAttackRoll.addEventListener('mouseout', function() {
  const attackRollValue = newAttackRoll.value;
  const rollResult = rollDice(attackRollValue);
  attackRollResult.textContent = `Attack Result: ${rollResult}`; // Update the result display
});

const newDamageRoll=document.createElement('input');
newDamageRoll.type='text';
newDamageRoll.className='menu-input';
newDamageRoll.placeholder='Damage Roll';
newDamageRoll.maxLength=8;
newDamageRoll.size=8;
newDamageRoll.style.width='17em';
newRow.appendChild(newDamageRoll);

function rollDice(diceString) {
const [numDice, numSides, modifier] = diceString.match(/(\d+)d(\d+)(\+\d+)?/).slice(1).map(Number);
let total = 0;
for (let i = 0; i < numDice; i++) {
total += Math.floor(Math.random() * numSides) + 1;
}
total += modifier || 0;
return total;
}

const damageRollResult = document.createElement('span');
damageRollResult.className = 'damage-roll-result';

newRow.appendChild(newDamageRoll);
newRow.appendChild(damageRollResult);

newDamageRoll.addEventListener('mouseout', function() {
  const damageRollValue = newDamageRoll.value;
  const rollResult = rollDice(damageRollValue);
  damageRollResult.textContent = `Damage Result: ${rollResult}`; // Update the result display
});

newRow.appendChild(newDamageRoll);

// ... (rest of the code remains the same)


menu.insertBefore(newRow,menuAddRowButton);
});

const deleteButton=document.createElement('button');
deleteButton.className='menu-button';
deleteButton.textContent='Delete this piece?';
deleteButton.addEventListener('click',function() {
menu.remove();
unitElement.remove();
});

menuButton.addEventListener('click',function(event) {
event.stopPropagation();
menu.style.display='inline-block';
});

document.addEventListener('click',function() {
//menu.style.display='none';
});

menu.addEventListener('click',function(event) {
event.stopPropagation();
});

movementInput.addEventListener('input',function() {
unitElement.dataset.mv=movementInput.value;
movementUnit.textContent=`MV:${movementInput.value}`;
});

hitDiceInput.addEventListener('input',function() {
unitElement.dataset.hd=hitDiceInput.value;
hitDiceUnit.textContent=`HD:${hitDiceInput.value}`;
});

const nameUnit=document.createElement('div');
nameUnit.className='menu-item';
nameUnit.textContent='Name';

const movementUnit=document.createElement('div');
movementUnit.className='menu-item';
movementUnit.textContent='MV:';

movementInput.addEventListener('input',function() {
unitElement.dataset.mv=movementInput.value;
movementUnit.textContent=`MV:${movementInput.value}`;
});

const hitDiceUnit=document.createElement('div');
hitDiceUnit.className='menu-item';
hitDiceUnit.textContent='HD:';

hitDiceInput.addEventListener('input',function() {
unitElement.dataset.hd=hitDiceInput.value;
hitDiceUnit.textContent=`HD:${hitDiceInput.value}`;
});

unitElement.appendChild(rotateButton);
unitElement.style.left='0';
unitElement.style.top='0';
unitElement.appendChild(targetRadio);
unitElement.appendChild(targetLabel);
unitElement.appendChild(armorClassUnit);
unitElement.appendChild(hitDiceUnit);
unitElement.appendChild(currentHitPointsUnit);
unitElement.appendChild(movementUnit);
unitElement.appendChild(nameUnit);

board.appendChild(unitElement);

menu.appendChild(nameLabel);
menu.appendChild(nameInput);
menu.appendChild(addImageButton);
menu.appendChild(imageInput);
menu.appendChild(armorClassLabel);
menu.appendChild(armorClassInput);
menu.appendChild(hitDiceLabel);
menu.appendChild(hitDiceInput);
menu.appendChild(maximumHitPointsLabel);
menu.appendChild(maximumHitPointsInput);
menu.appendChild(currentHitPointsLabel);
menu.appendChild(currentHitPointsInput);
menu.appendChild(movementLabel);
menu.appendChild(movementInput);
menu.appendChild(menuAddRowButton);
menu.appendChild(strengthLabel);
menu.appendChild(strengthInput);
menu.appendChild(dexterityLabel);
menu.appendChild(dexterityInput);
menu.appendChild(constitutionLabel);
menu.appendChild(constitutionInput);
menu.appendChild(intelligenceLabel);
menu.appendChild(intelligenceInput);
menu.appendChild(wisdomLabel);
menu.appendChild(wisdomInput);
menu.appendChild(charismaLabel);
menu.appendChild(charismaInput);
menu.appendChild(container);
menu.appendChild(raceContainer);
menu.appendChild(deleteButton);

document.body.appendChild(menu);

unitCount++;
return unitElement;
}
</script>
</head>

</td></tr><tr><td>
<a href='https://archive.org/details/tsr02011advanceddungeonsdragonsadd1steddungeonmastersguide/page/n74/mode/1up' target='_blank'>1st Edition Dungeon Masters Guide Combat Tables</a>
<br>
<a href='https://archive.org/details/tsr02009addmonstermanual/mode/1up' target='_blank'>1st Edition Monster Manual</a>
<br>
<a href='https://archive.org/details/tsr09045addthesecretofbonehill/mode/1up' target='_blank'>Dungeon Module L1 "The Secret of Bone Hill</a>
<br>

<img src='Decorations/DiceSprite.png'><br>
<button id="rollD20Button">Roll D20</button>
<button id="rollD12Button">Roll D12</button>
<button id="rollD10Button">Roll D10</button>
<button id="rollD8Button">Roll D8</button>
<button id="rollD6Button">Roll D6</button>
<button id="rollD4Button">Roll D4</button>

<div id="resultsContainer"></div>
</td></tr><td></td><tr><td>
<img src=Decorations/Table1.png>
<img src=Decorations/Table2.png>
<img src=Decorations/Table3.png>
<img src=Decorations/Table4.png>
<img src=Decorations/Table5.png>
<img src=Decorations/Table6.png>
</td></tr></table>
</body>
</html>
