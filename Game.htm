<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" type="text/css" href="style.css">

    <style>
        .delete-btn,
        .rotate-btn {
            display: block;
        }

        .drag-handle {
            width: 100%;
            height: 10px;
            background-color: #ccc;
            position: absolute;
            top: 0;
            left: 0;
            cursor: move;
            text-align: center;
            line-height: 10px;
            font-size: 10px;
            color: #000;
        }

        .game-container {
            border: 1px solid #000;
            height: 600px;
            position: relative;
            width: 600px;
        }

        .grid-cell {
            border: 1px solid #ccc;
            box-sizing: border-box;
            height: 100px;
            position: relative;
            width: 100px;
        }

        .grid-row {
            display: flex;
            height: 100px;
        }

        .unit {
            border: 1px solid #000;
            cursor: move;
            height: 50px;
            position: absolute;
            width: 50px;
        }

        .unit input {
            width: 8ch;
        }

    </style>

</head>

<body>
This game works in Chrome.
    <button onclick="createUnit()">Create Unit</button>
    <div id="game-container" class="game-container">
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
        <div class="grid-row">
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
            <div class="grid-cell"></div>
        </div>
    </div>

    <button onclick="saveGame()">Save Game</button>
</body>

<script>
let units = [];

function createUnit() {
    let unit = document.createElement("div");
    unit.className = "unit";
    unit.innerHTML = `
        <div class="drag-handle">Drag</div>
        <input type="button" class="rotate-btn" value="Rotate" onclick="rotateUnit(this)">
        <input type="text" class="armor-class" placeholder="AC">
        <input type="text" class="hit-dice" placeholder="HD">
        <input type="text" class="hit-points" placeholder="HP">
        <input type="text" class="damage-dice" placeholder="XdY+Z" onmouseout="calculateDamageResult(this)">
        <div class="damage-result"></div>
        <input type="button" class="delete-btn" value="Delete" onclick="deleteUnit(this)">
    `;

    unit.style.left = "0px";
    unit.style.top = "0px";

    document.getElementById("game-container").appendChild(unit);
    units.push(unit);

    unit.draggable = true;
    unit.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', null);
        e.target.classList.add('dragging');
    });
    unit.addEventListener('dragend', (e) => {
        e.target.classList.remove('dragging');
        saveGame();
    });
}

function deleteUnit(button) {
    let unit = button.parentElement;
    unit.parentNode.removeChild(unit);
    units = units.filter(u => u !== unit);
    saveGame();
}

function rotateUnit(button) {
    let unit = button.parentElement;
    let rotation = (parseInt(unit.style.transform.replace("rotate(", "").replace("deg)", "")) || 0) + 45;
    unit.style.transform = `rotate(${rotation}deg)`;
    saveGame();
}

function calculateDamageResult(input) {
    let damageDiceValue = input.value;
    let unit = input.parentElement;
    let damageResultElement = unit.querySelector('.damage-result');

    let regex = /^(\d+)d(\d+)\+(\d+)$/;
    let match = damageDiceValue.match(regex);

    if (match) {
        let numDice = parseInt(match[1]);
        let numSides = parseInt(match[2]);
        let constant = parseInt(match[3]);

        if (!isNaN(numDice) && !isNaN(numSides) && !isNaN(constant)) {
            let result = constant;
            for (let i = 0; i < numDice; i++) {
                result += Math.floor(Math.random() * numSides) + 1;
            }

            damageResultElement.textContent = `Result: ${result}`;
        } else {
            damageResultElement.textContent = 'Invalid input format';
        }
    } else {
        damageResultElement.textContent = 'Invalid input format';
    }
}

function saveGame() {
    let savedUnits = units.map(unit => {
        return {
            left: unit.style.left,
            top: unit.style.top,
            transform: unit.style.transform,
            ac: unit.querySelector('.armor-class').value,
            hd: unit.querySelector('.hit-dice').value,
            hp: unit.querySelector('.hit-points').value,
            damageDice: unit.querySelector('.damage-dice').value
        };
    });
    localStorage.setItem("units", JSON.stringify(savedUnits));
}

function loadGame() {
    let savedUnits = JSON.parse(localStorage.getItem("units"));
    if (savedUnits) {
        savedUnits.forEach(savedUnit => {
            let unit = document.createElement("div");
            unit.className = "unit";
            unit.innerHTML = `
                <div class="drag-handle">Drag</div>
                <input type="button" class="rotate-btn" value="Rotate" onclick="rotateUnit(this)">
                <input type="text" class="armor-class" placeholder="AC">
                <input type="text" class="hit-dice" placeholder="HD">
                <input type="text" class="hit-points" placeholder="HP">
                <input type="text" class="damage-dice" placeholder="XdY+Z" onmouseout="calculateDamageResult(this)">
                <div class="damage-result"></div>
                <input type="button" class="delete-btn" value="Delete" onclick="deleteUnit(this)">
            `;

            unit.style.left = savedUnit.left;
            unit.style.top = savedUnit.top;
            unit.style.transform = savedUnit.transform;
            unit.querySelector('.armor-class').value = savedUnit.ac;
            unit.querySelector('.hit-dice').value = savedUnit.hd;
            unit.querySelector('.hit-points').value = savedUnit.hp;
            unit.querySelector('.damage-dice').value = savedUnit.damageDice;

            document.getElementById("game-container").appendChild(unit);
            units.push(unit);

            unit.draggable = true;
            unit.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', null);
                e.target.classList.add('dragging');
            });
            unit.addEventListener('dragend', (e) => {
                e.target.classList.remove('dragging');
                saveGame();
            });
        });
    }
}

document.addEventListener("DOMContentLoaded", () => {
    loadGame();
});

document.addEventListener('dragover', function (e) {
    e.preventDefault();
});

document.addEventListener('drop', function (e) {
    e.preventDefault();
});

document.addEventListener('drag', function (e) {
    let unit = document.querySelector('.unit.dragging');
    if (unit) {
        let rect = document.getElementById("game-container").getBoundingClientRect();

        let newX = e.clientX - rect.left;
        let newY = e.clientY - rect.top;

        unit.style.left = `${newX}px`;
        unit.style.top = `${newY}px`;
    }
});

</script>

</html>
