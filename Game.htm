<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Advanced Dungeons & Dragons</title>
<style>
body, button, input 
{
background-color:white;
border: 0px;
color: black;
display: inline-block;
font-size: 9px;
margin: 1px 1px;
padding: 1px 1px;
}

.drag-handle 
{

}

 .game-container {
 border: 1px solid #000;
 height: 600px;
 position: relative;
 width: 600px;
 }

 .grid-cell {
 border: 1px solid #ccc;
 box-sizing: border-box;
 height: 100px;
 position: relative;
 width: 100px;
 }

 .grid-row {
 display: flex;
 height: 100px;
 }

 .unit 
 {
 border: 1px solid #000;
 cursor: move;
 height: 100px;
 position: absolute;
 width: 100px;
}

 .unit .armor-class {
 width: 20ch;
 }

 .unit .image-container {
 position: relative;
 text-align: right;
 }

.unit img 
{
float: right;
max-height: 50%;
max-width: 50%;
}

 .unit input[type="file"] {
 display: none;
 }

 .attack-dice-container {
 display: block;
 }

 .attack-dice-input {
 width: 10ch;
 }
 
 .unit .damage-dice {
 width: 10ch;
 }
 
     .unit .drag-handle {
      cursor: move;
      user-select: none;
      display: inline-block;
      font-size: 10px;
      line-height: 20px;
      width: 100%;
      text-align: center;
      touch-action: pan-x pan-y;
    }

    .unit .drag-handle span {
      pointer-events: none;
    }
</style>
</head>

<body>

<button onclick="useMapImage()">Use Map Image</button>
<p>
<button onclick="createUnit()">Create Unit</button><p>
 Attack Dice for all pieces.<span class="attack-dice-container">
<input type="text" class="attack-dice-input" placeholder="XdY+Z" onmouseout="calculateAttackResult(this)" value="1d20+0">
<span class="result">Result: 4</span>
</span>
<div id="game-container" class="game-container">
</div>

<button onclick="saveGame()">Save Game</button>

<script>

function useMapImage() {
  const fileInput = document.createElement('input');
  fileInput.type = 'file';
  fileInput.accept = 'image/*';
  fileInput.onchange = function (event) {
    const input = event.target;
    const file = input.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function () {
        const gameContainer = document.getElementById('game-container');
        gameContainer.style.backgroundImage = `url('${reader.result}')`;

        // Save the image source to localStorage
        localStorage.setItem('mapImage', reader.result);
      };
      reader.readAsDataURL(file);
    }
  };
  fileInput.click();
}

let currentDraggedUnit = null;

function onTouchStart(e) {
  const touch = e.touches[0];
  const target = document.elementFromPoint(touch.clientX, touch.clientY);

  if (target && target.classList.contains('drag-handle')) {
    currentDraggedUnit = target.closest('.unit');
    currentDraggedUnit.classList.add('dragging');
  }
}

function onTouchMove(e) {
  if (currentDraggedUnit) {
    const touch = e.touches[0];
    const rect = document.getElementById("game-container").getBoundingClientRect();
    const newX = touch.clientX - rect.left;
    const newY = touch.clientY - rect.top;
    currentDraggedUnit.style.left = `${newX}px`;
    currentDraggedUnit.style.top = `${newY}px`;
  }
}

function onTouchEnd() {
  if (currentDraggedUnit) {
    currentDraggedUnit.classList.remove('dragging');
    saveGame();
    currentDraggedUnit = null;
  }
}

document.addEventListener('touchstart', onTouchStart);
document.addEventListener('touchmove', onTouchMove);
document.addEventListener('touchend', onTouchEnd);

 let units = [];

 function calculateAttackResult(input) {
 let attackDiceValue = input.value;
 let resultElement = input.nextElementSibling;

 let regex = /^(\d+)d(4|6|8|10|12|20)\+(\d+)$/;
 let match = attackDiceValue.match(regex);

 if (match) {
 let numDice = parseInt(match[1]);
 let numSides = parseInt(match[2]);
 let constant = parseInt(match[3]);

 if (!isNaN(numDice) && !isNaN(numSides) && !isNaN(constant) && [4, 6, 8, 10, 12, 20].includes(numSides)) {
 let result = constant;
 for (let i = 0; i< numDice; i++) {
 result += Math.floor(Math.random() * numSides) + 1;
 }

 resultElement.textContent = `=: ${result}`;
 } else {
 resultElement.textContent = 'Invalid input format';
 }
 } else {
 resultElement.textContent = 'Invalid input format';
 }
 }

 function createUnit() {
 let unit = document.createElement("div");
 unit.className = "unit";
 unit.innerHTML = `
 Stat<input type="text" class="armor-class" placeholder="AC HD curHP/maxHP">
 Dice<input type="text" class="damage-dice" placeholder="XdY+Z" onmouseout="calculateDamageResult(this)">
<span class="damage-result"></span>
<span class="drag-handle">Drag</span>
<input type="button" value="Rota" onclick="rotateUnit(this)">
<span class="image-container">
<button onclick="selectImage(this)">Mini</button>
<img src="">
<input type="file" accept="image/*" onchange="loadImage(event)">
</span>
<input type="button" value="Dele" onclick="deleteUnit(this)">
 `;

 unit.style.left = "0px";
 unit.style.top = "0px";

 document.getElementById("game-container").appendChild(unit);
 units.push(unit);

 unit.draggable = true;
 unit.addEventListener('dragstart', (e) => {
 e.dataTransfer.setData('text/plain', null);
 e.target.classList.add('dragging');
 });
 unit.addEventListener('dragend', (e) => {
 e.target.classList.remove('dragging');
 saveGame();
 });
 }

 function deleteUnit(button) {
 let unit = button.parentElement;
 unit.parentNode.removeChild(unit);
 units = units.filter(u => u !== unit);
 saveGame();
 }

 function rotateUnit(button) {
 let unit = button.parentElement;
 let rotation = (parseInt(unit.style.transform.replace("rotate(", "").replace("deg)", "")) || 0) + 45;
 unit.style.transform = `rotate(${rotation}deg)`;
 saveGame();
 }

 function calculateDamageResult(input) {
 let damageDiceValue = input.value;
 let unit = input.parentElement;
 let damageResultElement = unit.querySelector('.damage-result');

 let regex = /^(\d+)d(\d+)\+(\d+)$/;
 let match = damageDiceValue.match(regex);

 if (match) {
 let numDice = parseInt(match[1]);
 let numSides = parseInt(match[2]);
 let constant = parseInt(match[3]);

 if (!isNaN(numDice) && !isNaN(numSides) && !isNaN(constant)) {
 let result = constant;
 for (let i = 0; i< numDice; i++) {
 result += Math.floor(Math.random() * numSides) + 1;
 }

 damageResultElement.textContent = `=: ${result}`;
 } else {
 damageResultElement.textContent = 'Invalid input format';
 }
 } else {
 damageResultElement.textContent = 'Invalid input format';
 }
 }

 function selectImage(button) {
 let unit = button.parentElement.parentElement;
 let fileInput = unit.querySelector('input[type="file"]');
 fileInput.click();
 }

 function loadImage(event) {
 let input = event.target;
 let unit = input.parentElement.parentElement;

 let img = unit.querySelector('img');
 let file = input.files[0];
 let reader = new FileReader();

 reader.onload = function() {
 img.src = reader.result;
 }

 if (file) {
 reader.readAsDataURL(file);
 }
 }

 function saveGame() {
 let savedUnits = units.map(unit => {
 let imageSrc = unit.querySelector('.image-container img').src;
 return {
 left: unit.style.left,
 top: unit.style.top,
 transform: unit.style.transform,
 ac: unit.querySelector('.armor-class').value,
 damageDice: unit.querySelector('.damage-dice').value,
 imageSrc: imageSrc
 };
 });
 localStorage.setItem("units", JSON.stringify(savedUnits));
 }

function loadGame() {
  let savedUnits = JSON.parse(localStorage.getItem("units"));
  if (savedUnits) {
    savedUnits.forEach(savedUnit => {
      let unit = document.createElement("div");
      unit.className = "unit";
      unit.innerHTML = `
        Stat<input type="text" class="armor-class" placeholder="AC HD curHP/maxHP">
        Dice<input type="text" class="damage-dice" placeholder="XdY+Z" onmouseout="calculateDamageResult(this)">
        <span class="damage-result"></span>
        <span class="drag-handle">Drag</span>
        <input type="button" value="Rota" onclick="rotateUnit(this)">
        <span class="image-container">
          <button onclick="selectImage(this)">Mini</button>
          <img src="">
          <input type="file" accept="image/*" onchange="loadImage(event)">
        </span>
        <input type="button" value="Dele" onclick="deleteUnit(this)">
      `;

      unit.style.left = savedUnit.left;
      unit.style.top = savedUnit.top;
      unit.style.transform = savedUnit.transform;
      unit.querySelector('.armor-class').value = savedUnit.ac;
      unit.querySelector('.damage-dice').value = savedUnit.damageDice;

      let img = unit.querySelector('img');
      img.src = savedUnit.imageSrc;

      document.getElementById("game-container").appendChild(unit);
      units.push(unit);

      unit.draggable = true;
      unit.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', null);
        e.target.classList.add('dragging');
      });
      unit.addEventListener('dragend', (e) => {
        e.target.classList.remove('dragging');
        saveGame();
      });
    });
  }

  // Load map image from localStorage
  const mapImageSrc = localStorage.getItem('mapImage');
  if (mapImageSrc) {
    const gameContainer = document.getElementById('game-container');
    gameContainer.style.backgroundImage = `url('${mapImageSrc}')`;
  }
}

document.addEventListener("DOMContentLoaded", () => {
  loadGame();
});

document.addEventListener('dragover', function (e) {
  e.preventDefault();
});

document.addEventListener('drop', function (e) {
  e.preventDefault();
});

document.addEventListener('drag', function (e) {
  let unit = document.querySelector('.unit.dragging');
  if (unit) {
    let rect = document.getElementById("game-container").getBoundingClientRect();
    let newX = e.clientX - rect.left;
    let newY = e.clientY - rect.top;
    unit.style.left = `${newX}px`;
    unit.style.top = `${newY}px`;
  }
});
</script>

</body>

</html>

