<!DOCTYPE html>

<meta name="viewport" content="width=device-width,initial-scale=1.0">
<title>Advanced Dungeons &amp; Dragons 1st Edition(for Android and Desktop Chrome)</title>
<style>

.draggable-handle {
    cursor: move;
    background-color: #ccc;
    padding: 20px; /* Increase padding to increase touch area */
    border: 1px solid #333;
    text-align: center;
    user-select: none;
}

body,
button,
input,
object,
radio,
select,
table,
td,
text,
textArea,
tr,
a:link,
a:visited {
background:url("Game_files/Panel.png") repeat;
color:#000;
display:inline-block;
font-size:10px;
}

div
{
display:inline-block;
}

.board {
display:grid;
grid-template-columns:repeat(7, 100px);
grid-template-rows:repeat(7, 100px);
height:700px;
position:relative;
width:700px;
}

.board.touch,
.unit.touch
{
touch-action:none;
}

.menu
{
height:auto;
position:relative;
}

.square
{
border:1px solid #000;
height:100px;
width:100px;
}

.unit
{
background:url("Game_files/Panel.png") repeat;
cursor:move;
height:100px;
position:absolute;
transform-origin:center;
user-select:none;
width:100px;
z-index:1;
}

.unit-style
{
display:block;
}

</style>

<body>
 
<button onclick="createUnit()">Create a character or monster?</button>

Load a map image.
<input type="file" id="mapImageInput" accept="image/*" name="mapImageInput">

<div class="board" id="board" style="background-image: url(Game_files/Map.png); background-size: cover;"><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div><div class="square"></div></div>

<script>
let unitCount=0;
let highestZIndex=1;

// Start constant declarations
const board=document.getElementById('board');
for (let i=0; i < 49; i++) {
const square=document.createElement('div');
square.className='square';
board.appendChild(square);
}
// End constant declarations

// start of drag functions

let isDragging = false;
let draggedElement = null;
let offsetX, offsetY;
let boardRect;

document.addEventListener('mousedown', onMouseDown);
document.addEventListener('mousemove', onMouseMove);
document.addEventListener('mouseup', onMouseUp);

function onMouseDown(event) {
if (event.target.classList.contains('unit')) {
isDragging = true;
draggedElement = event.target;
offsetX = event.clientX - draggedElement.offsetLeft;
offsetY = event.clientY - draggedElement.offsetTop;
draggedElement.style.zIndex = '2'; // Bring the element to the top
document.addEventListener('selectstart', preventDefault); // Prevent text selection during drag
boardRect = document.getElementById('board').getBoundingClientRect(); // Get board dimensions
}
}

function onMouseMove(event) {
if (isDragging) {
event.preventDefault();
const mouseX = event.clientX - offsetX;
const mouseY = event.clientY - offsetY;

// Enforce maximum draggable area
const maxX = boardRect.width - draggedElement.offsetWidth;
const maxY = boardRect.height - draggedElement.offsetHeight;
const newX = Math.min(Math.max(0, mouseX), maxX);
const newY = Math.min(Math.max(0, mouseY), maxY);

// Snap to grid
const cellSize = 100;
const gridX = Math.round(newX / cellSize) * cellSize;
const gridY = Math.round(newY / cellSize) * cellSize;

draggedElement.style.left = `${gridX}px`;
draggedElement.style.top = `${gridY}px`;
}
}

function onMouseUp() {
if (isDragging) {
isDragging = false;
draggedElement.style.zIndex = '1'; // Restore the z-index
document.removeEventListener('selectstart', preventDefault);
}
}

function preventDefault(event) {
event.preventDefault();
}

// Add touch event listeners
// Add touch event listeners with { passive: false }
document.addEventListener('touchstart', onTouchStart, { passive: false });
document.addEventListener('touchmove', onTouchMove, { passive: false });
document.addEventListener('touchend', onTouchEnd, { passive: false });


function onTouchStart(event) {
    const dragHandle = event.target.closest('.draggable-handle');

    if (dragHandle) {
        isDragging = true;
        draggedElement = dragHandle.parentElement;
        offsetX = event.touches[0].clientX - draggedElement.offsetLeft;
        offsetY = event.touches[0].clientY - draggedElement.offsetTop;
        draggedElement.style.zIndex = '2';
        document.addEventListener('selectstart', preventDefault);
        boardRect = document.getElementById('board').getBoundingClientRect();
    }
}

function onTouchMove(event) {
    if (isDragging) {
        event.preventDefault();
        const mouseX = event.touches[0].clientX - offsetX;
        const mouseY = event.touches[0].clientY - offsetY;

        const maxX = boardRect.width - draggedElement.offsetWidth;
        const maxY = boardRect.height - draggedElement.offsetHeight;
        const newX = Math.min(Math.max(0, mouseX), maxX);
        const newY = Math.min(Math.max(0, mouseY), maxY);

        const cellSize = 100;
        const gridX = Math.round(newX / cellSize) * cellSize;
        const gridY = Math.round(newY / cellSize) * cellSize;

        draggedElement.style.left = `${gridX}px`;
        draggedElement.style.top = `${gridY}px`;
    }
}


function onTouchEnd() {
    if (isDragging) {
        isDragging = false;
        draggedElement.style.zIndex = '1';
        document.removeEventListener('selectstart', preventDefault);
    }
}

// End of the drag functions

// Beginning of map image loading functions
let currentMapImage='Game_files/Map.png';

function loadMapImage(event) {
const mapImage=document.createElement('img');
const file=event.target.files[0];

if (file) {
currentMapImage=URL.createObjectURL(file);
mapImage.src=currentMapImage;
mapImage.style.position='absolute';
mapImage.style.width='100%';
mapImage.style.height='100%';
mapImage.style.top='0';
mapImage.style.left='0';
mapImage.style.zIndex='-1';
const board=document.getElementById('board');
board.innerHTML='';
board.appendChild(mapImage);
changeMap();
}
}

document.getElementById('mapImageInput').addEventListener('change',loadMapImage);

const defaultMapImage=new Image();
defaultMapImage.src='Game_files/Map.png';

defaultMapImage.onload=function() {
const board=document.getElementById('board');
board.style.backgroundImage=`url(${defaultMapImage.src})`;
board.style.backgroundSize='cover';
}

function changeMap() {
const board=document.getElementById('board');
board.style.backgroundImage=`url(${currentMapImage})`;
board.style.backgroundSize='cover';
}
// End of map image loading functions

function getRotationDegrees(element) {
const transform=window.getComputedStyle(element).getPropertyValue('transform');
if (transform && transform !== 'none') {
const matrix=new DOMMatrix(transform);
return Math.round(Math.atan2(matrix.b,matrix.a) * (180/Math.PI));
}
return 0;
}

// Start drag and drop functions
function onDragStart(event) {
isDragging=true;
event.dataTransfer.setData('text/plain',event.target.id);

const rect=event.target.getBoundingClientRect();
offsetX=event.clientX - rect.left;
offsetY=event.clientY - rect.top;
draggedElement=event.target;

highestZIndex++;
draggedElement.style.zIndex=highestZIndex;
}

function onDragOver(event) {
event.preventDefault();
}

function onDrop(event) {
event.preventDefault();
const data=event.dataTransfer.getData('text/plain');
const draggedElement=document.getElementById(data);
const cellSize=100;

if (draggedElement) {
const mouseX=event.clientX - board.offsetLeft;
const mouseY=event.clientY - board.offsetTop;

const cellX=Math.floor(mouseX / cellSize) * cellSize;
const cellY=Math.floor(mouseY / cellSize) * cellSize;

draggedElement.style.left=`${cellX}px`;
draggedElement.style.top=`${cellY}px`;
}
}

board.addEventListener('dragover',(event) => {
event.preventDefault();
});

board.addEventListener('drop',(event) => {
event.preventDefault();
const data=event.dataTransfer.getData('text/plain');
const draggedElement=document.getElementById(data);
const cellSize=100;

if (draggedElement) {
const mouseX=event.clientX - board.offsetLeft;
const mouseY=event.clientY - board.offsetTop;

const cellX=Math.floor(mouseX / cellSize) * cellSize;
const cellY=Math.floor(mouseY / cellSize) * cellSize;

draggedElement.style.left=`${cellX}px`;
draggedElement.style.top=`${cellY}px`;
}
});

document.addEventListener('mousemove',onMouseMove);

function onMouseMove(event) {
if (isDragging) {
const mouseX=event.clientX - offsetX + window.scrollX;
const mouseY=event.clientY - offsetY + window.scrollY;
const boardRect=board.getBoundingClientRect();
const maxX=boardRect.width - draggedElement.offsetWidth;
const maxY=boardRect.height - draggedElement.offsetHeight;
const newX=Math.min(Math.max(0,mouseX),maxX);
const newY=Math.min(Math.max(0,mouseY),maxY);
draggedElement.style.left=`${newX}px`;
draggedElement.style.top=`${newY}px`;
}
}

document.addEventListener('mouseup',onMouseUp);

function onMouseUp() {
if (isDragging) {
isDragging=false;
}
}

document.addEventListener('dragend',() => {
isDragging=false;
draggedElement=null;
});
// End drag and drop functions

let selectedUnit = null; // Variable to keep track of the selected unit

function createUnit() {
const unitElement=document.createElement('div');
unitElement.className='unit';
unitElement.draggable=true;
unitElement.id=`unit-${unitCount}`;
unitElement.ondragstart=onDragStart;

    // Create a draggable handle
    const draggableHandle = document.createElement('div');
    draggableHandle.className = 'draggable-handle';
    draggableHandle.textContent = 'Drag Me';
    
    // Add touchstart event listener to handle touch drag
    draggableHandle.addEventListener('touchstart', function(event) {
        onTouchStart(event);
    });

    // Add mousedown event listener to handle cursor drag
    draggableHandle.addEventListener('mousedown', function(event) {
        onMouseDown(event);
    });

    // Add the draggable handle to the unit element
    unitElement.appendChild(draggableHandle);

    // ... (rest of your code)

    document.body.appendChild(unitElement);

// Create a radio button for targeting
const targetRadio = document.createElement('input');
targetRadio.type = 'radio';
targetRadio.name = 'target';
targetRadio.id = `target-${unitCount}`;
targetRadio.style.position = 'relative';

// Label for the radio button (optional)
const targetLabel = document.createElement('label');
targetLabel.htmlFor = `target-${unitCount}`;
targetLabel.textContent = `Target ${unitCount}`;
targetLabel.style.position = 'relative';

// Add an event listener to handle targeting
targetRadio.addEventListener('change', function() {
if (selectedUnit) {
selectedUnit.style.border = '2px solid black'; // Reset border of previously selected unit
}
selectedUnit = unitElement; // Update the selected unit
// Set visual indication on unit face
unitElement.style.border = '2px solid red'; // Change border color to indicate selection
unitElement.style.boxShadow = '0px 0px 10px rgba(255, 0, 0, 0.5)'; // Add shadow for emphasis
});

const rotateButton=document.createElement('button');
rotateButton.textContent='R';

rotateButton.addEventListener('click',function(event) {
event.stopPropagation(); // Stop event from bubbling up
let currentRotation=0;

const transform=unitElement.style.transform;
const match=transform && transform.match(/\d+/);

if (match) {
currentRotation=parseInt(match[0],10);
}
unitElement.style.transform=`rotate(${(currentRotation + 45) % 360}deg)`;
});

const menuButton=document.createElement('button');
menuButton.textContent='M';

const menu=document.createElement('div');
menu.className='menu';

const nameLabel=document.createElement('div');
nameLabel.textContent='Name:';

const nameInput=document.createElement('input');
nameInput.id = 'nameInputId-' + unitCount;
nameInput.type='text';
nameInput.name = 'nameInputName-' + unitCount;
nameInput.placeholder='character or monster name';
nameInput.maxLength=20 ;
nameInput.size=20;
nameInput.style.width='21';
nameInput.addEventListener('input',function() {
nameUnit.textContent=nameInput.value;
});

const raceContainer = document.createElement('div');

// Race Label
const raceLabel = document.createElement('div');
raceLabel.textContent = 'Race:';

// Race Dropdown Select
const raceSelect = document.createElement('select');
raceSelect.setAttribute('id', `raceSelectId-${unitCount}`); // Unique ID for each selection
raceSelect.setAttribute('name', `raceSelectName-${unitCount}`); // Unique name for each selection

const races = ['Dwarf', 'Elf', 'Elf,Half', 'Gnoll', 'Gnome', 'Human', 'Halfling', 'Orc', 'Orc,Half'];

races.forEach(raceName => {
const option = document.createElement('option');
option.value = raceName;
option.textContent = raceName;
raceSelect.appendChild(option);
});

raceSelect.addEventListener('change', function() {
    raceUnit.textContent = raceSelect.value;
    if (raceSelect.value === "Gnoll") {
        nameInput.value = 'Gnoll 1';
        nameUnit.textContent=`Name:${'Gnoll 1'}`;
        armorClassInput.value = '5';
        armorClassUnit.textContent=`AC:${5}`;
        hitDiceInput.value = '2';
        hitDiceUnit.textContent=`HD:${2}`;
        maximumHitPointsInput.value=16;
        currentHitPointsInput.value=16;
        currentHitPointsUnit.textContent=`HP:${16}`;
        movementInput.value = '9';
        movementUnit.textContent=`MV:${9}`;
    }
    if (raceSelect.value === "Orc") {
        nameInput.value = 'Orc 1';
        nameUnit.textContent=`Name:${'Orc 1'}`;
        armorClassInput.value = '6';
        armorClassUnit.textContent=`AC:${6}`;
        hitDiceInput.value = '1';
        hitDiceUnit.textContent=`HD:${1}`;
        maximumHitPointsInput.value=8;
        currentHitPointsInput.value=8;
        currentHitPointsUnit.textContent=`HP:${8}`;
        movementInput.value = '9';
        movementUnit.textContent=`MV:${9}`;
    }
    else {
        // Reset stats to default values for other races if needed
    }
});

const raceUnit = document.createElement('div');
raceUnit.textContent = 'Race:';

// Append race elements to the race container
raceContainer.appendChild(raceLabel);
raceContainer.appendChild(raceSelect);

const addImageButton=Object.assign(document.createElement('button'),{
textContent:'Add a miniature?',
onclick:function() {
imageInput.click();
}
});

const imageInput=Object.assign(document.createElement('input'),{
type:'file',
accept:'image/*',
});

imageInput.addEventListener('change',function() {
const file=this.files[0];
const reader=new FileReader();

reader.onload=function() {
const imageElement=document.createElement('img');
imageElement.src=reader.result;

// Add an event listener to the image to prevent dragging
imageElement.addEventListener('dragstart',function(event) {
event.preventDefault();
});

unitElement.style.backgroundImage=`url(${reader.result})`;

imageElement.remove();
}

reader.readAsDataURL(file);
});

const movementLabel=document.createElement('div');
movementLabel.textContent='MV:';

const movementInput=document.createElement('input');
movementInput.id='movementInputId'+unitCount;
movementInput.maxLength=2;
movementInput.name='movementInputName'+unitCount;
movementInput.size=2;
movementInput.style.width='3';
movementInput.type='text';

const armorClassLabel=document.createElement('div');
armorClassLabel.textContent='AC:';

const armorClassInput=document.createElement('input');
armorClassInput.id = 'armorClassInputId-' + unitCount;
armorClassInput.maxLength=2;
armorClassInput.name = 'armorClassInputName-' + unitCount;
armorClassInput.size=2;
armorClassInput.style.width='3';
armorClassInput.type='text';
armorClassInput.addEventListener('input',function() {
unitElement.dataset.ac=armorClassInput.value;
armorClassUnit.textContent=`AC:${armorClassInput.value}`;
armorClassUnit.className='unit-style';
});
const armorClassUnit=document.createElement('div');
armorClassUnit.textContent='AC:';
armorClassUnit.className='unit-style';

const hitDiceLabel=document.createElement('div');
hitDiceLabel.textContent='HD:';
const hitDiceInput=document.createElement('input');
hitDiceInput.id='hitDiceInputId'+unitCount;
hitDiceInput.maxLength=8;
hitDiceInput.name='hitDiceInputName'+unitCount;
hitDiceInput.size=8;
hitDiceInput.style.width='9';
hitDiceInput.type='text';

const maximumHitPointsLabel=document.createElement('div');
maximumHitPointsLabel.textContent='maxHP:';

const maximumHitPointsInput=Object.assign
(
document.createElement('input'),
{
id:'maximumHitPointsInputId'+unitCount,
maxLength:3,
name:'maximumHitPointsInputName'+unitCount,
oninput:function()
{
currentHitPointsInput.value=this.value;
currentHitPointsUnit.textContent=`HP:${this.value}`;
},
size:3,
style:'width:4;',
type:'text',
}
);

const currentHitPointsLabel=document.createElement('div');
currentHitPointsLabel.textContent='curHP:';
const currentHitPointsInput=document.createElement('input');
currentHitPointsInput.id='currentHitPointsInputId'+unitCount;
currentHitPointsInput.maxLength=3;
currentHitPointsInput.name='currentHitPointsInputName'+unitCount;
currentHitPointsInput.size=3;
currentHitPointsInput.style.width='4';
currentHitPointsInput.type='text';
const currentHitPointsUnit=document.createElement('div');
currentHitPointsUnit.textContent='HP:';
currentHitPointsInput.addEventListener('input',
function() {
unitElement.dataset.curHP=currentHitPointsInput.value;
currentHitPointsUnit.textContent=`HP:${currentHitPointsInput.value}`;
currentHitPointsUnit.className='unit-style';
});

const menuAddRowButton=document.createElement('button');
menuAddRowButton.textContent='Add a weapon or spell and effect?';

menuAddRowButton.addEventListener('click',function() {
const newRow=document.createElement('div');

const newAttackName=document.createElement('input');
newAttackName.type='text';
newAttackName.placeholder='weapon or spell name and effect';
newAttackName.maxLength=20;
newAttackName.size=20;
newAttackName.style.width='21';
newRow.appendChild(newAttackName);

const newAttackRoll=document.createElement('input');
newAttackRoll.type='text';
newAttackRoll.placeholder='Attack XdY+Z';
newAttackRoll.maxLength=8;
newAttackRoll.size=8;
newAttackRoll.style.width='9';
newRow.appendChild(newAttackRoll);

const attackRollResult = document.createElement('span');

newRow.appendChild(newAttackRoll);
newRow.appendChild(attackRollResult);

newAttackRoll.addEventListener('mouseout', function() {
  const attackRollValue = newAttackRoll.value;
  const rollResult = rollDice(attackRollValue);
  attackRollResult.textContent = `Attack Result:  ${rollResult}`;
});

const newDamageRoll=document.createElement('input');
newDamageRoll.type='text';
newDamageRoll.placeholder='Damage XdY+Z';
newDamageRoll.maxLength=8;
newDamageRoll.size=8;
newDamageRoll.style.width='9';
newRow.appendChild(newDamageRoll);

function rollDice(diceString) {
const [numDice, numSides, modifier] = diceString.match(/(\d+)d(\d+)(\+\d+)?/).slice(1).map(Number);
let total = 0;
for (let i = 0; i < numDice; i++) {
total += Math.floor(Math.random() * numSides) + 1;
}
total += modifier || 0;
return total;
}

const damageRollResult = document.createElement('span');

newRow.appendChild(newDamageRoll);
newRow.appendChild(damageRollResult);

newDamageRoll.addEventListener('mouseout', function() {
  const damageRollValue = newDamageRoll.value;
  const rollResult = rollDice(damageRollValue);
  damageRollResult.textContent = `  Damage Result:  ${rollResult}`;
});

newRow.appendChild(newDamageRoll);

// ... (rest of the code remains the same)


menu.insertBefore(newRow,menuAddRowButton);
});

const deleteButton=document.createElement('button');
deleteButton.textContent='Delete this piece?';
deleteButton.addEventListener('click',function() {
menu.remove();
unitElement.remove();
});

menuButton.addEventListener('click',function(event) {
event.stopPropagation();
});

document.addEventListener('click',function() {
});

menu.addEventListener('click',function(event) {
event.stopPropagation();
});

movementInput.addEventListener('input',function() {
unitElement.dataset.mv=movementInput.value;
movementUnit.textContent=`MV:${movementInput.value}`;
});

hitDiceInput.addEventListener('input',function() {
unitElement.dataset.hd=hitDiceInput.value;
hitDiceUnit.textContent=`HD:${hitDiceInput.value}`;
});

const nameUnit=document.createElement('div');
nameUnit.textContent='Name';

const movementUnit=document.createElement('div');
movementUnit.textContent='MV:';
movementUnit.className='unit-style';

movementInput.addEventListener('input',function() {
unitElement.dataset.mv=movementInput.value;
movementUnit.textContent=`MV:${movementInput.value}`;
});

const hitDiceUnit=document.createElement('div');
hitDiceUnit.textContent='HD:';
hitDiceUnit.className='unit-style';

hitDiceInput.addEventListener('input',function() {
unitElement.dataset.hd=hitDiceInput.value;
hitDiceUnit.textContent=`HD:${hitDiceInput.value}`;
});

unitElement.appendChild(rotateButton);
unitElement.style.left='0';
unitElement.style.top='0';
unitElement.appendChild(targetRadio);
unitElement.appendChild(targetLabel);
unitElement.appendChild(armorClassUnit);
unitElement.appendChild(hitDiceUnit);
unitElement.appendChild(currentHitPointsUnit);
unitElement.appendChild(movementUnit);
unitElement.appendChild(nameUnit);

board.appendChild(unitElement);

const horizontalRule = document.createElement('hr');
horizontalRule.style.border = '0';
horizontalRule.style.height = '2px';
horizontalRule.style.background = 'red';

menu.appendChild(horizontalRule);
menu.appendChild(nameLabel);
menu.appendChild(nameInput);
menu.appendChild(addImageButton);
menu.appendChild(imageInput);
menu.appendChild(armorClassLabel);
menu.appendChild(armorClassInput);
menu.appendChild(hitDiceLabel);
menu.appendChild(hitDiceInput);
menu.appendChild(maximumHitPointsLabel);
menu.appendChild(maximumHitPointsInput);
menu.appendChild(currentHitPointsLabel);
menu.appendChild(currentHitPointsInput);
menu.appendChild(movementLabel);
menu.appendChild(movementInput);
menu.appendChild(menuAddRowButton);
menu.appendChild(raceContainer);
menu.appendChild(deleteButton);

document.body.appendChild(menu);

unitCount++;
return unitElement;
}
</script>

<a href="https://web.archive.org/web/20231010011237/https://archive.org/details/tsr02011advanceddungeonsdragonsadd1steddungeonmastersguide/page/n74/mode/1up" target="_blank">1st Edition Dungeon Masters Guide Combat Tables</a>
<br>
<a href="https://web.archive.org/web/20231010011237/https://archive.org/details/tsr02009addmonstermanual/mode/1up" target="_blank">1st Edition Monster Manual</a>
<br>
<a href="https://web.archive.org/web/20231010011237/https://archive.org/details/tsr09045addthesecretofbonehill/mode/1up" target="_blank">Dungeon Module L1 "The Secret of Bone Hill</a>
<br>
<img src="./Game_files/DiceSprite.png"><br>

<div id="resultsContainer"></div>
<img src="./Game_files/Table1.png"><br>
<img src="./Game_files/Table2.png"><br>
<img src="./Game_files/Table3.png">

</body>

</html>