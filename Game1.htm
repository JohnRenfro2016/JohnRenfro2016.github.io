<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Square Game Board with Menu</title>
    <style>
        .board {
            display: grid;
            grid-template-columns: repeat(11, 50px);
            grid-template-rows: repeat(11, 50px);
            border: 2px solid #000;
            width: 550px;
            height: 550px;
            position: relative;
            margin: auto;
        }

        .square {
            width: 50px;
            height: 50px;
            border: 1px solid #ccc;
            position: relative;
            background-color: #f0f0f0;
        }

        .unit {
            position: absolute;
            width: 50px;
            height: 50px;
            border: 1px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
            cursor: move;
            z-index: 1;
            user-select: none;
            transform-origin: center;
            font-size: 14px;
        }

        .rotate-button {
            display: block;
            margin-top: 5px;
        }

        .menu {
            display: none;
            position: absolute;
            background-color: #fff;
            border: 1px solid #ccc;
            padding: 10px;
            z-index: 2;
        }

        .menu-button {
            cursor: pointer;
            font-size: 12px;
        }

        .menu-item {
            margin-bottom: 5px;
        }

        .menu-input {
            width: 100%;
            box-sizing: border-box;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <button onclick="createUnit()">Create Piece</button>
    <button onclick="deleteUnits()">Delete Pieces</button>

    <div class="board" id="board">
        <!-- Square cells and units will be created dynamically using JavaScript -->
    </div>

    <script>
        let unitCount = 0;

        function createUnit() {
            // Create a unit div element
            const unitElement = document.createElement('div');
            unitElement.className = 'unit';
            unitElement.draggable = true;
            unitElement.id = `unit-${unitCount}`;

            // Create a button for rotating the unit
            const rotateButton = document.createElement('button');
            rotateButton.textContent = 'R';
            rotateButton.className = 'rotate-button';

            // Event listener for rotating the unit
            rotateButton.addEventListener('click', function() {
                let currentRotation = 0;

                // Check if rotation is already applied
                const transform = unitElement.style.transform;
                const match = transform && transform.match(/\d+/);

                if (match) {
                    currentRotation = parseInt(match[0], 10);
                }

                // Apply new rotation
                unitElement.style.transform = `rotate(${(currentRotation + 45) % 360}deg)`;
            });

            // Create a menu button
            const menuButton = document.createElement('button');
            menuButton.className = 'menu-button';
            menuButton.textContent = 'M';

            // Create a menu
            const menu = document.createElement('div');
            menu.className = 'menu';

            // Create menu items
            const menuText = document.createElement('div');
            menuText.className = 'menu-item';
            menuText.textContent = 'Change the name?';

            const menuACInput = document.createElement('input');
            menuACInput.type = 'text';
            menuACInput.className = 'menu-input';
            menuACInput.placeholder = 'AC';

            const menuMVInput = document.createElement('input');
            menuMVInput.type = 'text';
            menuMVInput.className = 'menu-input';
            menuMVInput.placeholder = 'MV';

            const menuHDInput = document.createElement('input');
            menuHDInput.type = 'text';
            menuHDInput.className = 'menu-input';
            menuHDInput.placeholder = 'HD';

            const menuHPInput = document.createElement('input');
            menuHPInput.type = 'text';
            menuHPInput.className = 'menu-input';
            menuHPInput.placeholder = 'HP';

            // Create a delete button in the menu
            const deleteButton = document.createElement('button');
            deleteButton.className = 'menu-button';
            deleteButton.textContent = 'Delete Piece';
            // Event listener for deleting the unit
            deleteButton.addEventListener('click', function() {
                unitElement.remove();
            });

            // Event listener for showing the menu
            menuButton.addEventListener('click', function(event) {
                event.stopPropagation();
                menu.style.display = 'block';
            });

            // Event listener for hiding the menu when clicking outside
            document.addEventListener('click', function() {
                menu.style.display = 'none';
            });

            // Event listener for preventing the menu from closing when clicking inside the menu
            menu.addEventListener('click', function(event) {
                event.stopPropagation();
            });

            // Event listener for menu item "Change Text"
            menuText.addEventListener('click', function() {
                const newText = prompt('Enter new text:');
                if (newText !== null) {
                    unitText.textContent = newText;
                }
            });

            menuACInput.addEventListener('input', function() {
                unitElement.dataset.ac = menuACInput.value;
            });

            menuMVInput.addEventListener('input', function() {
                unitElement.dataset.mv = menuMVInput.value;
            });

            menuHDInput.addEventListener('input', function() {
                unitElement.dataset.hd = menuHDInput.value;
            });

            menuHPInput.addEventListener('input', function() {
                unitElement.dataset.hp = menuHPInput.value;
            });

            // Add the button, menu button, and menu to the unit element
            const unitText = document.createElement('div');
            unitText.className = 'unit-text';
            unitText.textContent = 'Name';

            unitElement.appendChild(rotateButton);
            unitElement.appendChild(menuButton);
            menu.appendChild(menuText);
            menu.appendChild(menuACInput);
            menu.appendChild(menuMVInput);
            menu.appendChild(menuHDInput);
            menu.appendChild(menuHPInput);
            menu.appendChild(deleteButton);
            unitElement.appendChild(menu);
            unitElement.appendChild(unitText);

            // Event listener for drag start
            unitElement.ondragstart = (event) => {
                event.dataTransfer.setData('text/plain', event.target.id);
            };

            // Add unit to the board
            const board = document.getElementById('board');
            const cellSize = 50;
            const randomColumn = Math.floor(Math.random() * 11) * cellSize;
            const randomRow = Math.floor(Math.random() * 11) * cellSize;

            // Snap to nearest square
            unitElement.style.left = `${Math.round(randomColumn / cellSize) * cellSize}px`;
            unitElement.style.top = `${Math.round(randomRow / cellSize) * cellSize}px`;

            board.appendChild(unitElement);

            unitCount++;
        }

        function deleteUnits() {
            // Find all units by class name
            const units = document.getElementsByClassName('unit');

            // Convert HTMLCollection to Array for easy iteration
            const unitsArray = Array.from(units);

            // Remove each unit
            unitsArray.forEach(unit => unit.remove());
        }

        // Dynamically create square cells
        const board = document.getElementById('board');
        for (let i = 0; i < 121; i++) {
            const square = document.createElement('div');
            square.className = 'square';
            board.appendChild(square);
        }

        // Event listener for drag over
        board.addEventListener('dragover', (event) => {
            event.preventDefault();
        });

        // Event listener for drop
        board.addEventListener('drop', (event) => {
            event.preventDefault();
            const data = event.dataTransfer.getData('text/plain');
            const draggedElement = document.getElementById(data);
            const cellSize = 50;

            if (draggedElement) {
                // Calculate the cell position based on mouse coordinates
                const mouseX = event.clientX - board.offsetLeft;
                const mouseY = event.clientY - board.offsetTop;

                const cellX = Math.floor(mouseX / cellSize) * cellSize;
                const cellY = Math.floor(mouseY / cellSize) * cellSize;

                draggedElement.style.left = `${cellX}px`;
                draggedElement.style.top = `${cellY}px`;
            }
        });

    </script>
</body>
</html>
